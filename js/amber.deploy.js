"undefined"===typeof console&&(this.console={log:function(){},warn:function(){},info:function(){},debug:function(){},error:function(){}});function SmalltalkObject(){}function SmalltalkBehavior(){}function SmalltalkClass(){}function SmalltalkPackage(){}function SmalltalkMetaclass(){this.meta=true}function SmalltalkMethod(){}function SmalltalkNil(){}function SmalltalkSymbol(a){this.value=a}
function Smalltalk(){function a(a){var a=a||{},c=b(new SmalltalkMetaclass,{});c.instanceClass=new c.fn;var d=b(c.instanceClass,a);d.className=a.className;c.className=a.className+" class";if(a.superclass){d.superclass=a.superclass;c.superclass=a.superclass.klass}return d}function b(a,b){a.fn=b.fn||function(){};a.iVarNames=b.iVarNames||[];Object.defineProperty(a,"toString",{value:function(){return"Smalltalk "+this.className},configurable:true});a.pkg=b.pkg;Object.defineProperties(a.fn.prototype,{methods:{value:{},
enumerable:false,configurable:true,writable:true},inheritedMethods:{value:{},enumerable:false,configurable:true,writable:true},klass:{value:a,enumerable:false,configurable:true,writable:true}});return a}function c(a,b,c,g){a==null&&(a=nil);if(g=g?g.fn.prototype[b]:a.klass&&a[b]){var f=a,j=d.oldContext,k=d.thisContext;if(j){d.oldContext=null;j.homeContext=k;j.receiver=f;j.selector=b;j.temps=c||{};b=d.thisContext=j}else b=d.thisContext=new SmalltalkMethodContext(f,b,c,k);c=g.apply(a,c);d.thisContext=
b.homeContext;b.homeContext=void 0;d.oldContext=b;return c}if(a.klass===void 0||a.allowJavaScriptCalls){g=b._asJavaScriptSelector();f=a[g];if(typeof f==="function"&&!/^[A-Z]/.test(g))c=f.apply(a,c);else if(f!==void 0)if(c[0]){a[g]=c[0];c=nil}else c=f;else c=d.send(d.JSObjectProxy._on_(a),b,c)}else c=a._doesNotUnderstand_(d.Message._new()._selector_(d.convertSelector(b))._arguments_(c));return c}var d=this;d.thisContext=void 0;d.reservedWords=["break","case","catch","char","class","continue","debugger",
"default","delete","do","else","finally","for","function","if","in","instanceof","new","private","protected","public","return","static","switch","this","throw","try","typeof","var","void","while","with","yield"];symbolTable={};d.symbolFor=function(a){symbolTable[a]===void 0&&(symbolTable[a]=new SmalltalkSymbol(a));return symbolTable[a]};oid=0;d.nextId=function(){return oid=oid+1};d.packages={};d.method=function(a){var b=new SmalltalkMethod;b.selector=a.selector;b.jsSelector=a.jsSelector;b.args=a.args||
{};b.category=a.category;b.source=a.source;b.messageSends=a.messageSends||[];b.referencedClasses=a.referencedClasses||[];b.fn=a.fn;return b};d.init=function(a){d.initSubTree(a);a.klass&&!a.meta&&d.initSubTree(a.klass)};d.initSubTree=function(a){var b=d.subclasses(a),c=a.fn.prototype;if(a.superclass&&a.superclass!==nil)for(var a=d.methods(a.superclass),g=Object.keys(a),f=0,j=g.length;f<j;++f){var k=g[f];if(!c.methods[k]){c.inheritedMethods[k]=a[k];Object.defineProperty(c,a[k].jsSelector,{value:a[k].fn,
configurable:true})}}for(f=0;f<b.length;f++)d.initSubTree(b[f])};d.packages.all=function(){var a=[],b;for(b in d.packages)d.packages.hasOwnProperty(b)&&typeof d.packages[b]!=="function"&&a.push(d.packages[b]);return a};d.classes=function(){for(var a=[],b=Object.keys(d),c=b.length,g=0;g<c;++g){var f=b[g];f.search(/^[A-Z]/)!==-1&&a.push(d[f])}return a};d.methods=function(a){for(var b={},c=a.fn.prototype.inheritedMethods,d=0,f=Object.keys(c),j=f.length;d<j;++d)b[f[d]]=c[f[d]];c=a.fn.prototype.methods;
d=0;f=Object.keys(c);for(j=f.length;d<j;++d)b[f[d]]=c[f[d]];return b};d.subclasses=function(a){for(var b=[],c=d.classes(),g=0,f=c.length;g<f;++g){var j=c[g];if(j.fn){j.superclass===a&&b.push(j);(j=j.klass)&&j.superclass===a&&b.push(j)}}return b};d.wrapClassName=function(b,c,i,g){c=d.addPackage(c);d[b]=a({className:b,superclass:g,pkg:c,fn:i})};d.alias=function(a,b){d[b]=a};d.addPackage=function(a,b){if(!a)return nil;if(d.packages[a]){if(b)d.packages[a].properties=b}else{var c=d.packages,g=new SmalltalkPackage;
g.pkgName=a;g.properties=b||{};c[a]=g}return d.packages[a]};d.addClass=function(b,c,i,g){g=d.addPackage(g);if(d[b]){d[b].superclass=c;d[b].iVarNames=i;d[b].pkg=g||d[b].pkg}else d[b]=a({className:b,superclass:c,pkg:g,iVarNames:i})};d.addMethod=function(a,b,c){Object.defineProperty(c.fn.prototype,a,{value:b.fn,configurable:true});c.fn.prototype.methods[b.selector]=b;b.methodClass=c;b.jsSelector=a};d.send=function(a,b,i,g){if(d.thisContext)return c(a,b,i,g);try{return c(a,b,i,g)}catch(f){d.thisContext=
void 0;if(f.smalltalkError){d.thisContext=void 0;smalltalk.ErrorHandler._current()._handleError_(f)}else throw f;}};d.oldContext=null;d.getThisContext=function(){if(d.thisContext)return d.thisContext.copy()};d.convertSelector=function(a){return a.match(/__/)?a.replace(/^_/,"").replace(/_plus/,"+").replace(/_minus/,"-").replace(/_star/,"*").replace(/_slash/,"/").replace(/_gt/,">").replace(/_lt/,"<").replace(/_eq/,"=").replace(/_comma/,",").replace(/_at/,"@"):a.replace(/^_/,"").replace(/_/g,":")};d.readJSObject=
function(a){var b=a,c=a.constructor===Object,g=a.constructor===Array;c&&(b=smalltalk.Dictionary._new());for(var f in a){c&&b._at_put_(f,d.readJSObject(a[f]));g&&(b[f]=d.readJSObject(a[f]))}return b}}function SmalltalkMethodContext(a,b,c,d){this.receiver=a;this.selector=b;this.temps=c||{};this.homeContext=d}SmalltalkMethodContext.prototype.copy=function(){var a=this.homeContext;a&&(a=a.copy());return new SmalltalkMethodContext(this.receiver,this.selector,this.temps,a)};
var nil=new SmalltalkNil,smalltalk=new Smalltalk;this.jQuery&&(this.jQuery.allowJavaScriptCalls=!0);smalltalk.wrapClassName("Object","Kernel",SmalltalkObject);smalltalk.wrapClassName("Smalltalk","Kernel",Smalltalk,smalltalk.Object);smalltalk.wrapClassName("Package","Kernel",SmalltalkPackage,smalltalk.Object);smalltalk.wrapClassName("Behavior","Kernel",SmalltalkBehavior,smalltalk.Object);smalltalk.wrapClassName("Class","Kernel",SmalltalkClass,smalltalk.Behavior);
smalltalk.wrapClassName("Metaclass","Kernel",SmalltalkMetaclass,smalltalk.Behavior);smalltalk.wrapClassName("CompiledMethod","Kernel",SmalltalkMethod,smalltalk.Object);smalltalk.Object.klass.superclass=smalltalk.Class;smalltalk.wrapClassName("Number","Kernel",Number,smalltalk.Object);smalltalk.wrapClassName("BlockClosure","Kernel",Function,smalltalk.Object);smalltalk.wrapClassName("Boolean","Kernel",Boolean,smalltalk.Object);smalltalk.wrapClassName("Date","Kernel",Date,smalltalk.Object);
smalltalk.wrapClassName("UndefinedObject","Kernel",SmalltalkNil,smalltalk.Object);smalltalk.wrapClassName("Collection","Kernel",null,smalltalk.Object);smalltalk.wrapClassName("SequenceableCollection","Kernel",null,smalltalk.Collection);smalltalk.wrapClassName("CharacterArray","Kernel",null,smalltalk.SequenceableCollection);smalltalk.wrapClassName("String","Kernel",String,smalltalk.CharacterArray);smalltalk.wrapClassName("Symbol","Kernel",SmalltalkSymbol,smalltalk.CharacterArray);
smalltalk.wrapClassName("Array","Kernel",Array,smalltalk.SequenceableCollection);smalltalk.wrapClassName("RegularExpression","Kernel",RegExp,smalltalk.String);smalltalk.wrapClassName("Error","Kernel",Error,smalltalk.Object);smalltalk.wrapClassName("MethodContext","Kernel",SmalltalkMethodContext,smalltalk.Object);smalltalk.alias(smalltalk.Array,"OrderedCollection");smalltalk.alias(smalltalk.Date,"Time");smalltalk.addPackage("Kernel-Objects",{});smalltalk.addClass("Object",smalltalk.nil,[],"Kernel-Objects");
smalltalk.Object.comment="*Object is the root of the Smalltalk class system*. All classes in the system are subclasses of Object.\n\nObject provides default behavior common to all normal objects, such as: \n\n- access\n- copying\n- comparison\n- error handling\n- message sending\n- reflection\n\nAlso utility messages that all objects should respond to are defined here.\n\nObject has no instance variable.\n\n##Access\n\nInstance variables can be accessed with `#instVarAt:` and `#instVarAt:put:`. `Object >> instanceVariableNames` answers a collection of all instance variable names.\nAccessing JavaScript properties of an object is done through `#basicAt:`, `#basicAt:put:` and `basicDelete:`.\n\n##Copying\n\nCopying an object is handled by `#copy` and `#deepCopy`. The first one performs a shallow copy of the receiver, while the second one performs a deep copy.\nThe hook method `#postCopy` can be overriden in subclasses to copy fields as necessary to complete the full copy. It will be sent by the copy of the receiver.\n\n##Comparison\n\nObjects understand equality  `#=` and identity `#==` comparison.\n\n##Error handling\n\n- `#halt` is the typical message to use for inserting breakpoints during debugging.\n- `#error:` throws a generic error exception\n- `#doesNotUnderstand:` handles the fact that there was an attempt to send the given message to the receiver but the receiver does not understand this message.\n  Overriding this message can be useful to implement proxies for example.";
smalltalk.addMethod("__minus_gt",smalltalk.method({selector:"->",category:"converting",fn:function(a){return smalltalk.send(smalltalk.Association||Association,"_key_value_",[this,a])},args:["anObject"],source:"-> anObject\n\t^Association key: self value: anObject",messageSends:["key:value:"],referencedClasses:["Association"]}),smalltalk.Object);
smalltalk.addMethod("__eq",smalltalk.method({selector:"=",category:"comparing",fn:function(a){return smalltalk.send(this,"__eq_eq",[a])},args:["anObject"],source:"= anObject\n\t^self == anObject",messageSends:["=="],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("__eq_eq",smalltalk.method({selector:"==",category:"comparing",fn:function(a){return smalltalk.send(smalltalk.send(this,"_identityHash",[]),"__eq",[smalltalk.send(a,"_identityHash",[])])},args:["anObject"],source:"== anObject\n\t^self identityHash = anObject identityHash",messageSends:["=","identityHash"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_asJSON",smalltalk.method({selector:"asJSON",category:"converting",fn:function(){var a=this,b=nil,b=smalltalk.send(smalltalk.HashedCollection||HashedCollection,"_new",[]);smalltalk.send(smalltalk.send(smalltalk.send(a,"_class",[]),"_allInstanceVariableNames",[]),"_do_",[function(c){return smalltalk.send(b,"_at_put_",[c,smalltalk.send(smalltalk.send(a,"_instVarAt_",[c]),"_asJSON",[])])}]);return b},args:[],source:"asJSON\n\t| variables |\n\tvariables := HashedCollection new.\n\tself class allInstanceVariableNames do: [:each |\n\t\tvariables at: each put: (self instVarAt: each) asJSON].\n\t^variables",
messageSends:"new,do:,allInstanceVariableNames,class,at:put:,asJSON,instVarAt:".split(","),referencedClasses:["HashedCollection"]}),smalltalk.Object);smalltalk.addMethod("_asJSONString",smalltalk.method({selector:"asJSONString",category:"converting",fn:function(){return smalltalk.send(smalltalk.JSON||JSON,"_stringify_",[smalltalk.send(this,"_asJSON",[])])},args:[],source:"asJSONString\n\t^JSON stringify: self asJSON",messageSends:["stringify:","asJSON"],referencedClasses:["JSON"]}),smalltalk.Object);
smalltalk.addMethod("_asJavascript",smalltalk.method({selector:"asJavascript",category:"converting",fn:function(){return smalltalk.send(this,"_asString",[])},args:[],source:"asJavascript\n\t^self asString",messageSends:["asString"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_asString",smalltalk.method({selector:"asString",category:"converting",fn:function(){return smalltalk.send(this,"_printString",[])},args:[],source:"asString\n\t^self printString",messageSends:["printString"],referencedClasses:[]}),smalltalk.Object);smalltalk.addMethod("_basicAt_",smalltalk.method({selector:"basicAt:",category:"accessing",fn:function(a){return this[a]},args:["aString"],source:"basicAt: aString\n\t<return self[aString]>",messageSends:[],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_basicAt_put_",smalltalk.method({selector:"basicAt:put:",category:"accessing",fn:function(a,b){return this[a]=b},args:["aString","anObject"],source:"basicAt: aString put: anObject\n\t<return self[aString] = anObject>",messageSends:[],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_basicDelete_",smalltalk.method({selector:"basicDelete:",category:"accessing",fn:function(a){delete this[a];return a},args:["aString"],source:"basicDelete: aString\n    <delete self[aString]; return aString>",messageSends:[],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_basicPerform_",smalltalk.method({selector:"basicPerform:",category:"message handling",fn:function(a){return smalltalk.send(this,"_basicPerform_withArguments_",[a,[]])},args:["aSymbol"],source:"basicPerform: aSymbol \n\t^self basicPerform: aSymbol withArguments: #()",messageSends:["basicPerform:withArguments:"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_basicPerform_withArguments_",smalltalk.method({selector:"basicPerform:withArguments:",category:"message handling",fn:function(a,b){return this[a].apply(this,b)},args:["aSymbol","aCollection"],source:"basicPerform: aSymbol withArguments: aCollection\n\t<return self[aSymbol].apply(self, aCollection);>",messageSends:[],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_class",smalltalk.method({selector:"class",category:"accessing",fn:function(){return this.klass},args:[],source:"class\n\t<return self.klass>",messageSends:[],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_copy",smalltalk.method({selector:"copy",category:"copying",fn:function(){return smalltalk.send(smalltalk.send(this,"_shallowCopy",[]),"_postCopy",[])},args:[],source:"copy\n\t^self shallowCopy postCopy",messageSends:["postCopy","shallowCopy"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_deepCopy",smalltalk.method({selector:"deepCopy",category:"copying",fn:function(){var a=this.klass._new(),b;for(b in this)/^@.+/.test(b)&&(a[b]=this[b]._deepCopy());return a},args:[],source:"deepCopy\n\t<    \n\t    var copy = self.klass._new();\n\t    for(var i in self) {\n\t\tif(/^@.+/.test(i)) {\n\t\t    copy[i] = self[i]._deepCopy();\n\t\t}\n\t    }\n\t    return copy;\n\t>",messageSends:[],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_deprecatedAPI",smalltalk.method({selector:"deprecatedAPI",category:"error handling",fn:function(){smalltalk.send(typeof console=="undefined"?nil:console,"_warn_",[smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.getThisContext(),"_home",[]),"_asString",[]),"__comma",[" is deprecated! (in "]),"__comma",[smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.getThisContext(),"_home",[]),"_home",[]),"_asString",[])]),"__comma",[")"])]);return this},
args:[],source:"deprecatedAPI\n\t\"Just a simple way to deprecate methods.\n\t#deprecatedAPI is in the 'error handling' protocol even if it doesn't throw an error,\n\tbut it could in the future.\"\n\tconsole warn: thisContext home asString, ' is deprecated! (in ', thisContext home home asString, ')'",messageSends:["warn:",",","asString","home"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_doesNotUnderstand_",smalltalk.method({selector:"doesNotUnderstand:",category:"error handling",fn:function(a){var b=smalltalk.send(smalltalk.MessageNotUnderstood||MessageNotUnderstood,"_new",[]);smalltalk.send(b,"_receiver_",[this]);smalltalk.send(b,"_message_",[a]);smalltalk.send(b,"_signal",[]);return this},args:["aMessage"],source:"doesNotUnderstand: aMessage\n\tMessageNotUnderstood new\n\t\treceiver: self;\n\t\tmessage: aMessage;\n\t\tsignal",messageSends:["receiver:","message:",
"signal","new"],referencedClasses:["MessageNotUnderstood"]}),smalltalk.Object);smalltalk.addMethod("_error_",smalltalk.method({selector:"error:",category:"error handling",fn:function(a){smalltalk.send(smalltalk.Error||Error,"_signal_",[a]);return this},args:["aString"],source:"error: aString\n\tError signal: aString",messageSends:["signal:"],referencedClasses:["Error"]}),smalltalk.Object);
smalltalk.addMethod("_halt",smalltalk.method({selector:"halt",category:"error handling",fn:function(){smalltalk.send(this,"_error_",["Halt encountered"]);return this},args:[],source:"halt\n\tself error: 'Halt encountered'",messageSends:["error:"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_identityHash",smalltalk.method({selector:"identityHash",category:"accessing",fn:function(){var a=this.identityHash;if(a)return a;a=smalltalk.nextId();Object.defineProperty(this,"identityHash",{value:a});return a},args:[],source:"identityHash\n\t<\n\tvar hash=self.identityHash;\n\tif (hash) return hash;\n\thash=smalltalk.nextId();\n\tObject.defineProperty(self, 'identityHash', {value:hash});\n\treturn hash;\n\t>",messageSends:[],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_ifNil_",smalltalk.method({selector:"ifNil:",category:"testing",fn:function(){return this},args:["aBlock"],source:'ifNil: aBlock\n\t"inlined in the Compiler"\n\t^self',messageSends:[],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_ifNil_ifNotNil_",smalltalk.method({selector:"ifNil:ifNotNil:",category:"testing",fn:function(a,b){return smalltalk.send(b,"_value",[])},args:["aBlock","anotherBlock"],source:'ifNil: aBlock ifNotNil: anotherBlock\n\t"inlined in the Compiler"\n\t^anotherBlock value',messageSends:["value"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_ifNotNil_",smalltalk.method({selector:"ifNotNil:",category:"testing",fn:function(a){return smalltalk.send(a,"_value",[])},args:["aBlock"],source:'ifNotNil: aBlock\n\t"inlined in the Compiler"\n\t^aBlock value',messageSends:["value"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_ifNotNil_ifNil_",smalltalk.method({selector:"ifNotNil:ifNil:",category:"testing",fn:function(a){return smalltalk.send(a,"_value",[])},args:["aBlock","anotherBlock"],source:'ifNotNil: aBlock ifNil: anotherBlock\n\t"inlined in the Compiler"\n\t^aBlock value',messageSends:["value"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_initialize",smalltalk.method({selector:"initialize",category:"initialization",fn:function(){return this},args:[],source:"initialize",messageSends:[],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_instVarAt_",smalltalk.method({selector:"instVarAt:",category:"accessing",fn:function(a){var b=nil,b=smalltalk.send(a,"_asString",[]);return this["@"+b]},args:["aSymbol"],source:"instVarAt: aSymbol\n\t| varname |\n\tvarname := aSymbol asString.\n\t<return self['@'+varname]>",messageSends:["asString"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_instVarAt_put_",smalltalk.method({selector:"instVarAt:put:",category:"accessing",fn:function(a,b){var c=nil,c=smalltalk.send(a,"_asString",[]);this["@"+c]=b;return this},args:["aSymbol","anObject"],source:"instVarAt: aSymbol put: anObject\n\t| varname |\n\tvarname := aSymbol asString.\n\t<self['@' + varname] = anObject>",messageSends:["asString"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_isClass",smalltalk.method({selector:"isClass",category:"testing",fn:function(){return false},args:[],source:"isClass\n\t^false",messageSends:[],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_isKindOf_",smalltalk.method({selector:"isKindOf:",category:"testing",fn:function(a){var b=this;return($receiver=smalltalk.send(b,"_isMemberOf_",[a])).klass===smalltalk.Boolean?$receiver?true:smalltalk.send(smalltalk.send(b,"_class",[]),"_inheritsFrom_",[a]):smalltalk.send($receiver,"_ifTrue_ifFalse_",[function(){return true},function(){return smalltalk.send(smalltalk.send(b,"_class",[]),"_inheritsFrom_",[a])}])},args:["aClass"],source:"isKindOf: aClass\n\t^(self isMemberOf: aClass)\n\t    ifTrue: [true]\n\t    ifFalse: [self class inheritsFrom: aClass]",
messageSends:["ifTrue:ifFalse:","isMemberOf:","inheritsFrom:","class"],referencedClasses:[]}),smalltalk.Object);smalltalk.addMethod("_isMemberOf_",smalltalk.method({selector:"isMemberOf:",category:"testing",fn:function(a){return smalltalk.send(smalltalk.send(this,"_class",[]),"__eq",[a])},args:["aClass"],source:"isMemberOf: aClass\n\t^self class = aClass",messageSends:["=","class"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_isMetaclass",smalltalk.method({selector:"isMetaclass",category:"testing",fn:function(){return false},args:[],source:"isMetaclass\n\t^false",messageSends:[],referencedClasses:[]}),smalltalk.Object);smalltalk.addMethod("_isNil",smalltalk.method({selector:"isNil",category:"testing",fn:function(){return false},args:[],source:"isNil\n\t^false",messageSends:[],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_isNumber",smalltalk.method({selector:"isNumber",category:"testing",fn:function(){return false},args:[],source:"isNumber\n\t^false",messageSends:[],referencedClasses:[]}),smalltalk.Object);smalltalk.addMethod("_isParseFailure",smalltalk.method({selector:"isParseFailure",category:"testing",fn:function(){return false},args:[],source:"isParseFailure\n\t^false",messageSends:[],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_isString",smalltalk.method({selector:"isString",category:"testing",fn:function(){return false},args:[],source:"isString\n\t^false",messageSends:[],referencedClasses:[]}),smalltalk.Object);smalltalk.addMethod("_isSymbol",smalltalk.method({selector:"isSymbol",category:"testing",fn:function(){return false},args:[],source:"isSymbol\n\t^false",messageSends:[],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_log_block_",smalltalk.method({selector:"log:block:",category:"printing",fn:function(a,b){var c=nil;smalltalk.send(typeof console=="undefined"?nil:console,"_log_",[smalltalk.send(smalltalk.send(a,"__comma",[" time: "]),"__comma",[smalltalk.send(smalltalk.send(smalltalk.Date||Date,"_millisecondsToRun_",[function(){return c=smalltalk.send(b,"_value",[])}]),"_printString",[])])]);return c},args:["aString","aBlock"],source:"log: aString block: aBlock\n\n\t| result |\n\tconsole log:  aString,  ' time: ', (Date millisecondsToRun: [result := aBlock value]) printString.\n\t^result",
messageSends:["log:",",","printString","millisecondsToRun:","value"],referencedClasses:["Date"]}),smalltalk.Object);smalltalk.addMethod("_notNil",smalltalk.method({selector:"notNil",category:"testing",fn:function(){return smalltalk.send(smalltalk.send(this,"_isNil",[]),"_not",[])},args:[],source:"notNil\n\t^self isNil not",messageSends:["not","isNil"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_perform_",smalltalk.method({selector:"perform:",category:"message handling",fn:function(a){return smalltalk.send(this,"_perform_withArguments_",[a,[]])},args:["aSymbol"],source:"perform: aSymbol\n\t^self perform: aSymbol withArguments: #()",messageSends:["perform:withArguments:"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_perform_withArguments_",smalltalk.method({selector:"perform:withArguments:",category:"message handling",fn:function(a,b){var c=nil,c=smalltalk.send(a,"_asSelector",[]);return smalltalk.send(this,c,b)},args:["aSymbol","aCollection"],source:"perform: aSymbol withArguments: aCollection\n\t| selector |\n\tselector := aSymbol asSelector.\n\t<return smalltalk.send(self, selector, aCollection)>",messageSends:["asSelector"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_postCopy",smalltalk.method({selector:"postCopy",category:"copying",fn:function(){return this},args:[],source:"postCopy",messageSends:[],referencedClasses:[]}),smalltalk.Object);smalltalk.addMethod("_printNl",smalltalk.method({selector:"printNl",category:"printing",fn:function(){console.log(this);return this},args:[],source:"printNl\n\t<console.log(self)>",messageSends:[],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"printing",fn:function(){return smalltalk.send("a ","__comma",[smalltalk.send(smalltalk.send(this,"_class",[]),"_name",[])])},args:[],source:"printString\n\t^'a ', self class name",messageSends:[",","name","class"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_respondsTo_",smalltalk.method({selector:"respondsTo:",category:"testing",fn:function(a){return smalltalk.send(smalltalk.send(this,"_class",[]),"_canUnderstand_",[a])},args:["aSelector"],source:"respondsTo: aSelector\n\t^self class canUnderstand: aSelector",messageSends:["canUnderstand:","class"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_shallowCopy",smalltalk.method({selector:"shallowCopy",category:"copying",fn:function(){var a=this.klass._new(),b;for(b in this)/^@.+/.test(b)&&(a[b]=this[b]);return a},args:[],source:"shallowCopy\n\t<\n\t    var copy = self.klass._new();\n\t    for(var i in self) {\n\t\tif(/^@.+/.test(i)) {\n\t\t    copy[i] = self[i];\n\t\t}\n\t    }\n\t    return copy;\n\t>",messageSends:[],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_shouldNotImplement",smalltalk.method({selector:"shouldNotImplement",category:"error handling",fn:function(){smalltalk.send(this,"_error_",[smalltalk.send("This method should not be implemented in ","__comma",[smalltalk.send(smalltalk.send(this,"_class",[]),"_name",[])])]);return this},args:[],source:"shouldNotImplement\n\tself error: 'This method should not be implemented in ', self class name",messageSends:["error:",",","name","class"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_size",smalltalk.method({selector:"size",category:"accessing",fn:function(){smalltalk.send(this,"_error_",["Object not indexable"]);return this},args:[],source:"size\n\tself error: 'Object not indexable'",messageSends:["error:"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_storeOn_",smalltalk.method({selector:"storeOn:",category:"printing",fn:function(a){smalltalk.send(a,"_nextPutAll_",[smalltalk.send(this,"_printString",[])]);return this},args:["aStream"],source:"storeOn: aStream\n\taStream nextPutAll: self printString",messageSends:["nextPutAll:","printString"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_storeString",smalltalk.method({selector:"storeString",category:"printing",fn:function(){var a=this;return smalltalk.send(smalltalk.String||String,"_streamContents_",[function(b){return smalltalk.send(a,"_storeOn_",[b])}])},args:[],source:'storeString\n\t"Answer a String representation of the receiver from which the receiver \n\tcan be reconstructed."\n\n\t^ String streamContents: [:s | self storeOn: s]',messageSends:["streamContents:","storeOn:"],referencedClasses:["String"]}),
smalltalk.Object);smalltalk.addMethod("_subclassResponsibility",smalltalk.method({selector:"subclassResponsibility",category:"error handling",fn:function(){smalltalk.send(this,"_error_",["This method is a responsibility of a subclass"]);return this},args:[],source:"subclassResponsibility\n\tself error: 'This method is a responsibility of a subclass'",messageSends:["error:"],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_try_catch_",smalltalk.method({selector:"try:catch:",category:"error handling",fn:function(a,b){try{result=a()}catch(c){result=b(c)}return result},args:["aBlock","anotherBlock"],source:"try: aBlock catch: anotherBlock\n\t<try{result = aBlock()} catch(e) {result = anotherBlock(e)};\n\treturn result;>",messageSends:[],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_yourself",smalltalk.method({selector:"yourself",category:"accessing",fn:function(){return this},args:[],source:"yourself\n\t^self",messageSends:[],referencedClasses:[]}),smalltalk.Object);smalltalk.addMethod("_~_eq",smalltalk.method({selector:"~=",category:"comparing",fn:function(a){return smalltalk.send(smalltalk.send(this,"__eq",[a]),"__eq",[false])},args:["anObject"],source:"~= anObject\n\t^(self = anObject) = false",messageSends:["="],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_~~",smalltalk.method({selector:"~~",category:"comparing",fn:function(a){return smalltalk.send(smalltalk.send(this,"__eq_eq",[a]),"__eq",[false])},args:["anObject"],source:"~~ anObject\n\t^(self == anObject) = false",messageSends:["=","=="],referencedClasses:[]}),smalltalk.Object);
smalltalk.addMethod("_initialize",smalltalk.method({selector:"initialize",category:"initialization",fn:function(){return this},args:[],source:'initialize\n\t"no op"',messageSends:[],referencedClasses:[]}),smalltalk.Object.klass);smalltalk.addClass("Boolean",smalltalk.Object,[],"Kernel-Objects");smalltalk.Boolean.comment="Boolean wraps the JavaScript `Boolean()` constructor. The `true` and `false` objects are the JavaScript boolean objects.\n\nBoolean defines the protocol for logic testing operations and conditional control structures for the logical values.\nBoolean instances are weither `true` or `false`.";
smalltalk.addMethod("_&",smalltalk.method({selector:"&",category:"controlling",fn:function(a){return this==true?a:false},args:["aBoolean"],source:"& aBoolean\n\t<\n\t    if(self == true) {\n\t\treturn aBoolean;\n\t    } else {\n\t\treturn false;\n\t    }\n\t>",messageSends:[],referencedClasses:[]}),smalltalk.Boolean);
smalltalk.addMethod("__eq",smalltalk.method({selector:"=",category:"comparing",fn:function(a){var b={};try{if(($receiver=smalltalk.send(smalltalk.send(a,"_class",[]),"__eq",[smalltalk.send(this,"_class",[])])).klass===smalltalk.Boolean){if(!$receiver)throw b=[false];}else smalltalk.send($receiver,"_ifFalse_",[function(){throw b=[false];}]);return Boolean(this==true)==a}catch(c){if(c===b)return c[0];throw c;}},args:["aBoolean"],source:"= aBoolean\n\taBoolean class = self class ifFalse: [^false].\n\t<return Boolean(self == true) == aBoolean>",
messageSends:["ifFalse:","=","class"],referencedClasses:[]}),smalltalk.Boolean);smalltalk.addMethod("__eq_eq",smalltalk.method({selector:"==",category:"comparing",fn:function(a){return smalltalk.send(this,"__eq",[a])},args:["aBoolean"],source:"== aBoolean\n\t^self = aBoolean",messageSends:["="],referencedClasses:[]}),smalltalk.Boolean);
smalltalk.addMethod("_and_",smalltalk.method({selector:"and:",category:"controlling",fn:function(a){return smalltalk.send(smalltalk.send(this,"__eq",[true]),"_ifTrue_ifFalse_",[a,function(){return false}])},args:["aBlock"],source:"and: aBlock\n\t^self = true\n\t    ifTrue: aBlock\n\t    ifFalse: [false]",messageSends:["ifTrue:ifFalse:","="],referencedClasses:[]}),smalltalk.Boolean);
smalltalk.addMethod("_asJSON",smalltalk.method({selector:"asJSON",category:"converting",fn:function(){return this},args:[],source:"asJSON\n\t^self",messageSends:[],referencedClasses:[]}),smalltalk.Boolean);smalltalk.addMethod("_deepCopy",smalltalk.method({selector:"deepCopy",category:"copying",fn:function(){return this},args:[],source:"deepCopy\n\t^self",messageSends:[],referencedClasses:[]}),smalltalk.Boolean);
smalltalk.addMethod("_ifFalse_",smalltalk.method({selector:"ifFalse:",category:"controlling",fn:function(a){return smalltalk.send(this,"_ifTrue_ifFalse_",[function(){return nil},a])},args:["aBlock"],source:'ifFalse: aBlock\n\t"inlined in the Compiler"\n\t^self ifTrue: [] ifFalse: aBlock',messageSends:["ifTrue:ifFalse:"],referencedClasses:[]}),smalltalk.Boolean);
smalltalk.addMethod("_ifFalse_ifTrue_",smalltalk.method({selector:"ifFalse:ifTrue:",category:"controlling",fn:function(a,b){return smalltalk.send(this,"_ifTrue_ifFalse_",[b,a])},args:["aBlock","anotherBlock"],source:'ifFalse: aBlock ifTrue: anotherBlock\n\t"inlined in the Compiler"\n\t^self ifTrue: anotherBlock ifFalse: aBlock',messageSends:["ifTrue:ifFalse:"],referencedClasses:[]}),smalltalk.Boolean);
smalltalk.addMethod("_ifTrue_",smalltalk.method({selector:"ifTrue:",category:"controlling",fn:function(a){return smalltalk.send(this,"_ifTrue_ifFalse_",[a,function(){return nil}])},args:["aBlock"],source:'ifTrue: aBlock\n\t"inlined in the Compiler"\n\t^self ifTrue: aBlock ifFalse: []',messageSends:["ifTrue:ifFalse:"],referencedClasses:[]}),smalltalk.Boolean);
smalltalk.addMethod("_ifTrue_ifFalse_",smalltalk.method({selector:"ifTrue:ifFalse:",category:"controlling",fn:function(a,b){return this==true?a():b()},args:["aBlock","anotherBlock"],source:'ifTrue: aBlock ifFalse: anotherBlock\n\t"inlined in the Compiler"\n\t<\n\t    if(self == true) {\n\t\treturn aBlock();\n\t    } else {\n\t\treturn anotherBlock();\n\t    }\n\t>',messageSends:[],referencedClasses:[]}),smalltalk.Boolean);
smalltalk.addMethod("_not",smalltalk.method({selector:"not",category:"controlling",fn:function(){return smalltalk.send(this,"__eq",[false])},args:[],source:"not\n\t^self = false",messageSends:["="],referencedClasses:[]}),smalltalk.Boolean);
smalltalk.addMethod("_or_",smalltalk.method({selector:"or:",category:"controlling",fn:function(a){return smalltalk.send(smalltalk.send(this,"__eq",[true]),"_ifTrue_ifFalse_",[function(){return true},a])},args:["aBlock"],source:"or: aBlock\n\t^self = true\n\t    ifTrue: [true]\n\t    ifFalse: aBlock",messageSends:["ifTrue:ifFalse:","="],referencedClasses:[]}),smalltalk.Boolean);
smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"printing",fn:function(){return this.toString()},args:[],source:"printString\n\t<return self.toString()>",messageSends:[],referencedClasses:[]}),smalltalk.Boolean);smalltalk.addMethod("_shallowCopy",smalltalk.method({selector:"shallowCopy",category:"copying",fn:function(){return this},args:[],source:"shallowCopy\n\t^self",messageSends:[],referencedClasses:[]}),smalltalk.Boolean);
smalltalk.addMethod("_|",smalltalk.method({selector:"|",category:"controlling",fn:function(a){return this==true?true:a},args:["aBoolean"],source:"| aBoolean\n\t<\n\t    if(self == true) {\n\t\treturn true;\n\t    } else {\n\t\treturn aBoolean;\n\t    }\n\t>",messageSends:[],referencedClasses:[]}),smalltalk.Boolean);smalltalk.addClass("Date",smalltalk.Object,[],"Kernel-Objects");smalltalk.Date.comment="The Date class is used to work with dates and times. Therefore `Date today` and `Date now` are both valid in\nAmber and answer the same date object.\n\nDate wraps the `Date()` JavaScript constructor, and Smalltalk date objects are JavaScript date objects.";
smalltalk.addMethod("__plus",smalltalk.method({selector:"+",category:"arithmetic",fn:function(a){return this+a},args:["aDate"],source:"+ aDate\n\t<return self + aDate>",messageSends:[],referencedClasses:[]}),smalltalk.Date);smalltalk.addMethod("__minus",smalltalk.method({selector:"-",category:"arithmetic",fn:function(a){return this-a},args:["aDate"],source:"- aDate\n\t<return self - aDate>",messageSends:[],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("__lt",smalltalk.method({selector:"<",category:"comparing",fn:function(a){return this<a},args:["aDate"],source:"< aDate\n\t<return self < aDate>",messageSends:[],referencedClasses:[]}),smalltalk.Date);smalltalk.addMethod("__lt_eq",smalltalk.method({selector:"<=",category:"comparing",fn:function(a){return this<=a},args:["aDate"],source:"<= aDate\n\t<return self <= aDate>",messageSends:[],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("__gt",smalltalk.method({selector:">",category:"comparing",fn:function(a){return this>a},args:["aDate"],source:"> aDate\n\t<return self >> aDate>",messageSends:[],referencedClasses:[]}),smalltalk.Date);smalltalk.addMethod("__gt_eq",smalltalk.method({selector:">=",category:"comparing",fn:function(a){return this>=a},args:["aDate"],source:">= aDate\n\t<return self >>= aDate>",messageSends:[],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_asDateString",smalltalk.method({selector:"asDateString",category:"converting",fn:function(){return this.toDateString()},args:[],source:"asDateString\n\t<return self.toDateString()>",messageSends:[],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_asLocaleString",smalltalk.method({selector:"asLocaleString",category:"converting",fn:function(){return this.toLocaleString()},args:[],source:"asLocaleString\n\t<return self.toLocaleString()>",messageSends:[],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_asMilliseconds",smalltalk.method({selector:"asMilliseconds",category:"converting",fn:function(){return smalltalk.send(this,"_time",[])},args:[],source:"asMilliseconds\n\t^self time",messageSends:["time"],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_asNumber",smalltalk.method({selector:"asNumber",category:"converting",fn:function(){return smalltalk.send(this,"_asMilliseconds",[])},args:[],source:"asNumber\n\t^self asMilliseconds",messageSends:["asMilliseconds"],referencedClasses:[]}),smalltalk.Date);smalltalk.addMethod("_asString",smalltalk.method({selector:"asString",category:"converting",fn:function(){return this.toString()},args:[],source:"asString\n\t<return self.toString()>",messageSends:[],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_asTimeString",smalltalk.method({selector:"asTimeString",category:"converting",fn:function(){return this.toTimeString()},args:[],source:"asTimeString\n\t<return self.toTimeString()>",messageSends:[],referencedClasses:[]}),smalltalk.Date);smalltalk.addMethod("_day",smalltalk.method({selector:"day",category:"accessing",fn:function(){return smalltalk.send(this,"_dayOfWeek",[])},args:[],source:"day\n\t^self dayOfWeek",messageSends:["dayOfWeek"],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_day_",smalltalk.method({selector:"day:",category:"accessing",fn:function(a){smalltalk.send(this,"_dayOfWeek_",[a]);return this},args:["aNumber"],source:"day: aNumber\n\tself dayOfWeek: aNumber",messageSends:["dayOfWeek:"],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_dayOfMonth",smalltalk.method({selector:"dayOfMonth",category:"accessing",fn:function(){return this.getDate()},args:[],source:"dayOfMonth\n\t<return self.getDate()>",messageSends:[],referencedClasses:[]}),smalltalk.Date);smalltalk.addMethod("_dayOfMonth_",smalltalk.method({selector:"dayOfMonth:",category:"accessing",fn:function(a){this.setDate(a);return this},args:["aNumber"],source:"dayOfMonth: aNumber\n\t<self.setDate(aNumber)>",messageSends:[],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_dayOfWeek",smalltalk.method({selector:"dayOfWeek",category:"accessing",fn:function(){return this.getDay()+1},args:[],source:"dayOfWeek\n\t<return self.getDay() + 1>",messageSends:[],referencedClasses:[]}),smalltalk.Date);smalltalk.addMethod("_dayOfWeek_",smalltalk.method({selector:"dayOfWeek:",category:"accessing",fn:function(a){return this.setDay(a-1)},args:["aNumber"],source:"dayOfWeek: aNumber\n\t<return self.setDay(aNumber - 1)>",messageSends:[],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_hours",smalltalk.method({selector:"hours",category:"accessing",fn:function(){return this.getHours()},args:[],source:"hours\n\t<return self.getHours()>",messageSends:[],referencedClasses:[]}),smalltalk.Date);smalltalk.addMethod("_hours_",smalltalk.method({selector:"hours:",category:"accessing",fn:function(a){this.setHours(a);return this},args:["aNumber"],source:"hours: aNumber\n\t<self.setHours(aNumber)>",messageSends:[],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_milliseconds",smalltalk.method({selector:"milliseconds",category:"accessing",fn:function(){return this.getMilliseconds()},args:[],source:"milliseconds\n\t<return self.getMilliseconds()>",messageSends:[],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_milliseconds_",smalltalk.method({selector:"milliseconds:",category:"accessing",fn:function(a){this.setMilliseconds(a);return this},args:["aNumber"],source:"milliseconds: aNumber\n\t<self.setMilliseconds(aNumber)>",messageSends:[],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_minutes",smalltalk.method({selector:"minutes",category:"accessing",fn:function(){return this.getMinutes()},args:[],source:"minutes\n\t<return self.getMinutes()>",messageSends:[],referencedClasses:[]}),smalltalk.Date);smalltalk.addMethod("_minutes_",smalltalk.method({selector:"minutes:",category:"accessing",fn:function(a){this.setMinutes(a);return this},args:["aNumber"],source:"minutes: aNumber\n\t<self.setMinutes(aNumber)>",messageSends:[],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_month",smalltalk.method({selector:"month",category:"accessing",fn:function(){return this.getMonth()+1},args:[],source:"month\n\t<return self.getMonth() + 1>",messageSends:[],referencedClasses:[]}),smalltalk.Date);smalltalk.addMethod("_month_",smalltalk.method({selector:"month:",category:"accessing",fn:function(a){this.setMonth(a-1);return this},args:["aNumber"],source:"month: aNumber\n\t<self.setMonth(aNumber - 1)>",messageSends:[],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"printing",fn:function(){return smalltalk.send(this,"_asString",[])},args:[],source:"printString\n\t^self asString",messageSends:["asString"],referencedClasses:[]}),smalltalk.Date);smalltalk.addMethod("_seconds",smalltalk.method({selector:"seconds",category:"accessing",fn:function(){return this.getSeconds()},args:[],source:"seconds\n\t<return self.getSeconds()>",messageSends:[],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_seconds_",smalltalk.method({selector:"seconds:",category:"accessing",fn:function(a){this.setSeconds(a);return this},args:["aNumber"],source:"seconds: aNumber\n\t<self.setSeconds(aNumber)>",messageSends:[],referencedClasses:[]}),smalltalk.Date);smalltalk.addMethod("_time",smalltalk.method({selector:"time",category:"accessing",fn:function(){return this.getTime()},args:[],source:"time\n\t<return self.getTime()>",messageSends:[],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_time_",smalltalk.method({selector:"time:",category:"accessing",fn:function(a){this.setTime(a);return this},args:["aNumber"],source:"time: aNumber\n\t<self.setTime(aNumber)>",messageSends:[],referencedClasses:[]}),smalltalk.Date);smalltalk.addMethod("_year",smalltalk.method({selector:"year",category:"accessing",fn:function(){return this.getFullYear()},args:[],source:"year\n\t<return self.getFullYear()>",messageSends:[],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_year_",smalltalk.method({selector:"year:",category:"accessing",fn:function(a){this.setFullYear(a);return this},args:["aNumber"],source:"year: aNumber\n\t<self.setFullYear(aNumber)>",messageSends:[],referencedClasses:[]}),smalltalk.Date);
smalltalk.addMethod("_fromMilliseconds_",smalltalk.method({selector:"fromMilliseconds:",category:"instance creation",fn:function(a){return smalltalk.send(this,"_new_",[a])},args:["aNumber"],source:"fromMilliseconds: aNumber\n\t^self new: aNumber",messageSends:["new:"],referencedClasses:[]}),smalltalk.Date.klass);
smalltalk.addMethod("_fromSeconds_",smalltalk.method({selector:"fromSeconds:",category:"instance creation",fn:function(a){return smalltalk.send(this,"_fromMilliseconds_",[($receiver=a).klass===smalltalk.Number?$receiver*1E3:smalltalk.send($receiver,"__star",[1E3])])},args:["aNumber"],source:"fromSeconds: aNumber\n\t^self fromMilliseconds: aNumber * 1000",messageSends:["fromMilliseconds:","*"],referencedClasses:[]}),smalltalk.Date.klass);
smalltalk.addMethod("_fromString_",smalltalk.method({selector:"fromString:",category:"instance creation",fn:function(a){return smalltalk.send(this,"_new_",[a])},args:["aString"],source:"fromString: aString\n\t\"Example: Date fromString('2011/04/15 00:00:00')\"\n\t^self new: aString",messageSends:["new:"],referencedClasses:[]}),smalltalk.Date.klass);
smalltalk.addMethod("_millisecondsToRun_",smalltalk.method({selector:"millisecondsToRun:",category:"instance creation",fn:function(a){var b=nil,b=smalltalk.send(smalltalk.Date||Date,"_now",[]);smalltalk.send(a,"_value",[]);return($receiver=smalltalk.send(smalltalk.Date||Date,"_now",[])).klass===smalltalk.Number?$receiver-b:smalltalk.send($receiver,"__minus",[b])},args:["aBlock"],source:"millisecondsToRun: aBlock\n\t| t |\n\tt := Date now.\n\taBlock value.\n\t^Date now - t",messageSends:["now","value",
"-"],referencedClasses:["Date"]}),smalltalk.Date.klass);smalltalk.addMethod("_new_",smalltalk.method({selector:"new:",category:"instance creation",fn:function(a){return new Date(a)},args:["anObject"],source:"new: anObject\n\t<return new Date(anObject)>",messageSends:[],referencedClasses:[]}),smalltalk.Date.klass);
smalltalk.addMethod("_now",smalltalk.method({selector:"now",category:"instance creation",fn:function(){return smalltalk.send(this,"_today",[])},args:[],source:"now\n\t^self today",messageSends:["today"],referencedClasses:[]}),smalltalk.Date.klass);smalltalk.addMethod("_today",smalltalk.method({selector:"today",category:"instance creation",fn:function(){return smalltalk.send(this,"_new",[])},args:[],source:"today\n\t^self new",messageSends:["new"],referencedClasses:[]}),smalltalk.Date.klass);
smalltalk.addClass("JSObjectProxy",smalltalk.Object,["jsObject"],"Kernel-Objects");smalltalk.JSObjectProxy.comment="JSObjectProxy handles sending messages to JavaScript object, therefore accessing JavaScript objects from Amber is transparent.\nJSOjbectProxy makes intensive use of `#doesNotUnderstand:`.\n\n## Examples\n\nJSObjectProxy objects are instanciated by Amber when a Smalltalk message is sent to a JavaScript object.\n\n    window alert: 'hello world'.\n    window inspect.\n    (window jQuery: 'body') append: 'hello world'\n\nSmalltalk messages sends are converted to JavaScript function calls or object property access _(in this order)_. If n one of them match, a `MessageNotUnderstood` error will be thrown. \n\n## Message conversion rules\n\n- `someUser name` becomes  `someUser.name`\n- `someUser name: 'John'` becomes `someUser name = \"John\"`\n- `console log: 'hello world'` becomes `console.log('hello world')`\n- `(window jQuery: 'foo') css: 'background' color: 'red'` becomes `window.jQuery('foo').css('background', 'red')`\n\n__Note:__ For keyword-based messages, only the first keyword is kept: `window foo: 1 bar: 2` is equivalent to `window foo: 1 baz: 2`.";
smalltalk.addMethod("_at_",smalltalk.method({selector:"at:",category:"accessing",fn:function(a){var b=nil,b=smalltalk.send(a,"_asString",[]);return this["@jsObject"][b]},args:["aSymbol"],source:"at: aSymbol\n\t| attr |\n\tattr := aSymbol asString.\n\t<return self['@jsObject'][attr]>",messageSends:["asString"],referencedClasses:[]}),smalltalk.JSObjectProxy);
smalltalk.addMethod("_at_put_",smalltalk.method({selector:"at:put:",category:"accessing",fn:function(a,b){var c=nil,c=smalltalk.send(a,"_asString",[]);this["@jsObject"][c]=b;return this},args:["aSymbol","anObject"],source:"at: aSymbol put: anObject\n\t| attr |\n\tattr := aSymbol asString.\n\t<self['@jsObject'][attr] = anObject>",messageSends:["asString"],referencedClasses:[]}),smalltalk.JSObjectProxy);
smalltalk.addMethod("_doesNotUnderstand_",smalltalk.method({selector:"doesNotUnderstand:",category:"proxy",fn:function(a){var b=nil,c=nil;arguments=c=nil;b=smalltalk.send(this,"_jsObject",[]);c=smalltalk.send(a,"_selector",[]);c=smalltalk.send(c,"_asJavaScriptSelector",[]);arguments=smalltalk.send(a,"_arguments",[]);if(b[c]!=void 0)return smalltalk.send(b,c,arguments);smalltalk.send(this,"_doesNotUnderstand_",[a],smalltalk.JSObjectProxy.superclass||nil);return this},args:["aMessage"],source:"doesNotUnderstand: aMessage\n\t| obj selector jsSelector arguments |\n\tobj := self jsObject.\n\tselector := aMessage selector.\n\tjsSelector := selector asJavaScriptSelector.\n\targuments := aMessage arguments.\n\t<if(obj[jsSelector] != undefined) {return smalltalk.send(obj, jsSelector, arguments)}>.\n\tsuper doesNotUnderstand: aMessage",
messageSends:["jsObject","selector","asJavaScriptSelector","arguments","doesNotUnderstand:"],referencedClasses:[]}),smalltalk.JSObjectProxy);
smalltalk.addMethod("_inspectOn_",smalltalk.method({selector:"inspectOn:",category:"proxy",fn:function(a){var b=nil,b=smalltalk.send(smalltalk.Dictionary||Dictionary,"_new",[]);smalltalk.send(b,"_at_put_",["#self",smalltalk.send(this,"_jsObject",[])]);smalltalk.send(a,"_setLabel_",[smalltalk.send(this,"_printString",[])]);for(var c in this["@jsObject"])b._at_put_(c,this["@jsObject"][c]);smalltalk.send(a,"_setVariables_",[b]);return this},args:["anInspector"],source:"inspectOn: anInspector\n\t| variables |\n\tvariables := Dictionary new.\n\tvariables at: '#self' put: self jsObject.\n\tanInspector setLabel: self printString.\n\t<for(var i in self['@jsObject']) {\n\t\tvariables._at_put_(i, self['@jsObject'][i]);\n\t}>.\n\tanInspector setVariables: variables",
messageSends:"new,at:put:,jsObject,setLabel:,printString,setVariables:".split(","),referencedClasses:["Dictionary"]}),smalltalk.JSObjectProxy);smalltalk.addMethod("_jsObject",smalltalk.method({selector:"jsObject",category:"accessing",fn:function(){return this["@jsObject"]},args:[],source:"jsObject\n\t^jsObject",messageSends:[],referencedClasses:[]}),smalltalk.JSObjectProxy);
smalltalk.addMethod("_jsObject_",smalltalk.method({selector:"jsObject:",category:"accessing",fn:function(a){this["@jsObject"]=a;return this},args:["aJSObject"],source:"jsObject: aJSObject\n\tjsObject := aJSObject",messageSends:[],referencedClasses:[]}),smalltalk.JSObjectProxy);
smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"proxy",fn:function(){return smalltalk.send(smalltalk.send(this,"_jsObject",[]),"_toString",[])},args:[],source:"printString\n\t^self jsObject toString",messageSends:["toString","jsObject"],referencedClasses:[]}),smalltalk.JSObjectProxy);
smalltalk.addMethod("_on_",smalltalk.method({selector:"on:",category:"instance creation",fn:function(a){var b=smalltalk.send(this,"_new",[]);smalltalk.send(b,"_jsObject_",[a]);return smalltalk.send(b,"_yourself",[])},args:["aJSObject"],source:"on: aJSObject\n\t^self new\n\t\tjsObject: aJSObject;\n\t\tyourself",messageSends:["jsObject:","yourself","new"],referencedClasses:[]}),smalltalk.JSObjectProxy.klass);smalltalk.addClass("Number",smalltalk.Object,[],"Kernel-Objects");
smalltalk.Number.comment="Number holds the most general methods for dealing with numbers.  \nNumber is directly mapped to JavaScript Number.\n\nMost arithmetic methods like `#+` `#/` `#-` `#max:` are directly inlined into javascript. \n\n##Enumerating\nA Number can be used to evaluate a Block a fixed number of times:\n\n\t5 timesRepeat: [Transcript show: 'This will be printed 5 times'; cr].\n\t\n\t1 to: 5 do: [:aNumber| Transcript show: aNumber asString; cr].\n\t\n\t1 to: 10 by: 2 do: [:aNumber| Transcript show: aNumber asString; cr].";
smalltalk.addMethod("_&",smalltalk.method({selector:"&",category:"converting",fn:function(a){return this&a},args:["aNumber"],source:"& aNumber\n\t<return self & aNumber>",messageSends:[],referencedClasses:[]}),smalltalk.Number);smalltalk.addMethod("__star",smalltalk.method({selector:"*",category:"arithmetic",fn:function(a){return this*a},args:["aNumber"],source:'* aNumber\n\t"Inlined in the Compiler"\n\t<return self * aNumber>',messageSends:[],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("__plus",smalltalk.method({selector:"+",category:"arithmetic",fn:function(a){return this+a},args:["aNumber"],source:'+ aNumber\n\t"Inlined in the Compiler"\n\t<return self + aNumber>',messageSends:[],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("__minus",smalltalk.method({selector:"-",category:"arithmetic",fn:function(a){return this-a},args:["aNumber"],source:'- aNumber\n\t"Inlined in the Compiler"\n\t<return self - aNumber>',messageSends:[],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("__slash",smalltalk.method({selector:"/",category:"arithmetic",fn:function(a){return this/a},args:["aNumber"],source:'/ aNumber\n\t"Inlined in the Compiler"\n\t<return self / aNumber>',messageSends:[],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("__lt",smalltalk.method({selector:"<",category:"comparing",fn:function(a){return this<a},args:["aNumber"],source:'< aNumber\n\t"Inlined in the Compiler"\n\t<return self < aNumber>',messageSends:[],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("__lt_eq",smalltalk.method({selector:"<=",category:"comparing",fn:function(a){return this<=a},args:["aNumber"],source:'<= aNumber\n\t"Inlined in the Compiler"\n\t<return self <= aNumber>',messageSends:[],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("__eq",smalltalk.method({selector:"=",category:"comparing",fn:function(a){var b={};try{if(($receiver=smalltalk.send(a,"_isNumber",[])).klass===smalltalk.Boolean){if(!$receiver)throw b=[false];}else smalltalk.send($receiver,"_ifFalse_",[function(){throw b=[false];}]);return Number(this)==a}catch(c){if(c===b)return c[0];throw c;}},args:["aNumber"],source:"= aNumber\n\taNumber isNumber ifFalse: [^false]. \n\t<return Number(self) == aNumber>",messageSends:["ifFalse:","isNumber"],referencedClasses:[]}),
smalltalk.Number);smalltalk.addMethod("__gt",smalltalk.method({selector:">",category:"comparing",fn:function(a){return this>a},args:["aNumber"],source:'> aNumber\n\t"Inlined in the Compiler"\n\t<return self >> aNumber>',messageSends:[],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("__gt_eq",smalltalk.method({selector:">=",category:"comparing",fn:function(a){return this>=a},args:["aNumber"],source:'>= aNumber\n\t"Inlined in the Compiler"\n\t<return self >>= aNumber>',messageSends:[],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("__at",smalltalk.method({selector:"@",category:"converting",fn:function(a){return smalltalk.send(smalltalk.Point||Point,"_x_y_",[this,a])},args:["aNumber"],source:"@ aNumber\n\t^Point x: self y: aNumber",messageSends:["x:y:"],referencedClasses:["Point"]}),smalltalk.Number);
smalltalk.addMethod("_\\\\",smalltalk.method({selector:"\\\\",category:"arithmetic",fn:function(a){return this%a},args:["aNumber"],source:"\\\\ aNumber\n\t<return self % aNumber>",messageSends:[],referencedClasses:[]}),smalltalk.Number);smalltalk.addMethod("_asJSON",smalltalk.method({selector:"asJSON",category:"converting",fn:function(){return this},args:[],source:"asJSON\n\t^self",messageSends:[],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_asJavascript",smalltalk.method({selector:"asJavascript",category:"converting",fn:function(){return smalltalk.send(smalltalk.send("(","__comma",[smalltalk.send(this,"_printString",[])]),"__comma",[")"])},args:[],source:"asJavascript\n\t^'(', self printString, ')'",messageSends:[",","printString"],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_asPoint",smalltalk.method({selector:"asPoint",category:"converting",fn:function(){return smalltalk.send(smalltalk.Point||Point,"_x_y_",[this,this])},args:[],source:"asPoint\n\t^Point x: self y: self",messageSends:["x:y:"],referencedClasses:["Point"]}),smalltalk.Number);
smalltalk.addMethod("_asString",smalltalk.method({selector:"asString",category:"converting",fn:function(){return smalltalk.send(this,"_printString",[])},args:[],source:"asString\n\t^self printString",messageSends:["printString"],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_atRandom",smalltalk.method({selector:"atRandom",category:"converting",fn:function(){return($receiver=smalltalk.send(($receiver=smalltalk.send(smalltalk.send(smalltalk.Random||Random,"_new",[]),"_next",[])).klass===smalltalk.Number?$receiver*this:smalltalk.send($receiver,"__star",[this]),"_truncated",[])).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,"__plus",[1])},args:[],source:"atRandom\n    ^(Random new next * self) truncated + 1",messageSends:["+","truncated",
"*","next","new"],referencedClasses:["Random"]}),smalltalk.Number);smalltalk.addMethod("_clearInterval",smalltalk.method({selector:"clearInterval",category:"timeouts/intervals",fn:function(){clearInterval(Number(this));return this},args:[],source:"clearInterval\n\t<clearInterval(Number(self))>",messageSends:[],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_clearTimeout",smalltalk.method({selector:"clearTimeout",category:"timeouts/intervals",fn:function(){clearTimeout(Number(this));return this},args:[],source:"clearTimeout\n\t<clearTimeout(Number(self))>",messageSends:[],referencedClasses:[]}),smalltalk.Number);smalltalk.addMethod("_copy",smalltalk.method({selector:"copy",category:"copying",fn:function(){return this},args:[],source:"copy\n\t^self",messageSends:[],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_deepCopy",smalltalk.method({selector:"deepCopy",category:"copying",fn:function(){return smalltalk.send(this,"_copy",[])},args:[],source:"deepCopy\n\t^self copy",messageSends:["copy"],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_even",smalltalk.method({selector:"even",category:"testing",fn:function(){return smalltalk.send(0,"__eq",[smalltalk.send(this,"_\\\\",[2])])},args:[],source:"even\n\t^ 0 = (self \\\\ 2)",messageSends:["=","\\\\\\\\"],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_identityHash",smalltalk.method({selector:"identityHash",category:"accessing",fn:function(){return smalltalk.send(smalltalk.send(this,"_asString",[]),"__comma",["n"])},args:[],source:"identityHash\n\t^self asString, 'n'",messageSends:[",","asString"],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_isNumber",smalltalk.method({selector:"isNumber",category:"testing",fn:function(){return true},args:[],source:"isNumber\n\t^true",messageSends:[],referencedClasses:[]}),smalltalk.Number);smalltalk.addMethod("_isZero",smalltalk.method({selector:"isZero",category:"testing",fn:function(){return smalltalk.send(this,"__eq",[0])},args:[],source:"isZero\n\t^self = 0",messageSends:["="],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_max_",smalltalk.method({selector:"max:",category:"arithmetic",fn:function(a){return Math.max(this,a)},args:["aNumber"],source:"max: aNumber\n\t<return Math.max(self, aNumber);>",messageSends:[],referencedClasses:[]}),smalltalk.Number);smalltalk.addMethod("_min_",smalltalk.method({selector:"min:",category:"arithmetic",fn:function(a){return Math.min(this,a)},args:["aNumber"],source:"min: aNumber\n\t<return Math.min(self, aNumber);>",messageSends:[],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_negated",smalltalk.method({selector:"negated",category:"arithmetic",fn:function(){return 0-this},args:[],source:"negated\n\t^0 - self",messageSends:["-"],referencedClasses:[]}),smalltalk.Number);smalltalk.addMethod("_negative",smalltalk.method({selector:"negative",category:"testing",fn:function(){return this<0},args:[],source:'negative\n\t"Answer whether the receiver is mathematically negative."\n\n\t^ self < 0',messageSends:["<"],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_odd",smalltalk.method({selector:"odd",category:"testing",fn:function(){return smalltalk.send(smalltalk.send(this,"_even",[]),"_not",[])},args:[],source:"odd\n\t^ self even not",messageSends:["not","even"],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_positive",smalltalk.method({selector:"positive",category:"testing",fn:function(){return this>=0},args:[],source:'positive\n\t"Answer whether the receiver is positive or equal to 0. (ST-80 protocol)."\n\n\t^ self >= 0',messageSends:[">="],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_printShowingDecimalPlaces_",smalltalk.method({selector:"printShowingDecimalPlaces:",category:"printing",fn:function(a){return this.toFixed(a)},args:["placesDesired"],source:"printShowingDecimalPlaces: placesDesired\n\t<return self.toFixed(placesDesired)>",messageSends:[],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"printing",fn:function(){return""+this},args:[],source:"printString\n\t<return String(self)>",messageSends:[],referencedClasses:[]}),smalltalk.Number);smalltalk.addMethod("_rounded",smalltalk.method({selector:"rounded",category:"converting",fn:function(){return Math.round(this)},args:[],source:"rounded\n\t<return Math.round(self);>",messageSends:[],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_sqrt",smalltalk.method({selector:"sqrt",category:"arithmetic",fn:function(){return Math.sqrt(this)},args:[],source:"sqrt\n\t<return Math.sqrt(self)>",messageSends:[],referencedClasses:[]}),smalltalk.Number);smalltalk.addMethod("_squared",smalltalk.method({selector:"squared",category:"arithmetic",fn:function(){return this*this},args:[],source:"squared\n\t^self * self",messageSends:["*"],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_timesRepeat_",smalltalk.method({selector:"timesRepeat:",category:"enumerating",fn:function(a){var b=nil;smalltalk.send(this,"_truncated",[]);for(b=1;!(($receiver=b).klass===smalltalk.Number?$receiver>this:smalltalk.send($receiver,"__gt",[this]));){smalltalk.send(a,"_value",[]);b=($receiver=b).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,"__plus",[1])}return this},args:["aBlock"],source:"timesRepeat: aBlock\n\t| integer count |\n\tinteger := self truncated.\n\tcount := 1.\n\t[count > self] whileFalse: [\n\t    aBlock value.\n\t    count := count + 1]",
messageSends:["truncated","whileFalse:",">","value","+"],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_to_",smalltalk.method({selector:"to:",category:"converting",fn:function(a){var b=nil,c=nil,d=nil,e=nil,c=smalltalk.send(this,"_truncated",[]),d=($receiver=smalltalk.send(a,"_truncated",[])).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,"__plus",[1]),e=1,b=smalltalk.send(smalltalk.Array||Array,"_new",[]);smalltalk.send(($receiver=d).klass===smalltalk.Number?$receiver-c:smalltalk.send($receiver,"__minus",[c]),"_timesRepeat_",[function(){smalltalk.send(b,"_at_put_",
[e,c]);e=($receiver=e).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,"__plus",[1]);return c=($receiver=c).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,"__plus",[1])}]);return b},args:["aNumber"],source:"to: aNumber\n\t| array first last count |\n\tfirst := self truncated.\n\tlast := aNumber truncated + 1.\n\tcount := 1.\n\tarray := Array new.\n\t(last - first) timesRepeat: [\n\t    array at: count put: first.\n\t    count := count + 1.\n\t    first := first + 1].\n\t^array",
messageSends:"truncated,+,new,timesRepeat:,-,at:put:".split(","),referencedClasses:["Array"]}),smalltalk.Number);
smalltalk.addMethod("_to_by_",smalltalk.method({selector:"to:by:",category:"converting",fn:function(a,b){var c=this,d=nil,e=nil,h=nil,e=c,d=smalltalk.send(smalltalk.Array||Array,"_new",[]),h=1;($receiver=smalltalk.send(b,"__eq",[0])).klass===smalltalk.Boolean?$receiver&&smalltalk.send(c,"_error_",["step must be non-zero"]):smalltalk.send($receiver,"_ifTrue_",[function(){return smalltalk.send(c,"_error_",["step must be non-zero"])}]);if(($receiver=($receiver=b).klass===smalltalk.Number?$receiver<0:
smalltalk.send($receiver,"__lt",[0])).klass===smalltalk.Boolean)if($receiver)for(;($receiver=e).klass===smalltalk.Number?$receiver>=a:smalltalk.send($receiver,"__gt_eq",[a]);){smalltalk.send(d,"_at_put_",[h,e]);h=($receiver=h).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,"__plus",[1]);e=($receiver=e).klass===smalltalk.Number?$receiver+b:smalltalk.send($receiver,"__plus",[b])}else for(;($receiver=e).klass===smalltalk.Number?$receiver<=a:smalltalk.send($receiver,"__lt_eq",[a]);){smalltalk.send(d,
"_at_put_",[h,e]);h=($receiver=h).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,"__plus",[1]);e=($receiver=e).klass===smalltalk.Number?$receiver+b:smalltalk.send($receiver,"__plus",[b])}else smalltalk.send($receiver,"_ifTrue_ifFalse_",[function(){for(;($receiver=e).klass===smalltalk.Number?$receiver>=a:smalltalk.send($receiver,"__gt_eq",[a]);){smalltalk.send(d,"_at_put_",[h,e]);h=($receiver=h).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,"__plus",[1]);e=($receiver=
e).klass===smalltalk.Number?$receiver+b:smalltalk.send($receiver,"__plus",[b])}},function(){for(;($receiver=e).klass===smalltalk.Number?$receiver<=a:smalltalk.send($receiver,"__lt_eq",[a]);){smalltalk.send(d,"_at_put_",[h,e]);h=($receiver=h).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,"__plus",[1]);e=($receiver=e).klass===smalltalk.Number?$receiver+b:smalltalk.send($receiver,"__plus",[b])}}]);return d},args:["stop","step"],source:"to: stop by: step\n\t| array value pos |\n\tvalue := self.\n\tarray := Array new.\n\tpos := 1.\n\tstep = 0 ifTrue: [self error: 'step must be non-zero'].\n\tstep < 0\n\t\tifTrue: [[ value >= stop ] whileTrue: [\n\t    \t\t\tarray at: pos put: value.\n\t    \t\t\tpos := pos + 1.\n\t    \t\t\tvalue := value + step]]\n\t\tifFalse: [[ value <= stop ] whileTrue: [\n\t    \t\t\tarray at: pos put: value.\n\t  \t\t\tpos := pos + 1.\n\t    \t\t\tvalue := value + step]].\n\t^array",
messageSends:"new,ifTrue:,=,error:,ifTrue:ifFalse:,<,whileTrue:,>=,at:put:,+,<=".split(","),referencedClasses:["Array"]}),smalltalk.Number);
smalltalk.addMethod("_to_by_do_",smalltalk.method({selector:"to:by:do:",category:"enumerating",fn:function(a,b,c){var d=this,e=nil,e=d;($receiver=smalltalk.send(b,"__eq",[0])).klass===smalltalk.Boolean?$receiver&&smalltalk.send(d,"_error_",["step must be non-zero"]):smalltalk.send($receiver,"_ifTrue_",[function(){return smalltalk.send(d,"_error_",["step must be non-zero"])}]);if(($receiver=($receiver=b).klass===smalltalk.Number?$receiver<0:smalltalk.send($receiver,"__lt",[0])).klass===smalltalk.Boolean)if($receiver)for(;($receiver=
e).klass===smalltalk.Number?$receiver>=a:smalltalk.send($receiver,"__gt_eq",[a]);){smalltalk.send(c,"_value_",[e]);e=($receiver=e).klass===smalltalk.Number?$receiver+b:smalltalk.send($receiver,"__plus",[b])}else for(;($receiver=e).klass===smalltalk.Number?$receiver<=a:smalltalk.send($receiver,"__lt_eq",[a]);){smalltalk.send(c,"_value_",[e]);e=($receiver=e).klass===smalltalk.Number?$receiver+b:smalltalk.send($receiver,"__plus",[b])}else smalltalk.send($receiver,"_ifTrue_ifFalse_",[function(){for(;($receiver=
e).klass===smalltalk.Number?$receiver>=a:smalltalk.send($receiver,"__gt_eq",[a]);){smalltalk.send(c,"_value_",[e]);e=($receiver=e).klass===smalltalk.Number?$receiver+b:smalltalk.send($receiver,"__plus",[b])}},function(){for(;($receiver=e).klass===smalltalk.Number?$receiver<=a:smalltalk.send($receiver,"__lt_eq",[a]);){smalltalk.send(c,"_value_",[e]);e=($receiver=e).klass===smalltalk.Number?$receiver+b:smalltalk.send($receiver,"__plus",[b])}}]);return d},args:["stop","step","aBlock"],source:"to: stop by: step do: aBlock\n\t| value |\n\tvalue := self.\n\tstep = 0 ifTrue: [self error: 'step must be non-zero'].\n\tstep < 0\n\t\tifTrue: [[ value >= stop ] whileTrue: [\n\t    \t\t\taBlock value: value.\n\t    \t\t\tvalue := value + step]]\n\t\tifFalse: [[ value <= stop ] whileTrue: [\n\t    \t\t\taBlock value: value.\n\t    \t\t\tvalue := value + step]]",
messageSends:"ifTrue:,=,error:,ifTrue:ifFalse:,<,whileTrue:,>=,value:,+,<=".split(","),referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_to_do_",smalltalk.method({selector:"to:do:",category:"enumerating",fn:function(a,b){for(var c=nil,c=this;($receiver=c).klass===smalltalk.Number?$receiver<=a:smalltalk.send($receiver,"__lt_eq",[a]);){smalltalk.send(b,"_value_",[c]);c=($receiver=c).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,"__plus",[1])}return this},args:["stop","aBlock"],source:'to: stop do: aBlock\n\t"Evaluate aBlock for each number from self to aNumber."\n\t| nextValue |\n\tnextValue := self.\n\t[nextValue <= stop]\n\t\twhileTrue: \n\t\t\t[aBlock value: nextValue.\n\t\t\tnextValue := nextValue + 1]',
messageSends:["whileTrue:","<=","value:","+"],referencedClasses:[]}),smalltalk.Number);
smalltalk.addMethod("_truncated",smalltalk.method({selector:"truncated",category:"converting",fn:function(){var a=this,b=nil;($receiver=a>=0).klass===smalltalk.Boolean?$receiver?b=Math.floor(a):b=Math.floor(a*-1)*-1:smalltalk.send($receiver,"_ifTrue_ifFalse_",[function(){return b=Math.floor(a)},function(){return b=Math.floor(a*-1)*-1}]);return b},args:[],source:"truncated\n|result|\n\n    self >= 0 \n        ifTrue: [<result = Math.floor(self);>]\n        ifFalse: [<result = (Math.floor(self * (-1)) * (-1));>].\n\n    ^ result",messageSends:["ifTrue:ifFalse:",
">="],referencedClasses:[]}),smalltalk.Number);smalltalk.addMethod("_|",smalltalk.method({selector:"|",category:"converting",fn:function(a){return this|a},args:["aNumber"],source:"| aNumber\n\t<return self | aNumber>",messageSends:[],referencedClasses:[]}),smalltalk.Number);smalltalk.addMethod("_pi",smalltalk.method({selector:"pi",category:"instance creation",fn:function(){return Math.PI},args:[],source:"pi\n\t<return Math.PI>",messageSends:[],referencedClasses:[]}),smalltalk.Number.klass);
smalltalk.addClass("Package",smalltalk.Object,["commitPathJs","commitPathSt"],"Kernel-Objects");smalltalk.Package.comment='A Package is similar to a "class category" typically found in other Smalltalks like Pharo or Squeak. Amber does not have class categories anymore, it had in the beginning but now each class in the system knows which package it belongs to.\n\nA Package has a name, an Array of "requires", a comment and a Dictionary with other optional key value attributes. A Package can also be queried for its classes, but it will then resort to a reverse scan of all classes to find them.\nPackages are manipulated through "Smalltalk current", like for example finding one based on a name:\n\n\tSmalltalk current packageAt: \'Kernel\'\n\n...but you can also use:\n\n\tPackage named: \'Kernel\'\n\nA Package differs slightly from a Monticello package which can span multiple class categories using a naming convention based on hyphenation. But just as in Monticello a Package supports "class extensions" so a Package\ncan define behaviors in foreign classes using a naming convention for method categories where the category starts with an asterisk and then the name of the owning package follows. This can easily be seen in for example class\nString where the method category "*IDE" defines #inspectOn: which thus is a method belonging to the IDE package.\n\nYou can fetch a package from the server:\n\n\tPackage fetch: \'Additional-Examples\'';
smalltalk.addMethod("_classes",smalltalk.method({selector:"classes",category:"classes",fn:function(){var a=this;return smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.Smalltalk||Smalltalk,"_current",[]),"_classes",[]),"_select_",[function(b){return smalltalk.send(smalltalk.send(b,"_package",[]),"__eq_eq",[a])}])},args:[],source:'classes\n\t"We need to do a reverse scan."\n\t^Smalltalk current classes select: [:c | c package == self]',messageSends:["select:","classes","current","==","package"],
referencedClasses:["Smalltalk"]}),smalltalk.Package);smalltalk.addMethod("_commitPathJs",smalltalk.method({selector:"commitPathJs",category:"accessing",fn:function(){return($receiver=this["@commitPathJs"])==nil||$receiver==void 0?smalltalk.send(smalltalk.send(this,"_class",[]),"_defaultCommitPathJs",[]):$receiver},args:[],source:"commitPathJs\n\t^ commitPathJs ifNil: [self class defaultCommitPathJs]",messageSends:["ifNil:","defaultCommitPathJs","class"],referencedClasses:[]}),smalltalk.Package);
smalltalk.addMethod("_commitPathJs_",smalltalk.method({selector:"commitPathJs:",category:"accessing",fn:function(a){this["@commitPathJs"]=a;return this},args:["aString"],source:"commitPathJs: aString\n\tcommitPathJs\u00a0:= aString",messageSends:[],referencedClasses:[]}),smalltalk.Package);
smalltalk.addMethod("_commitPathSt",smalltalk.method({selector:"commitPathSt",category:"accessing",fn:function(){return($receiver=this["@commitPathSt"])==nil||$receiver==void 0?smalltalk.send(smalltalk.send(this,"_class",[]),"_defaultCommitPathSt",[]):$receiver},args:[],source:"commitPathSt\n\t^ commitPathSt ifNil: [self class defaultCommitPathSt]",messageSends:["ifNil:","defaultCommitPathSt","class"],referencedClasses:[]}),smalltalk.Package);
smalltalk.addMethod("_commitPathSt_",smalltalk.method({selector:"commitPathSt:",category:"accessing",fn:function(a){this["@commitPathSt"]=a;return this},args:["aString"],source:"commitPathSt: aString\n\tcommitPathSt\u00a0:= aString",messageSends:[],referencedClasses:[]}),smalltalk.Package);
smalltalk.addMethod("_dependencies",smalltalk.method({selector:"dependencies",category:"accessing",fn:function(){return smalltalk.send(this,"_propertyAt_ifAbsent_",["dependencies",function(){return[]}])},args:[],source:"dependencies\n\t^self propertyAt: 'dependencies' ifAbsent: [#()]",messageSends:["propertyAt:ifAbsent:"],referencedClasses:[]}),smalltalk.Package);
smalltalk.addMethod("_dependencies_",smalltalk.method({selector:"dependencies:",category:"accessing",fn:function(a){return smalltalk.send(this,"_propertyAt_put_",["dependencies",a])},args:["anArray"],source:"dependencies: anArray\n\t^self propertyAt: 'dependencies' put: anArray",messageSends:["propertyAt:put:"],referencedClasses:[]}),smalltalk.Package);
smalltalk.addMethod("_jsProperties",smalltalk.method({selector:"jsProperties",category:"private",fn:function(){return this.properties},args:[],source:"jsProperties\n\t<return self.properties>",messageSends:[],referencedClasses:[]}),smalltalk.Package);
smalltalk.addMethod("_jsProperties_",smalltalk.method({selector:"jsProperties:",category:"private",fn:function(a){return this.properties=a},args:["aJSObject"],source:"jsProperties: aJSObject\n\t<return self.properties = aJSObject>",messageSends:[],referencedClasses:[]}),smalltalk.Package);smalltalk.addMethod("_name",smalltalk.method({selector:"name",category:"accessing",fn:function(){return this.pkgName},args:[],source:"name\n\t<return self.pkgName>",messageSends:[],referencedClasses:[]}),smalltalk.Package);
smalltalk.addMethod("_name_",smalltalk.method({selector:"name:",category:"accessing",fn:function(a){this.pkgName=a;return this},args:["aString"],source:"name: aString\n\t<self.pkgName = aString>",messageSends:[],referencedClasses:[]}),smalltalk.Package);smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"printing",fn:function(){return smalltalk.send(this,"_name",[])},args:[],source:"printString\n\t^self name",messageSends:["name"],referencedClasses:[]}),smalltalk.Package);
smalltalk.addMethod("_properties",smalltalk.method({selector:"properties",category:"accessing",fn:function(){return smalltalk.send(smalltalk.send(smalltalk.Smalltalk||Smalltalk,"_current",[]),"_readJSObject_",[smalltalk.send(this,"_basicAt_",["properties"])])},args:[],source:"properties\n\t^Smalltalk current readJSObject: (self basicAt: 'properties')",messageSends:["readJSObject:","current","basicAt:"],referencedClasses:["Smalltalk"]}),smalltalk.Package);
smalltalk.addMethod("_properties_",smalltalk.method({selector:"properties:",category:"accessing",fn:function(a){var b=nil,b={};smalltalk.send(a,"_keysAndValuesDo_",[function(a,d){return b[a]=d}]);return this.properties=b},args:["aDict"],source:'properties: aDict\n\t"We store it as a javascript object."\n\t\n\t| object |\n\t<object = {};>.\n\taDict keysAndValuesDo: [:key :value |\n\t\t<object[key] = value>.\n\t].\n\t<return self.properties = object>',messageSends:["keysAndValuesDo:"],referencedClasses:[]}),
smalltalk.Package);smalltalk.addMethod("_propertiesAsJSON",smalltalk.method({selector:"propertiesAsJSON",category:"private",fn:function(){return JSON.stringify(this.properties)},args:[],source:"propertiesAsJSON\n\t<return JSON.stringify(self.properties)>",messageSends:[],referencedClasses:[]}),smalltalk.Package);
smalltalk.addMethod("_propertyAt_",smalltalk.method({selector:"propertyAt:",category:"properties",fn:function(a){return this.properties[a]},args:["key"],source:"propertyAt: key\n\n\t<return self.properties[key]>",messageSends:[],referencedClasses:[]}),smalltalk.Package);
smalltalk.addMethod("_propertyAt_ifAbsent_",smalltalk.method({selector:"propertyAt:ifAbsent:",category:"properties",fn:function(a,b){return($receiver=smalltalk.send(this,"_propertyAt_",[a]))==nil||$receiver==void 0?smalltalk.send(b,"_value",[]):$receiver},args:["key","block"],source:"propertyAt: key ifAbsent: block\n\n\t^(self propertyAt: key) ifNil: [block value]",messageSends:["ifNil:","propertyAt:","value"],referencedClasses:[]}),smalltalk.Package);
smalltalk.addMethod("_propertyAt_put_",smalltalk.method({selector:"propertyAt:put:",category:"properties",fn:function(a,b){return this.properties[a]=b},args:["key","value"],source:"propertyAt: key put: value\n\n\t<return self.properties[key] = value>",messageSends:[],referencedClasses:[]}),smalltalk.Package);
smalltalk.addMethod("_sortedClasses",smalltalk.method({selector:"sortedClasses",category:"classes",fn:function(){return smalltalk.send(smalltalk.send(this,"_class",[]),"_sortedClasses_",[smalltalk.send(this,"_classes",[])])},args:[],source:'sortedClasses\n\t"Answer all classes in the receiver, sorted by superclass/subclasses and by class name for common subclasses (Issue #143)."\n\n\t^self class sortedClasses: self classes',messageSends:["sortedClasses:","class","classes"],referencedClasses:[]}),
smalltalk.Package);smalltalk.Package.klass.iVarNames=["defaultCommitPathJs","defaultCommitPathSt"];
smalltalk.addMethod("_commitToLocalStorage_",smalltalk.method({selector:"commitToLocalStorage:",category:"loading-storing",fn:function(a){var b=nil,c=nil,b=smalltalk.send("smalltalk.packages.","__comma",[a]),c=smalltalk.send(smalltalk.send(smalltalk.Exporter||Exporter,"_new",[]),"_exportPackage_",[a]);localStorage[b]=escape(c);return this},args:["aPackageName"],source:"commitToLocalStorage: aPackageName\n\t| key sourceCode |\n\tkey := 'smalltalk.packages.' , aPackageName.\n\tsourceCode := Exporter new exportPackage: aPackageName.\n\t<localStorage[key] = escape(sourceCode)>",messageSends:[",",
"exportPackage:","new"],referencedClasses:["Exporter"]}),smalltalk.Package.klass);smalltalk.addMethod("_defaultCommitPathJs",smalltalk.method({selector:"defaultCommitPathJs",category:"commit paths",fn:function(){return($receiver=this["@defaultCommitPathJs"])==nil||$receiver==void 0?this["@defaultCommitPathJs"]="js":$receiver},args:[],source:"defaultCommitPathJs\n\t^ defaultCommitPathJs ifNil: [ defaultCommitPathJs := 'js']",messageSends:["ifNil:"],referencedClasses:[]}),smalltalk.Package.klass);
smalltalk.addMethod("_defaultCommitPathJs_",smalltalk.method({selector:"defaultCommitPathJs:",category:"commit paths",fn:function(a){this["@defaultCommitPathJs"]=a;return this},args:["aString"],source:"defaultCommitPathJs: aString\n\tdefaultCommitPathJs := aString",messageSends:[],referencedClasses:[]}),smalltalk.Package.klass);
smalltalk.addMethod("_defaultCommitPathSt",smalltalk.method({selector:"defaultCommitPathSt",category:"commit paths",fn:function(){return($receiver=this["@defaultCommitPathSt"])==nil||$receiver==void 0?this["@defaultCommitPathSt"]="st":$receiver},args:[],source:"defaultCommitPathSt\n\t^ defaultCommitPathSt ifNil: [ defaultCommitPathSt := 'st']",messageSends:["ifNil:"],referencedClasses:[]}),smalltalk.Package.klass);
smalltalk.addMethod("_defaultCommitPathSt_",smalltalk.method({selector:"defaultCommitPathSt:",category:"commit paths",fn:function(a){this["@defaultCommitPathSt"]=a;return this},args:["aString"],source:"defaultCommitPathSt: aString\n\tdefaultCommitPathSt := aString",messageSends:[],referencedClasses:[]}),smalltalk.Package.klass);
smalltalk.addMethod("_fetch_",smalltalk.method({selector:"fetch:",category:"loading-storing",fn:function(a){smalltalk.send(this,"_fetch_prefix_",[a,smalltalk.send(smalltalk.send(this,"_defaultCommitPathJs",[]),"__comma",["/"])]);return this},args:["aPackageName"],source:"fetch: aPackageName\n\tself fetch: aPackageName prefix: self defaultCommitPathJs, '/'",messageSends:["fetch:prefix:",",","defaultCommitPathJs"],referencedClasses:[]}),smalltalk.Package.klass);
smalltalk.addMethod("_fetch_prefix_",smalltalk.method({selector:"fetch:prefix:",category:"loading-storing",fn:function(a,b){smalltalk.send(typeof jQuery=="undefined"?nil:jQuery,"_getScript_onSuccess_",[smalltalk.send(smalltalk.send(b,"__comma",[a]),"__comma",[".js"]),function(){return smalltalk.send(smalltalk.Package||Package,"_init_",[a])}]);return this},args:["aPackageName","aPrefix"],source:"fetch: aPackageName prefix: aPrefix\n\tjQuery getScript: (aPrefix , aPackageName , '.js') onSuccess: [ Package init: aPackageName ]",
messageSends:["getScript:onSuccess:",",","init:"],referencedClasses:["Package"]}),smalltalk.Package.klass);
smalltalk.addMethod("_init_",smalltalk.method({selector:"init:",category:"loading-storing",fn:function(a){(function(a){smalltalk.send(a,"_do_",[function(a){return smalltalk.init(a)}]);return smalltalk.send(a,"_do_",[function(a){return smalltalk.send(a,"_initialize",[])}])})(smalltalk.send(smalltalk.send(typeof smalltalk=="undefined"?nil:smalltalk,"_classes",[]),"_select_",[function(b){return b.pkg.pkgName==a}]));return this},args:["aPackageName"],source:"init: aPackageName\n\t(smalltalk classes select: [ :each | <each.pkg.pkgName == aPackageName> ])\n\t\tdo: [ :each | <smalltalk.init(each)> ];\n\t\tdo: [ :each | each initialize ]",
messageSends:["do:","initialize","select:","classes"],referencedClasses:[]}),smalltalk.Package.klass);smalltalk.addMethod("_named_",smalltalk.method({selector:"named:",category:"not yet classified",fn:function(a){return smalltalk.send(smalltalk.send(smalltalk.Smalltalk||Smalltalk,"_current",[]),"_packageAt_",[a])},args:["aPackageName"],source:"named: aPackageName\n\n\t^Smalltalk current packageAt: aPackageName",messageSends:["packageAt:","current"],referencedClasses:["Smalltalk"]}),smalltalk.Package.klass);
smalltalk.addMethod("_named_ifAbsent_",smalltalk.method({selector:"named:ifAbsent:",category:"not yet classified",fn:function(a,b){return smalltalk.send(smalltalk.send(smalltalk.Smalltalk||Smalltalk,"_current",[]),"_packageAt_ifAbsent_",[a,b])},args:["aPackageName","aBlock"],source:"named: aPackageName ifAbsent: aBlock\n\n\t^Smalltalk current packageAt: aPackageName ifAbsent: aBlock",messageSends:["packageAt:ifAbsent:","current"],referencedClasses:["Smalltalk"]}),smalltalk.Package.klass);
smalltalk.addMethod("_resetCommitPaths",smalltalk.method({selector:"resetCommitPaths",category:"commit paths",fn:function(){this["@defaultCommitPathJs"]=nil;this["@defaultCommitPathSt"]=nil;return this},args:[],source:"resetCommitPaths\n        defaultCommitPathJs := nil.\n        defaultCommitPathSt := nil.",messageSends:[],referencedClasses:[]}),smalltalk.Package.klass);
smalltalk.addMethod("_sortedClasses_",smalltalk.method({selector:"sortedClasses:",category:"sorting",fn:function(a){var b=nil,c=nil,d=nil,e=nil,b=[],c=[];smalltalk.send(a,"_do_",[function(d){return($receiver=smalltalk.send(a,"_includes_",[smalltalk.send(d,"_superclass",[])])).klass===smalltalk.Boolean?!$receiver?smalltalk.send(b,"_add_",[d]):smalltalk.send(c,"_add_",[d]):smalltalk.send($receiver,"_ifFalse_ifTrue_",[function(){return smalltalk.send(b,"_add_",[d])},function(){return smalltalk.send(c,
"_add_",[d])}])}]);d=smalltalk.send(b,"_collect_",[function(a){return smalltalk.send(smalltalk.ClassSorterNode||ClassSorterNode,"_on_classes_level_",[a,c,0])}]);d=smalltalk.send(d,"_sorted_",[function(a,b){return($receiver=smalltalk.send(smalltalk.send(a,"_theClass",[]),"_name",[])).klass===smalltalk.Number?$receiver<=smalltalk.send(smalltalk.send(b,"_theClass",[]),"_name",[]):smalltalk.send($receiver,"__lt_eq",[smalltalk.send(smalltalk.send(b,"_theClass",[]),"_name",[])])}]);e=smalltalk.send(smalltalk.Array||
Array,"_new",[]);smalltalk.send(d,"_do_",[function(a){return smalltalk.send(a,"_traverseClassesWith_",[e])}]);return e},args:["classes"],source:'sortedClasses: classes\n\t"Answer classes, sorted by superclass/subclasses and by class name for common subclasses (Issue #143)"\n\n\t| children others nodes expandedClasses |\n\tchildren := #().\n\tothers := #().\n\tclasses do: [:each |\n\t\t(classes includes: each superclass)\n\t\t\tifFalse: [children add: each]\n\t\t\tifTrue: [others add: each]].\n\tnodes := children collect: [:each |\n\t\tClassSorterNode on: each classes: others level: 0].\n\tnodes := nodes sorted: [:a :b | a theClass name <= b theClass name ].\n\texpandedClasses := Array new.\n\tnodes do: [:aNode |\n\t\taNode traverseClassesWith: expandedClasses].\n\t^expandedClasses',
messageSends:"do:,ifFalse:ifTrue:,includes:,superclass,add:,collect:,on:classes:level:,sorted:,<=,name,theClass,new,traverseClassesWith:".split(","),referencedClasses:["ClassSorterNode","Array"]}),smalltalk.Package.klass);smalltalk.addClass("Point",smalltalk.Object,["x","y"],"Kernel-Objects");smalltalk.Point.comment='A `Point` represents an x-y pair of numbers usually designating a geometric coordinate.\nPoints are traditionally created using the binary `#@` message to a number:\n\n\t100@120\n\nPoints can then be arithmetically manipulated:\n\n\t100@100 + (10@10)\n\n...or for example:\n\n\t(100@100) * 2\n\n**NOTE:** Creating a Point with a negative y-value will need a space after `@` in order to avoid a parsing error:\n\n\t100@ -100 "but 100@-100 would not parse"\n\nAmber does not have much behavior in this class out-of-the-box.';
smalltalk.addMethod("__star",smalltalk.method({selector:"*",category:"arithmetic",fn:function(a){return smalltalk.send(smalltalk.Point||Point,"_x_y_",[($receiver=smalltalk.send(this,"_x",[])).klass===smalltalk.Number?$receiver*smalltalk.send(smalltalk.send(a,"_asPoint",[]),"_x",[]):smalltalk.send($receiver,"__star",[smalltalk.send(smalltalk.send(a,"_asPoint",[]),"_x",[])]),($receiver=smalltalk.send(this,"_y",[])).klass===smalltalk.Number?$receiver*smalltalk.send(smalltalk.send(a,"_asPoint",[]),"_y",
[]):smalltalk.send($receiver,"__star",[smalltalk.send(smalltalk.send(a,"_asPoint",[]),"_y",[])])])},args:["aPoint"],source:"* aPoint\n\t^Point x: self x * aPoint asPoint x y: self y * aPoint asPoint y",messageSends:["x:y:","*","x","asPoint","y"],referencedClasses:["Point"]}),smalltalk.Point);
smalltalk.addMethod("__plus",smalltalk.method({selector:"+",category:"arithmetic",fn:function(a){return smalltalk.send(smalltalk.Point||Point,"_x_y_",[($receiver=smalltalk.send(this,"_x",[])).klass===smalltalk.Number?$receiver+smalltalk.send(smalltalk.send(a,"_asPoint",[]),"_x",[]):smalltalk.send($receiver,"__plus",[smalltalk.send(smalltalk.send(a,"_asPoint",[]),"_x",[])]),($receiver=smalltalk.send(this,"_y",[])).klass===smalltalk.Number?$receiver+smalltalk.send(smalltalk.send(a,"_asPoint",[]),"_y",
[]):smalltalk.send($receiver,"__plus",[smalltalk.send(smalltalk.send(a,"_asPoint",[]),"_y",[])])])},args:["aPoint"],source:"+ aPoint\n\t^Point x: self x + aPoint asPoint x y: self y + aPoint asPoint y",messageSends:["x:y:","+","x","asPoint","y"],referencedClasses:["Point"]}),smalltalk.Point);
smalltalk.addMethod("__minus",smalltalk.method({selector:"-",category:"arithmetic",fn:function(a){return smalltalk.send(smalltalk.Point||Point,"_x_y_",[($receiver=smalltalk.send(this,"_x",[])).klass===smalltalk.Number?$receiver-smalltalk.send(smalltalk.send(a,"_asPoint",[]),"_x",[]):smalltalk.send($receiver,"__minus",[smalltalk.send(smalltalk.send(a,"_asPoint",[]),"_x",[])]),($receiver=smalltalk.send(this,"_y",[])).klass===smalltalk.Number?$receiver-smalltalk.send(smalltalk.send(a,"_asPoint",[]),
"_y",[]):smalltalk.send($receiver,"__minus",[smalltalk.send(smalltalk.send(a,"_asPoint",[]),"_y",[])])])},args:["aPoint"],source:"- aPoint\n\t^Point x: self x - aPoint asPoint x y: self y - aPoint asPoint y",messageSends:["x:y:","-","x","asPoint","y"],referencedClasses:["Point"]}),smalltalk.Point);
smalltalk.addMethod("__slash",smalltalk.method({selector:"/",category:"arithmetic",fn:function(a){return smalltalk.send(smalltalk.Point||Point,"_x_y_",[($receiver=smalltalk.send(this,"_x",[])).klass===smalltalk.Number?$receiver/smalltalk.send(smalltalk.send(a,"_asPoint",[]),"_x",[]):smalltalk.send($receiver,"__slash",[smalltalk.send(smalltalk.send(a,"_asPoint",[]),"_x",[])]),($receiver=smalltalk.send(this,"_y",[])).klass===smalltalk.Number?$receiver/smalltalk.send(smalltalk.send(a,"_asPoint",[]),
"_y",[]):smalltalk.send($receiver,"__slash",[smalltalk.send(smalltalk.send(a,"_asPoint",[]),"_y",[])])])},args:["aPoint"],source:"/ aPoint\n\t^Point x: self x / aPoint asPoint x y: self y / aPoint asPoint y",messageSends:["x:y:","/","x","asPoint","y"],referencedClasses:["Point"]}),smalltalk.Point);
smalltalk.addMethod("__eq",smalltalk.method({selector:"=",category:"arithmetic",fn:function(a){var b=this;return smalltalk.send(smalltalk.send(smalltalk.send(a,"_class",[]),"__eq",[smalltalk.send(b,"_class",[])]),"_and_",[function(){return smalltalk.send(smalltalk.send(smalltalk.send(a,"_x",[]),"__eq",[smalltalk.send(b,"_x",[])]),"_&",[smalltalk.send(smalltalk.send(a,"_y",[]),"__eq",[smalltalk.send(b,"_y",[])])])}])},args:["aPoint"],source:"= aPoint\n\t^aPoint class = self class and: [\n\t\t(aPoint x = self x) & (aPoint y = self y)]",
messageSends:"and:,=,class,&,x,y".split(","),referencedClasses:[]}),smalltalk.Point);smalltalk.addMethod("_asPoint",smalltalk.method({selector:"asPoint",category:"converting",fn:function(){return this},args:[],source:"asPoint\n\t^self",messageSends:[],referencedClasses:[]}),smalltalk.Point);
smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"printing",fn:function(){var a=this;return smalltalk.send(smalltalk.String||String,"_streamContents_",[function(b){smalltalk.send(b,"_nextPutAll_",[smalltalk.send(smalltalk.send(a["@x"],"_printString",[]),"__comma",["@"])]);($receiver=smalltalk.send(smalltalk.send(a["@y"],"_notNil",[]),"_and_",[function(){return smalltalk.send(a["@y"],"_negative",[])}])).klass===smalltalk.Boolean?$receiver&&smalltalk.send(b,"_space",
[]):smalltalk.send($receiver,"_ifTrue_",[function(){return smalltalk.send(b,"_space",[])}]);return smalltalk.send(b,"_nextPutAll_",[smalltalk.send(a["@y"],"_printString",[])])}])},args:[],source:'printString\n\t"Print receiver in classic x@y notation."\n\n\t^String streamContents: [:stream |\n\t\tstream nextPutAll: x printString, \'@\'.\n\t\t(y notNil and: [y negative])\n\t\t\tifTrue: [\n\t\t\t\t"Avoid ambiguous @- construct"\n\t\t\t\tstream space].\n\t\tstream nextPutAll: y printString]',messageSends:"streamContents: nextPutAll: , printString ifTrue: and: notNil negative space".split(" "),
referencedClasses:["String"]}),smalltalk.Point);
smalltalk.addMethod("_translateBy_",smalltalk.method({selector:"translateBy:",category:"transforming",fn:function(a){return smalltalk.send(($receiver=smalltalk.send(a,"_x",[])).klass===smalltalk.Number?$receiver+this["@x"]:smalltalk.send($receiver,"__plus",[this["@x"]]),"__at",[($receiver=smalltalk.send(a,"_y",[])).klass===smalltalk.Number?$receiver+this["@y"]:smalltalk.send($receiver,"__plus",[this["@y"]])])},args:["delta"],source:'translateBy: delta \n\t"Answer a Point translated by delta (an instance of Point)."\n\t^(delta x + x) @ (delta y + y)',messageSends:["@",
"+","x","y"],referencedClasses:[]}),smalltalk.Point);smalltalk.addMethod("_x",smalltalk.method({selector:"x",category:"accessing",fn:function(){return this["@x"]},args:[],source:"x\n\t^x",messageSends:[],referencedClasses:[]}),smalltalk.Point);smalltalk.addMethod("_x_",smalltalk.method({selector:"x:",category:"accessing",fn:function(a){this["@x"]=a;return this},args:["aNumber"],source:"x: aNumber\n\tx := aNumber",messageSends:[],referencedClasses:[]}),smalltalk.Point);
smalltalk.addMethod("_y",smalltalk.method({selector:"y",category:"accessing",fn:function(){return this["@y"]},args:[],source:"y\n\t^y",messageSends:[],referencedClasses:[]}),smalltalk.Point);smalltalk.addMethod("_y_",smalltalk.method({selector:"y:",category:"accessing",fn:function(a){this["@y"]=a;return this},args:["aNumber"],source:"y: aNumber\n\ty := aNumber",messageSends:[],referencedClasses:[]}),smalltalk.Point);
smalltalk.addMethod("_x_y_",smalltalk.method({selector:"x:y:",category:"instance creation",fn:function(a,b){var c=smalltalk.send(this,"_new",[]);smalltalk.send(c,"_x_",[a]);smalltalk.send(c,"_y_",[b]);return smalltalk.send(c,"_yourself",[])},args:["aNumber","anotherNumber"],source:"x: aNumber y: anotherNumber\n\t^self new\n\t\tx: aNumber;\n\t\ty: anotherNumber;\n\t\tyourself",messageSends:["x:","y:","yourself","new"],referencedClasses:[]}),smalltalk.Point.klass);
smalltalk.addClass("Random",smalltalk.Object,[],"Kernel-Objects");smalltalk.Random.comment="`Random` is a random number generator and is implemented as a trivial wrapper around javascript `Math.random()` and is used like this:\n\n\tRandom new next\n\nThis will return a float x where x < 1 and x > 0. If you want a random integer from 1 to 10 you can use `#atRandom`\n\n\t10 atRandom\n\n...and if you want a random number in a specific interval this also works:\n\n\t(3 to: 7) atRandom\n\n...but be aware that `#to:` does not create an Interval as in other Smalltalk implementations but in fact an `Array` of numbers, so it's better to use:\n\n\t5 atRandom + 2\n\nSince `#atRandom` is implemented in `SequencableCollection` you can easy pick an element at random:\n\n\t#('a' 'b' 'c') atRandom\n\n...or perhaps a letter from a `String`:\n\n\t'abc' atRandom\n\nSince Amber does not have Characters this will return a `String` of length 1 like for example `'b'`.";
smalltalk.addMethod("_next",smalltalk.method({selector:"next",category:"accessing",fn:function(){return Math.random()},args:[],source:"next\n\t<return Math.random()>",messageSends:[],referencedClasses:[]}),smalltalk.Random);
smalltalk.addMethod("_next_",smalltalk.method({selector:"next:",category:"accessing",fn:function(a){var b=this;return smalltalk.send(smalltalk.send(1,"_to_",[a]),"_collect_",[function(){return smalltalk.send(b,"_next",[])}])},args:["anInteger"],source:"next: anInteger\n    ^(1 to: anInteger) collect: [:each | self next]",messageSends:["collect:","to:","next"],referencedClasses:[]}),smalltalk.Random);smalltalk.addClass("Smalltalk",smalltalk.Object,[],"Kernel-Objects");smalltalk.Smalltalk.comment="Smalltalk has only one instance, accessed with `Smalltalk current`. \nIt represents the global JavaScript variable `smalltalk` declared in `js/boot.js`.\n\nThe `smalltalk` object holds all class and packages defined in the system.\n\n## Classes\n\nClasses can be accessed using the following methods:\n\n- `#classes` answers the full list of Smalltalk classes in the system\n- `#at:` answers a specific class of `nil`\n\n## Packages\n\nPackages can be accessed using the following methods:\n\n- `#packages` answers the full list of packages\n- `#packageAt:` answers a specific class of `nil`\n\n__note:__ classes and packages are accessed using strings, not symbols\n\n## Parsing\n\nThe `#parse:` method is used to parse Smalltalk source code. \nIt requires the `Compiler` package and the `js/parser.js` parser file in order to work";
smalltalk.addMethod("_at_",smalltalk.method({selector:"at:",category:"accessing",fn:function(a){return this[a]},args:["aString"],source:"at: aString\n\t<return self[aString]>",messageSends:[],referencedClasses:[]}),smalltalk.Smalltalk);
smalltalk.addMethod("_basicParse_",smalltalk.method({selector:"basicParse:",category:"accessing",fn:function(a){return smalltalk.parser.parse(a)},args:["aString"],source:"basicParse: aString\n\t<return smalltalk.parser.parse(aString)>",messageSends:[],referencedClasses:[]}),smalltalk.Smalltalk);
smalltalk.addMethod("_classes",smalltalk.method({selector:"classes",category:"accessing",fn:function(){return this.classes()},args:[],source:"classes\n\t<return self.classes()>",messageSends:[],referencedClasses:[]}),smalltalk.Smalltalk);
smalltalk.addMethod("_createPackage_",smalltalk.method({selector:"createPackage:",category:"private",fn:function(a){return smalltalk.addPackage(a,nil)},args:["packageName"],source:'createPackage: packageName\n\t"Create and bind a new package with given name and return it."\n\n      <return smalltalk.addPackage(packageName, nil)>',messageSends:[],referencedClasses:[]}),smalltalk.Smalltalk);
smalltalk.addMethod("_createPackage_properties_",smalltalk.method({selector:"createPackage:properties:",category:"private",fn:function(a,b){var c=nil,c={};smalltalk.send(b,"_keysAndValuesDo_",[function(a,b){return c[a]=b}]);return smalltalk.addPackage(a,c)},args:["packageName","aDict"],source:'createPackage: packageName properties: aDict\n\t"Create and bind a new package with given name and return it."\n\n\t| object |\n\t<object = {};>.\n\taDict keysAndValuesDo: [:key :value |\n\t\t<object[key] = value>.\n\t].\n       <return smalltalk.addPackage(packageName, object)>',
messageSends:["keysAndValuesDo:"],referencedClasses:[]}),smalltalk.Smalltalk);
smalltalk.addMethod("_deletePackage_",smalltalk.method({selector:"deletePackage:",category:"private",fn:function(a){delete smalltalk.packages[a];return this},args:["packageName"],source:'deletePackage: packageName\n\t"Deletes a package by deleting its binding, but does not check if it contains classes etc.\n\tTo remove a package, use #removePackage instead."\n\n       <delete smalltalk.packages[packageName]>',messageSends:[],referencedClasses:[]}),smalltalk.Smalltalk);
smalltalk.addMethod("_packageAt_",smalltalk.method({selector:"packageAt:",category:"packages",fn:function(a){return this.packages[a]},args:["packageName"],source:"packageAt: packageName\n       <return self.packages[packageName]>",messageSends:[],referencedClasses:[]}),smalltalk.Smalltalk);
smalltalk.addMethod("_packageAt_ifAbsent_",smalltalk.method({selector:"packageAt:ifAbsent:",category:"packages",fn:function(a,b){return smalltalk.send(smalltalk.send(this,"_packageAt_",[a]),"_ifNil_",[b])},args:["packageName","aBlock"],source:"packageAt: packageName ifAbsent: aBlock\n       ^(self packageAt: packageName) ifNil: aBlock",messageSends:["ifNil:","packageAt:"],referencedClasses:[]}),smalltalk.Smalltalk);
smalltalk.addMethod("_packages",smalltalk.method({selector:"packages",category:"packages",fn:function(){return this.packages.all()},args:[],source:'packages\n\t"Return all Package instances in the system."\n\n\t<return self.packages.all()>',messageSends:[],referencedClasses:[]}),smalltalk.Smalltalk);
smalltalk.addMethod("_parse_",smalltalk.method({selector:"parse:",category:"accessing",fn:function(a){var b=this,c=nil;smalltalk.send(b,"_try_catch_",[function(){return c=smalltalk.send(b,"_basicParse_",[a])},function(c){return smalltalk.send(smalltalk.send(b,"_parseError_parsing_",[c,a]),"_signal",[])}]);return c},args:["aString"],source:"parse: aString\n\t| result | \n\tself try: [result := self basicParse: aString] catch: [:ex | (self parseError: ex parsing: aString) signal].\n\t^result",messageSends:["try:catch:",
"basicParse:","signal","parseError:parsing:"],referencedClasses:[]}),smalltalk.Smalltalk);
smalltalk.addMethod("_parseError_parsing_",smalltalk.method({selector:"parseError:parsing:",category:"accessing",fn:function(a,b){var c=nil,d=nil,e=nil,h=nil,i=nil,i=nil,c=a.line,d=a.column,e=a.message,h=smalltalk.send(b,"_lines",[]),i=smalltalk.send(h,"_at_",[c]),i=smalltalk.send(smalltalk.send(smalltalk.send(i,"_copyFrom_to_",[1,($receiver=d).klass===smalltalk.Number?$receiver-1:smalltalk.send($receiver,"__minus",[1])]),"__comma",[" ===>"]),"__comma",[smalltalk.send(i,"_copyFrom_to_",[d,smalltalk.send(i,
"_size",[])])]);smalltalk.send(h,"_at_put_",[c,i]);i=smalltalk.send(smalltalk.String||String,"_streamContents_",[function(a){return smalltalk.send(h,"_withIndexDo_",[function(b,c){return smalltalk.send(a,"_nextPutAll_",[smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.send(c,"_asString",[]),"__comma",[": "]),"__comma",[b]),"__comma",[smalltalk.send(smalltalk.String||String,"_lf",[])])])}])}]);return smalltalk.send(smalltalk.send(smalltalk.Error||Error,"_new",[]),"_messageText_",[smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.send("Parse error on line ",
"__comma",[c]),"__comma",[" column "]),"__comma",[d]),"__comma",[" : "]),"__comma",[e]),"__comma",[" Below is code with line numbers and ===> marker inserted:"]),"__comma",[smalltalk.send(smalltalk.String||String,"_lf",[])]),"__comma",[i])])},args:["anException","aString"],source:"parseError: anException parsing: aString\n\t| row col message lines badLine code |\n\t<row = anException.line;\n\tcol = anException.column;\n\tmessage = anException.message;>.\n\tlines := aString lines.\n\tbadLine := lines at: row.\n\tbadLine := (badLine copyFrom: 1 to: col - 1), ' ===>', (badLine copyFrom:  col to: badLine size).\n\tlines at: row put: badLine.\n\tcode := String streamContents: [:s |\n                  lines withIndexDo: [:l :i |\n                     s nextPutAll: i asString, ': ', l, String lf]].\n\t^ Error new messageText: ('Parse error on line ' , row , ' column ' , col , ' : ' , message , ' Below is code with line numbers and ===> marker inserted:' , String lf, code)",
messageSends:"lines at: , copyFrom:to: - size at:put: streamContents: withIndexDo: nextPutAll: asString lf messageText: new".split(" "),referencedClasses:["String","Error"]}),smalltalk.Smalltalk);smalltalk.addMethod("_readJSObject_",smalltalk.method({selector:"readJSObject:",category:"accessing",fn:function(a){return this.readJSObject(a)},args:["anObject"],source:"readJSObject: anObject\n\t<return self.readJSObject(anObject)>",messageSends:[],referencedClasses:[]}),smalltalk.Smalltalk);
smalltalk.addMethod("_removeClass_",smalltalk.method({selector:"removeClass:",category:"classes",fn:function(a){var b=this;($receiver=smalltalk.send(a,"_isMetaclass",[])).klass===smalltalk.Boolean?$receiver&&smalltalk.send(b,"_error_",[smalltalk.send(smalltalk.send(a,"_asString",[]),"__comma",[" is a Metaclass and cannot be removed!"])]):smalltalk.send($receiver,"_ifTrue_",[function(){return smalltalk.send(b,"_error_",[smalltalk.send(smalltalk.send(a,"_asString",[]),"__comma",[" is a Metaclass and cannot be removed!"])])}]);
smalltalk.send(smalltalk.send(smalltalk.send(a,"_methodDictionary",[]),"_values",[]),"_do_",[function(b){return smalltalk.send(a,"_removeCompiledMethod_",[b])}]);smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.send(a,"_class",[]),"_methodDictionary",[]),"_values",[]),"_do_",[function(b){return smalltalk.send(smalltalk.send(a,"_class",[]),"_removeCompiledMethod_",[b])}]);smalltalk.send(b,"_basicDelete_",[smalltalk.send(a,"_name",[])]);return b},args:["aClass"],source:"removeClass: aClass\n\taClass isMetaclass ifTrue: [self error: aClass asString, ' is a Metaclass and cannot be removed!'].\n\taClass methodDictionary values do: [:each |\n\t\taClass removeCompiledMethod: each].\n\taClass class methodDictionary values do: [:each |\n\t\taClass class removeCompiledMethod: each].\n\tself basicDelete: aClass name",
messageSends:"ifTrue: isMetaclass error: , asString do: values methodDictionary removeCompiledMethod: class basicDelete: name".split(" "),referencedClasses:[]}),smalltalk.Smalltalk);
smalltalk.addMethod("_removePackage_",smalltalk.method({selector:"removePackage:",category:"packages",fn:function(a){var b=this,c=nil,c=smalltalk.send(b,"_packageAt_ifAbsent_",[a,function(){return smalltalk.send(b,"_error_",[smalltalk.send("Missing package: ","__comma",[a])])}]);smalltalk.send(smalltalk.send(c,"_classes",[]),"_do_",[function(a){return smalltalk.send(b,"_removeClass_",[a])}]);smalltalk.send(b,"_deletePackage_",[a]);return b},args:["packageName"],source:"removePackage: packageName\n\t\"Removes a package and all its classes.\"\n\n\t| pkg |\n\tpkg := self packageAt: packageName ifAbsent: [self error: 'Missing package: ', packageName].\n\tpkg classes do: [:each |\n        \tself removeClass: each].\n\tself deletePackage: packageName",
messageSends:"packageAt:ifAbsent: error: , do: classes removeClass: deletePackage:".split(" "),referencedClasses:[]}),smalltalk.Smalltalk);
smalltalk.addMethod("_renamePackage_to_",smalltalk.method({selector:"renamePackage:to:",category:"packages",fn:function(a,b){var c=this,d=nil,d=smalltalk.send(c,"_packageAt_ifAbsent_",[a,function(){return smalltalk.send(c,"_error_",[smalltalk.send("Missing package: ","__comma",[a])])}]);($receiver=smalltalk.send(c,"_packageAt_",[b]))!=nil&&$receiver!=void 0&&smalltalk.send(c,"_error_",[smalltalk.send("Already exists a package called: ","__comma",[b])]);smalltalk.packages[b]=smalltalk.packages[a];
smalltalk.send(d,"_name_",[b]);smalltalk.send(c,"_deletePackage_",[a]);return c},args:["packageName","newName"],source:"renamePackage: packageName to: newName\n\t\"Rename a package.\"\n\n\t| pkg |\n\tpkg := self packageAt: packageName ifAbsent: [self error: 'Missing package: ', packageName].\n\t(self packageAt: newName) ifNotNil: [self error: 'Already exists a package called: ', newName].\n\t<smalltalk.packages[newName] = smalltalk.packages[packageName]>.\n\tpkg name: newName.\n\tself deletePackage: packageName.",
messageSends:"packageAt:ifAbsent: error: , ifNotNil: packageAt: name: deletePackage:".split(" "),referencedClasses:[]}),smalltalk.Smalltalk);smalltalk.addMethod("_reservedWords",smalltalk.method({selector:"reservedWords",category:"accessing",fn:function(){return this.reservedWords},args:[],source:'reservedWords\n\t"JavaScript reserved words"\n\t<return self.reservedWords>',messageSends:[],referencedClasses:[]}),smalltalk.Smalltalk);
smalltalk.addMethod("_send_to_arguments_",smalltalk.method({selector:"send:to:arguments:",category:"accessing",fn:function(a,b,c){var d=nil,d=smalltalk.send(smalltalk.send(a,"_asString",[]),"_asSelector",[]);this.send(b,d,c);return this},args:["aSelector","anObject","aCollection"],source:"send: aSelector to: anObject arguments: aCollection\n\t| selector |\n\tselector := aSelector asString asSelector.\n\t<self.send(anObject, selector, aCollection)>",messageSends:["asSelector","asString"],referencedClasses:[]}),
smalltalk.Smalltalk);smalltalk.Smalltalk.klass.iVarNames=["current"];smalltalk.addMethod("_current",smalltalk.method({selector:"current",category:"accessing",fn:function(){return smalltalk},args:[],source:"current\n\t<return smalltalk>",messageSends:[],referencedClasses:[]}),smalltalk.Smalltalk.klass);smalltalk.addClass("UndefinedObject",smalltalk.Object,[],"Kernel-Objects");smalltalk.UndefinedObject.comment="UndefinedObject describes the behavior of its sole instance, `nil`. `nil` represents a prior value for variables that have not been initialized, or for results which are meaningless.\n\n`nil` is the Smalltalk representation of the `undefined` JavaScript object.";
smalltalk.addMethod("_asJSON",smalltalk.method({selector:"asJSON",category:"converting",fn:function(){return null},args:[],source:"asJSON\n\t^null",messageSends:[],referencedClasses:[]}),smalltalk.UndefinedObject);smalltalk.addMethod("_deepCopy",smalltalk.method({selector:"deepCopy",category:"copying",fn:function(){return this},args:[],source:"deepCopy\n\t^self",messageSends:[],referencedClasses:[]}),smalltalk.UndefinedObject);
smalltalk.addMethod("_ifNil_",smalltalk.method({selector:"ifNil:",category:"testing",fn:function(a){return smalltalk.send(this,"_ifNil_ifNotNil_",[a,function(){return nil}])},args:["aBlock"],source:'ifNil: aBlock\n\t"inlined in the Compiler"\n\t^self ifNil: aBlock ifNotNil: []',messageSends:["ifNil:ifNotNil:"],referencedClasses:[]}),smalltalk.UndefinedObject);
smalltalk.addMethod("_ifNil_ifNotNil_",smalltalk.method({selector:"ifNil:ifNotNil:",category:"testing",fn:function(a){return smalltalk.send(a,"_value",[])},args:["aBlock","anotherBlock"],source:'ifNil: aBlock ifNotNil: anotherBlock\n\t"inlined in the Compiler"\n\t^aBlock value',messageSends:["value"],referencedClasses:[]}),smalltalk.UndefinedObject);
smalltalk.addMethod("_ifNotNil_",smalltalk.method({selector:"ifNotNil:",category:"testing",fn:function(){return this},args:["aBlock"],source:'ifNotNil: aBlock\n\t"inlined in the Compiler"\n\t^self',messageSends:[],referencedClasses:[]}),smalltalk.UndefinedObject);
smalltalk.addMethod("_ifNotNil_ifNil_",smalltalk.method({selector:"ifNotNil:ifNil:",category:"testing",fn:function(a,b){return smalltalk.send(b,"_value",[])},args:["aBlock","anotherBlock"],source:'ifNotNil: aBlock ifNil: anotherBlock\n\t"inlined in the Compiler"\n\t^anotherBlock value',messageSends:["value"],referencedClasses:[]}),smalltalk.UndefinedObject);
smalltalk.addMethod("_isNil",smalltalk.method({selector:"isNil",category:"testing",fn:function(){return true},args:[],source:"isNil\n\t^true",messageSends:[],referencedClasses:[]}),smalltalk.UndefinedObject);smalltalk.addMethod("_notNil",smalltalk.method({selector:"notNil",category:"testing",fn:function(){return false},args:[],source:"notNil\n\t^false",messageSends:[],referencedClasses:[]}),smalltalk.UndefinedObject);
smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"printing",fn:function(){return"nil"},args:[],source:"printString\n    ^'nil'",messageSends:[],referencedClasses:[]}),smalltalk.UndefinedObject);smalltalk.addMethod("_shallowCopy",smalltalk.method({selector:"shallowCopy",category:"copying",fn:function(){return this},args:[],source:"shallowCopy\n\t^self",messageSends:[],referencedClasses:[]}),smalltalk.UndefinedObject);
smalltalk.addMethod("_subclass_instanceVariableNames_",smalltalk.method({selector:"subclass:instanceVariableNames:",category:"class creation",fn:function(a,b){return smalltalk.send(this,"_subclass_instanceVariableNames_package_",[a,b,nil])},args:["aString","anotherString"],source:"subclass: aString instanceVariableNames: anotherString\n\t^self subclass: aString instanceVariableNames: anotherString package: nil",messageSends:["subclass:instanceVariableNames:package:"],referencedClasses:[]}),smalltalk.UndefinedObject);
smalltalk.addMethod("_subclass_instanceVariableNames_category_",smalltalk.method({selector:"subclass:instanceVariableNames:category:",category:"class creation",fn:function(a,b,c){smalltalk.send(this,"_deprecatedAPI",[]);return smalltalk.send(this,"_subclass_instanceVariableNames_package_",[a,b,c])},args:["aString","aString2","aString3"],source:'subclass: aString instanceVariableNames: aString2 category: aString3\n\t"Kept for compatibility."\n\tself deprecatedAPI.\n\t^self subclass: aString instanceVariableNames: aString2 package: aString3',
messageSends:["deprecatedAPI","subclass:instanceVariableNames:package:"],referencedClasses:[]}),smalltalk.UndefinedObject);
smalltalk.addMethod("_subclass_instanceVariableNames_package_",smalltalk.method({selector:"subclass:instanceVariableNames:package:",category:"class creation",fn:function(a,b,c){return smalltalk.send(smalltalk.send(smalltalk.ClassBuilder||ClassBuilder,"_new",[]),"_superclass_subclass_instanceVariableNames_package_",[this,a,b,c])},args:["aString","aString2","aString3"],source:"subclass: aString instanceVariableNames: aString2 package: aString3\n\t^ClassBuilder new\n\t    superclass: self subclass: aString instanceVariableNames: aString2 package: aString3",messageSends:["superclass:subclass:instanceVariableNames:package:",
"new"],referencedClasses:["ClassBuilder"]}),smalltalk.UndefinedObject);smalltalk.addMethod("_new",smalltalk.method({selector:"new",category:"instance creation",fn:function(){smalltalk.send(this,"_error_",["You cannot create new instances of UndefinedObject. Use nil"]);return this},args:[],source:"new\n\t    self error: 'You cannot create new instances of UndefinedObject. Use nil'",messageSends:["error:"],referencedClasses:[]}),smalltalk.UndefinedObject.klass);
smalltalk.addPackage("Kernel-Classes",{});smalltalk.addClass("Behavior",smalltalk.Object,[],"Kernel-Classes");smalltalk.Behavior.comment="Behavior is the superclass of all class objects. \n\nIt defines the protocol for creating instances of a class with `#basicNew` and `#new` (see `boot.js` for class constructors details).\nInstances know about the subclass/superclass relationships between classes, contain the description that instances are created from, \nand hold the method dictionary that's associated with each class.\n\nBehavior also  provides methods for compiling methods, examining the method dictionary, and iterating over the class hierarchy.";
smalltalk.addMethod("_addCompiledMethod_",smalltalk.method({selector:"addCompiledMethod:",category:"compiling",fn:function(a){smalltalk.addMethod(a.selector._asSelector(),a,this);return this},args:["aMethod"],source:"addCompiledMethod: aMethod\n\t<smalltalk.addMethod(aMethod.selector._asSelector(), aMethod, self)>",messageSends:[],referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_allInstanceVariableNames",smalltalk.method({selector:"allInstanceVariableNames",category:"accessing",fn:function(){var a=nil,a=smalltalk.send(smalltalk.send(this,"_instanceVariableNames",[]),"_copy",[]);($receiver=smalltalk.send(this,"_superclass",[]))!=nil&&$receiver!=void 0&&smalltalk.send(a,"_addAll_",[smalltalk.send(smalltalk.send(this,"_superclass",[]),"_allInstanceVariableNames",[])]);return a},args:[],source:"allInstanceVariableNames\n\t| result |\n\tresult := self instanceVariableNames copy.\n\tself superclass ifNotNil: [\n\t    result addAll: self superclass allInstanceVariableNames].\n\t^result",
messageSends:"copy,instanceVariableNames,ifNotNil:,superclass,addAll:,allInstanceVariableNames".split(","),referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_allSubclasses",smalltalk.method({selector:"allSubclasses",category:"accessing",fn:function(){var a=nil,a=smalltalk.send(this,"_subclasses",[]);smalltalk.send(smalltalk.send(this,"_subclasses",[]),"_do_",[function(b){return smalltalk.send(a,"_addAll_",[smalltalk.send(b,"_allSubclasses",[])])}]);return a},args:[],source:"allSubclasses\n\t| result |\n\tresult := self subclasses.\n\tself subclasses do: [:each |\n\t    result addAll: each allSubclasses].\n\t^result",messageSends:["subclasses",
"do:","addAll:","allSubclasses"],referencedClasses:[]}),smalltalk.Behavior);smalltalk.addMethod("_basicNew",smalltalk.method({selector:"basicNew",category:"instance creation",fn:function(){return new this.fn},args:[],source:"basicNew\n\t<return new self.fn()>",messageSends:[],referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_canUnderstand_",smalltalk.method({selector:"canUnderstand:",category:"testing",fn:function(a){var b=this;return smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.send(b,"_methodDictionary",[]),"_keys",[]),"_includes_",[smalltalk.send(a,"_asString",[])]),"_or_",[function(){return smalltalk.send(smalltalk.send(smalltalk.send(b,"_superclass",[]),"_notNil",[]),"_and_",[function(){return smalltalk.send(smalltalk.send(b,"_superclass",[]),"_canUnderstand_",[a])}])}])},args:["aSelector"],
source:"canUnderstand: aSelector\n\t^(self methodDictionary keys includes: aSelector asString) or: [\n\t\tself superclass notNil and: [self superclass canUnderstand: aSelector]]",messageSends:"or:,includes:,keys,methodDictionary,asString,and:,notNil,superclass,canUnderstand:".split(","),referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_comment",smalltalk.method({selector:"comment",category:"accessing",fn:function(){return($receiver=smalltalk.send(this,"_basicAt_",["comment"]))==nil||$receiver==void 0?"":$receiver},args:[],source:"comment\n    ^(self basicAt: 'comment') ifNil: ['']",messageSends:["ifNil:","basicAt:"],referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_comment_",smalltalk.method({selector:"comment:",category:"accessing",fn:function(a){smalltalk.send(this,"_basicAt_put_",["comment",a]);return this},args:["aString"],source:"comment: aString\n    self basicAt: 'comment' put: aString",messageSends:["basicAt:put:"],referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_commentStamp",smalltalk.method({selector:"commentStamp",category:"accessing",fn:function(){var a=smalltalk.send(smalltalk.ClassCommentReader||ClassCommentReader,"_new",[]);smalltalk.send(a,"_class_",[this]);return smalltalk.send(a,"_yourself",[])},args:[],source:"commentStamp\n    ^ClassCommentReader new\n\tclass: self;\n\tyourself",messageSends:["class:","yourself","new"],referencedClasses:["ClassCommentReader"]}),smalltalk.Behavior);
smalltalk.addMethod("_commentStamp_prior_",smalltalk.method({selector:"commentStamp:prior:",category:"accessing",fn:function(){return smalltalk.send(this,"_commentStamp",[])},args:["aStamp","prior"],source:"commentStamp: aStamp prior: prior\n        ^self commentStamp",messageSends:["commentStamp"],referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_compile_",smalltalk.method({selector:"compile:",category:"compiling",fn:function(a){smalltalk.send(this,"_compile_category_",[a,""]);return this},args:["aString"],source:"compile: aString\n\tself compile: aString category: ''",messageSends:["compile:category:"],referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_compile_category_",smalltalk.method({selector:"compile:category:",category:"compiling",fn:function(a,b){var c=smalltalk.send(smalltalk.Compiler||Compiler,"_new",[]);smalltalk.send(c,"_install_forClass_category_",[a,this,b]);smalltalk.send(c,"_setupClass_",[this]);return this},args:["aString","anotherString"],source:"compile: aString category: anotherString\n\tCompiler new\n\t\tinstall: aString forClass: self category: anotherString;\n\t\tsetupClass: self",messageSends:["install:forClass:category:",
"setupClass:","new"],referencedClasses:["Compiler"]}),smalltalk.Behavior);smalltalk.addMethod("_inheritsFrom_",smalltalk.method({selector:"inheritsFrom:",category:"testing",fn:function(a){return smalltalk.send(smalltalk.send(a,"_allSubclasses",[]),"_includes_",[this])},args:["aClass"],source:"inheritsFrom: aClass\n\t^aClass allSubclasses includes: self",messageSends:["includes:","allSubclasses"],referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_instanceVariableNames",smalltalk.method({selector:"instanceVariableNames",category:"accessing",fn:function(){return this.iVarNames},args:[],source:"instanceVariableNames\n\t<return self.iVarNames>",messageSends:[],referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_methodAt_",smalltalk.method({selector:"methodAt:",category:"accessing",fn:function(a){return smalltalk.methods(this)[a]},args:["aString"],source:"methodAt: aString\n\t<return smalltalk.methods(self)[aString]>",messageSends:[],referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_methodDictionary",smalltalk.method({selector:"methodDictionary",category:"accessing",fn:function(){var a=smalltalk.HashedCollection._new(),b=this.fn.prototype.methods,c;for(c in b)b[c].selector&&a._at_put_(b[c].selector,b[c]);return a},args:[],source:"methodDictionary\n\t<var dict = smalltalk.HashedCollection._new();\n\tvar methods = self.fn.prototype.methods;\n\tfor(var i in methods) {\n\t\tif(methods[i].selector) {\n\t\t\tdict._at_put_(methods[i].selector, methods[i]);\n\t\t}\n\t};\n\treturn dict>",
messageSends:[],referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_methodsFor_",smalltalk.method({selector:"methodsFor:",category:"accessing",fn:function(a){var b=smalltalk.send(smalltalk.ClassCategoryReader||ClassCategoryReader,"_new",[]);smalltalk.send(b,"_class_category_",[this,a]);return smalltalk.send(b,"_yourself",[])},args:["aString"],source:"methodsFor: aString\n\t^ClassCategoryReader new\n\t    class: self category: aString;\n\t    yourself",messageSends:["class:category:","yourself","new"],referencedClasses:["ClassCategoryReader"]}),
smalltalk.Behavior);smalltalk.addMethod("_methodsFor_stamp_",smalltalk.method({selector:"methodsFor:stamp:",category:"accessing",fn:function(a){return smalltalk.send(this,"_methodsFor_",[a])},args:["aString","aStamp"],source:'methodsFor: aString stamp: aStamp\n\t"Added for compatibility, right now ignores stamp."\n\t^self methodsFor: aString',messageSends:["methodsFor:"],referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_name",smalltalk.method({selector:"name",category:"accessing",fn:function(){return this.className||nil},args:[],source:"name\n\t<return self.className || nil>",messageSends:[],referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_new",smalltalk.method({selector:"new",category:"instance creation",fn:function(){return smalltalk.send(smalltalk.send(this,"_basicNew",[]),"_initialize",[])},args:[],source:"new\n\t^self basicNew initialize",messageSends:["initialize","basicNew"],referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_protocols",smalltalk.method({selector:"protocols",category:"accessing",fn:function(){var a=nil,a=smalltalk.send(smalltalk.Array||Array,"_new",[]);smalltalk.send(smalltalk.send(this,"_methodDictionary",[]),"_do_",[function(b){return($receiver=smalltalk.send(a,"_includes_",[smalltalk.send(b,"_category",[])])).klass===smalltalk.Boolean?!$receiver?smalltalk.send(a,"_add_",[smalltalk.send(b,"_category",[])]):nil:smalltalk.send($receiver,"_ifFalse_",[function(){return smalltalk.send(a,
"_add_",[smalltalk.send(b,"_category",[])])}])}]);return smalltalk.send(a,"_sort",[])},args:[],source:"protocols\n    | protocols |\n    protocols := Array new.\n    self methodDictionary do: [:each |\n\t    (protocols includes: each category) ifFalse: [\n\t\tprotocols add: each category]].\n    ^protocols sort",messageSends:"new,do:,methodDictionary,ifFalse:,includes:,category,add:,sort".split(","),referencedClasses:["Array"]}),smalltalk.Behavior);
smalltalk.addMethod("_protocolsDo_",smalltalk.method({selector:"protocolsDo:",category:"accessing",fn:function(a){var b=nil,b=smalltalk.send(smalltalk.HashedCollection||HashedCollection,"_new",[]);smalltalk.send(smalltalk.send(smalltalk.send(this,"_methodDictionary",[]),"_values",[]),"_do_",[function(a){return smalltalk.send(smalltalk.send(b,"_at_ifAbsentPut_",[smalltalk.send(a,"_category",[]),function(){return smalltalk.send(smalltalk.Array||Array,"_new",[])}]),"_add_",[a])}]);smalltalk.send(smalltalk.send(this,
"_protocols",[]),"_do_",[function(c){return smalltalk.send(a,"_value_value_",[c,smalltalk.send(b,"_at_",[c])])}]);return this},args:["aBlock"],source:'protocolsDo: aBlock\n\t"Execute aBlock for each method category with\n\tits collection of methods in the sort order of category name."\n\n\t| methodsByCategory |\n\tmethodsByCategory := HashedCollection new.\n\tself methodDictionary values do: [:m |\n\t\t(methodsByCategory at: m category ifAbsentPut: [Array new])\n \t\t\tadd: m]. \n\tself protocols do: [:category |\n\t\taBlock value: category value: (methodsByCategory at: category)]',
messageSends:"new,do:,values,methodDictionary,add:,at:ifAbsentPut:,category,protocols,value:value:,at:".split(","),referencedClasses:["HashedCollection","Array"]}),smalltalk.Behavior);smalltalk.addMethod("_prototype",smalltalk.method({selector:"prototype",category:"accessing",fn:function(){return this.fn.prototype},args:[],source:"prototype\n\t<return self.fn.prototype>",messageSends:[],referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_removeCompiledMethod_",smalltalk.method({selector:"removeCompiledMethod:",category:"compiling",fn:function(a){delete this.fn.prototype[a.selector._asSelector()];delete this.fn.prototype.methods[a.selector];smalltalk.init(this);return this},args:["aMethod"],source:"removeCompiledMethod: aMethod\n\t<delete self.fn.prototype[aMethod.selector._asSelector()];\n\tdelete self.fn.prototype.methods[aMethod.selector];\n\tsmalltalk.init(self);>",messageSends:[],referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_subclasses",smalltalk.method({selector:"subclasses",category:"accessing",fn:function(){return smalltalk.subclasses(this)},args:[],source:"subclasses\n\t<return smalltalk.subclasses(self)>",messageSends:[],referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_superclass",smalltalk.method({selector:"superclass",category:"accessing",fn:function(){return this.superclass||nil},args:[],source:"superclass\n\t<return self.superclass || nil>",messageSends:[],referencedClasses:[]}),smalltalk.Behavior);
smalltalk.addMethod("_withAllSubclasses",smalltalk.method({selector:"withAllSubclasses",category:"accessing",fn:function(){var a=smalltalk.send(smalltalk.Array||Array,"_with_",[this]);smalltalk.send(a,"_addAll_",[smalltalk.send(this,"_allSubclasses",[])]);return smalltalk.send(a,"_yourself",[])},args:[],source:"withAllSubclasses\n\t^(Array with: self) addAll: self allSubclasses; yourself",messageSends:["addAll:","allSubclasses","yourself","with:"],referencedClasses:["Array"]}),smalltalk.Behavior);
smalltalk.addClass("Class",smalltalk.Behavior,[],"Kernel-Classes");smalltalk.Class.comment="Class is __the__ class object. \n\nInstances are the classes of the system.\nClass creation is done throught a `ClassBuilder`";
smalltalk.addMethod("_category",smalltalk.method({selector:"category",category:"accessing",fn:function(){return($receiver=smalltalk.send(this,"_package",[]))==nil||$receiver==void 0?"Unclassified":smalltalk.send(smalltalk.send(this,"_package",[]),"_name",[])},args:[],source:"category\n\t^self package ifNil: ['Unclassified'] ifNotNil: [self package name]",messageSends:["ifNil:ifNotNil:","package","name"],referencedClasses:[]}),smalltalk.Class);
smalltalk.addMethod("_isClass",smalltalk.method({selector:"isClass",category:"testing",fn:function(){return true},args:[],source:"isClass\n\t^true",messageSends:[],referencedClasses:[]}),smalltalk.Class);smalltalk.addMethod("_package",smalltalk.method({selector:"package",category:"accessing",fn:function(){return this.pkg},args:[],source:"package\n\t<return self.pkg>",messageSends:[],referencedClasses:[]}),smalltalk.Class);
smalltalk.addMethod("_package_",smalltalk.method({selector:"package:",category:"accessing",fn:function(a){this.pkg=a;return this},args:["aPackage"],source:"package: aPackage\n\t<self.pkg = aPackage>",messageSends:[],referencedClasses:[]}),smalltalk.Class);smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"printing",fn:function(){return smalltalk.send(this,"_name",[])},args:[],source:"printString\n\t^self name",messageSends:["name"],referencedClasses:[]}),smalltalk.Class);
smalltalk.addMethod("_rename_",smalltalk.method({selector:"rename:",category:"accessing",fn:function(a){smalltalk[a]=this;delete smalltalk[this.className];this.className=a;return this},args:["aString"],source:"rename: aString\n\t<\n\t\tsmalltalk[aString] = self;\n\t\tdelete smalltalk[self.className];\n\t\tself.className = aString;\n\t>",messageSends:[],referencedClasses:[]}),smalltalk.Class);
smalltalk.addMethod("_subclass_instanceVariableNames_",smalltalk.method({selector:"subclass:instanceVariableNames:",category:"class creation",fn:function(a,b){return smalltalk.send(this,"_subclass_instanceVariableNames_package_",[a,b,nil])},args:["aString","anotherString"],source:'subclass: aString instanceVariableNames: anotherString\n\t"Kept for compatibility."\n\t^self subclass: aString instanceVariableNames: anotherString package: nil',messageSends:["subclass:instanceVariableNames:package:"],
referencedClasses:[]}),smalltalk.Class);
smalltalk.addMethod("_subclass_instanceVariableNames_category_",smalltalk.method({selector:"subclass:instanceVariableNames:category:",category:"class creation",fn:function(a,b,c){smalltalk.send(this,"_deprecatedAPI",[]);return smalltalk.send(this,"_subclass_instanceVariableNames_package_",[a,b,c])},args:["aString","aString2","aString3"],source:'subclass: aString instanceVariableNames: aString2 category: aString3\n\t"Kept for compatibility."\n\tself deprecatedAPI.\n\t^self subclass: aString instanceVariableNames: aString2 package: aString3',messageSends:["deprecatedAPI",
"subclass:instanceVariableNames:package:"],referencedClasses:[]}),smalltalk.Class);
smalltalk.addMethod("_subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_",smalltalk.method({selector:"subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:",category:"class creation",fn:function(a,b,c,d,e){return smalltalk.send(this,"_subclass_instanceVariableNames_package_",[a,b,e])},args:["aString","aString2","classVars","pools","aString3"],source:'subclass: aString instanceVariableNames: aString2 classVariableNames: classVars poolDictionaries: pools category: aString3\n\t"Just ignore class variables and pools. Added for compatibility."\n\t^self subclass: aString instanceVariableNames: aString2 package: aString3',messageSends:["subclass:instanceVariableNames:package:"],
referencedClasses:[]}),smalltalk.Class);
smalltalk.addMethod("_subclass_instanceVariableNames_package_",smalltalk.method({selector:"subclass:instanceVariableNames:package:",category:"class creation",fn:function(a,b,c){return smalltalk.send(smalltalk.send(smalltalk.ClassBuilder||ClassBuilder,"_new",[]),"_superclass_subclass_instanceVariableNames_package_",[this,smalltalk.send(a,"_asString",[]),b,c])},args:["aString","aString2","aString3"],source:"subclass: aString instanceVariableNames: aString2 package: aString3\n\t^ClassBuilder new\n\t    superclass: self subclass: aString asString instanceVariableNames: aString2 package: aString3",messageSends:["superclass:subclass:instanceVariableNames:package:",
"new","asString"],referencedClasses:["ClassBuilder"]}),smalltalk.Class);smalltalk.addClass("Metaclass",smalltalk.Behavior,[],"Kernel-Classes");smalltalk.Metaclass.comment="Metaclass is the root of the class hierarchy.\n\nMetaclass instances are metaclasses, one for each real class. \nMetaclass instances have a single instance, which they hold onto, which is the class that they are the metaclass of.";
smalltalk.addMethod("_instanceClass",smalltalk.method({selector:"instanceClass",category:"accessing",fn:function(){return this.instanceClass},args:[],source:"instanceClass\n\t<return self.instanceClass>",messageSends:[],referencedClasses:[]}),smalltalk.Metaclass);
smalltalk.addMethod("_instanceVariableNames_",smalltalk.method({selector:"instanceVariableNames:",category:"accessing",fn:function(a){smalltalk.send(smalltalk.send(smalltalk.ClassBuilder||ClassBuilder,"_new",[]),"_class_instanceVariableNames_",[this,a]);return this},args:["aCollection"],source:"instanceVariableNames: aCollection\n\tClassBuilder new\n\t    class: self instanceVariableNames: aCollection",messageSends:["class:instanceVariableNames:","new"],referencedClasses:["ClassBuilder"]}),smalltalk.Metaclass);
smalltalk.addMethod("_isMetaclass",smalltalk.method({selector:"isMetaclass",category:"testing",fn:function(){return true},args:[],source:"isMetaclass\n\t^true",messageSends:[],referencedClasses:[]}),smalltalk.Metaclass);
smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"printing",fn:function(){return smalltalk.send(smalltalk.send(smalltalk.send(this,"_instanceClass",[]),"_name",[]),"__comma",[" class"])},args:[],source:"printString\n\t^self instanceClass name, ' class'",messageSends:[",","name","instanceClass"],referencedClasses:[]}),smalltalk.Metaclass);smalltalk.addClass("ClassBuilder",smalltalk.Object,[],"Kernel-Classes");smalltalk.ClassBuilder.comment="ClassBuilder is responsible for compiling new classes or modifying existing classes in the system.\n\nRather than using ClassBuilder directly to compile a class, use `Class >> subclass:instanceVariableNames:package:`.";
smalltalk.addMethod("_addSubclassOf_named_instanceVariableNames_",smalltalk.method({selector:"addSubclassOf:named:instanceVariableNames:",category:"private",fn:function(a,b,c){smalltalk.addClass(b,a,c);return smalltalk[b]},args:["aClass","aString","aCollection"],source:"addSubclassOf: aClass named: aString instanceVariableNames: aCollection\n\t<smalltalk.addClass(aString, aClass, aCollection);\n\t    return smalltalk[aString]>",messageSends:[],referencedClasses:[]}),smalltalk.ClassBuilder);
smalltalk.addMethod("_addSubclassOf_named_instanceVariableNames_package_",smalltalk.method({selector:"addSubclassOf:named:instanceVariableNames:package:",category:"private",fn:function(a,b,c,d){smalltalk.addClass(b,a,c,d);return smalltalk[b]},args:["aClass","aString","aCollection","packageName"],source:"addSubclassOf: aClass named: aString instanceVariableNames: aCollection package: packageName\n\t<smalltalk.addClass(aString, aClass, aCollection, packageName);\n\t    return smalltalk[aString]>",messageSends:[],
referencedClasses:[]}),smalltalk.ClassBuilder);
smalltalk.addMethod("_class_instanceVariableNames_",smalltalk.method({selector:"class:instanceVariableNames:",category:"class creation",fn:function(a,b){var c=this;($receiver=smalltalk.send(a,"_isMetaclass",[])).klass===smalltalk.Boolean?!$receiver&&smalltalk.send(c,"_error_",[smalltalk.send(smalltalk.send(a,"_name",[]),"__comma",[" is not a metaclass"])]):smalltalk.send($receiver,"_ifFalse_",[function(){return smalltalk.send(c,"_error_",[smalltalk.send(smalltalk.send(a,"_name",[]),"__comma",[" is not a metaclass"])])}]);
smalltalk.send(a,"_basicAt_put_",["iVarNames",smalltalk.send(c,"_instanceVariableNamesFor_",[b])]);smalltalk.send(c,"_setupClass_",[a]);return c},args:["aClass","aString"],source:"class: aClass instanceVariableNames: aString\n\taClass isMetaclass ifFalse: [self error: aClass name, ' is not a metaclass'].\n\taClass basicAt: 'iVarNames' put: (self instanceVariableNamesFor: aString).\n\tself setupClass: aClass",messageSends:"ifFalse: isMetaclass error: , name basicAt:put: instanceVariableNamesFor: setupClass:".split(" "),
referencedClasses:[]}),smalltalk.ClassBuilder);
smalltalk.addMethod("_copyClass_named_",smalltalk.method({selector:"copyClass:named:",category:"private",fn:function(a,b){var c=nil,c=smalltalk.send(this,"_addSubclassOf_named_instanceVariableNames_package_",[smalltalk.send(a,"_superclass",[]),b,smalltalk.send(a,"_instanceVariableNames",[]),smalltalk.send(smalltalk.send(a,"_package",[]),"_name",[])]);smalltalk.send(this,"_setupClass_",[c]);smalltalk.send(smalltalk.send(smalltalk.send(a,"_methodDictionary",[]),"_values",[]),"_do_",[function(a){return smalltalk.send(smalltalk.send(smalltalk.Compiler||
Compiler,"_new",[]),"_install_forClass_category_",[smalltalk.send(a,"_source",[]),c,smalltalk.send(a,"_category",[])])}]);smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.send(a,"_class",[]),"_methodDictionary",[]),"_values",[]),"_do_",[function(a){return smalltalk.send(smalltalk.send(smalltalk.Compiler||Compiler,"_new",[]),"_install_forClass_category_",[smalltalk.send(a,"_source",[]),smalltalk.send(c,"_class",[]),smalltalk.send(a,"_category",[])])}]);smalltalk.send(this,"_setupClass_",[c]);
return c},args:["aClass","aString"],source:"copyClass: aClass named: aString\n\t| newClass |\n\n\tnewClass := self \n\t\taddSubclassOf: aClass superclass\n\t\tnamed: aString \n\t\tinstanceVariableNames: aClass instanceVariableNames \n\t\tpackage: aClass package name.\n\n\tself setupClass: newClass.\n\n\taClass methodDictionary values do: [:each |\n\t\tCompiler new install: each source forClass: newClass category: each category].\n\n\taClass class methodDictionary values do: [:each |\n\t\tCompiler new install: each source forClass: newClass class category: each category].\n\n\tself setupClass: newClass.\n\t^newClass",
messageSends:"addSubclassOf:named:instanceVariableNames:package:,superclass,instanceVariableNames,name,package,setupClass:,do:,values,methodDictionary,install:forClass:category:,new,source,category,class".split(","),referencedClasses:["Compiler"]}),smalltalk.ClassBuilder);
smalltalk.addMethod("_instanceVariableNamesFor_",smalltalk.method({selector:"instanceVariableNamesFor:",category:"private",fn:function(a){return smalltalk.send(smalltalk.send(a,"_tokenize_",[" "]),"_reject_",[function(a){return smalltalk.send(a,"_isEmpty",[])}])},args:["aString"],source:"instanceVariableNamesFor: aString\n\t^(aString tokenize: ' ') reject: [:each | each isEmpty]",messageSends:["reject:","tokenize:","isEmpty"],referencedClasses:[]}),smalltalk.ClassBuilder);
smalltalk.addMethod("_setupClass_",smalltalk.method({selector:"setupClass:",category:"private",fn:function(a){smalltalk.init(a);return this},args:["aClass"],source:"setupClass: aClass\n\t<smalltalk.init(aClass);>",messageSends:[],referencedClasses:[]}),smalltalk.ClassBuilder);
smalltalk.addMethod("_superclass_subclass_",smalltalk.method({selector:"superclass:subclass:",category:"class creation",fn:function(a,b){return smalltalk.send(this,"_superclass_subclass_instanceVariableNames_package_",[a,b,"",nil])},args:["aClass","aString"],source:"superclass: aClass subclass: aString\n\t^self superclass: aClass subclass: aString instanceVariableNames: '' package: nil",messageSends:["superclass:subclass:instanceVariableNames:package:"],referencedClasses:[]}),smalltalk.ClassBuilder);
smalltalk.addMethod("_superclass_subclass_instanceVariableNames_package_",smalltalk.method({selector:"superclass:subclass:instanceVariableNames:package:",category:"class creation",fn:function(a,b,c,d){var e=nil,e=smalltalk.send(this,"_addSubclassOf_named_instanceVariableNames_package_",[a,b,smalltalk.send(this,"_instanceVariableNamesFor_",[c]),($receiver=d)==nil||$receiver==void 0?"unclassified":$receiver]);smalltalk.send(this,"_setupClass_",[e]);return e},args:["aClass","aString","aString2","aString3"],
source:"superclass: aClass subclass: aString instanceVariableNames: aString2 package: aString3\n\t| newClass |\n\tnewClass := self addSubclassOf: aClass\n\t\t\t\tnamed: aString instanceVariableNames: (self instanceVariableNamesFor: aString2)\n\t\t\t\tpackage: (aString3 ifNil: ['unclassified']).\n\tself setupClass: newClass.\n\t^newClass",messageSends:["addSubclassOf:named:instanceVariableNames:package:","instanceVariableNamesFor:","ifNil:","setupClass:"],referencedClasses:[]}),smalltalk.ClassBuilder);
smalltalk.addClass("ClassCategoryReader",smalltalk.Object,["class","category","chunkParser"],"Kernel-Classes");smalltalk.ClassCategoryReader.comment="ClassCategoryReader represents a mechanism for retrieving class descriptions stored on a file.";
smalltalk.addMethod("_class_category_",smalltalk.method({selector:"class:category:",category:"accessing",fn:function(a,b){this["@class"]=a;this["@category"]=b;return this},args:["aClass","aString"],source:"class: aClass category: aString\n\tclass := aClass.\n\tcategory := aString",messageSends:[],referencedClasses:[]}),smalltalk.ClassCategoryReader);
smalltalk.addMethod("_compileMethod_",smalltalk.method({selector:"compileMethod:",category:"private",fn:function(a){smalltalk.send(smalltalk.send(smalltalk.Compiler||Compiler,"_new",[]),"_install_forClass_category_",[a,this["@class"],this["@category"]]);return this},args:["aString"],source:"compileMethod: aString\n\tCompiler new install: aString forClass: class category: category",messageSends:["install:forClass:category:","new"],referencedClasses:["Compiler"]}),smalltalk.ClassCategoryReader);
smalltalk.addMethod("_initialize",smalltalk.method({selector:"initialize",category:"initialization",fn:function(){smalltalk.send(this,"_initialize",[],smalltalk.ClassCategoryReader.superclass||nil);this["@chunkParser"]=smalltalk.send(smalltalk.ChunkParser||ChunkParser,"_new",[]);return this},args:[],source:"initialize\n\tsuper initialize.\n\tchunkParser := ChunkParser new.",messageSends:["initialize","new"],referencedClasses:["ChunkParser"]}),smalltalk.ClassCategoryReader);
smalltalk.addMethod("_scanFrom_",smalltalk.method({selector:"scanFrom:",category:"fileIn",fn:function(a){var b=this,c=nil;(function(){for(;!function(){c=smalltalk.send(a,"_nextChunk",[]);return smalltalk.send(c,"_isEmpty",[])}();)smalltalk.send(b,"_compileMethod_",[c])})();smalltalk.send(smalltalk.send(smalltalk.Compiler||Compiler,"_new",[]),"_setupClass_",[b["@class"]]);return b},args:["aChunkParser"],source:"scanFrom: aChunkParser\n\t| chunk |\n\t[chunk := aChunkParser nextChunk.\n\tchunk isEmpty] whileFalse: [\n\t    self compileMethod: chunk].\n\tCompiler new setupClass: class",
messageSends:"whileFalse:,nextChunk,isEmpty,compileMethod:,setupClass:,new".split(","),referencedClasses:["Compiler"]}),smalltalk.ClassCategoryReader);smalltalk.addClass("ClassCommentReader",smalltalk.Object,["class","chunkParser"],"Kernel-Classes");smalltalk.ClassCommentReader.comment="ClassCommentReader represents a mechanism for retrieving class descriptions stored on a file.\nSee `ClassCategoryReader` too.";
smalltalk.addMethod("_class_",smalltalk.method({selector:"class:",category:"accessing",fn:function(a){this["@class"]=a;return this},args:["aClass"],source:"class: aClass\n\tclass := aClass",messageSends:[],referencedClasses:[]}),smalltalk.ClassCommentReader);
smalltalk.addMethod("_initialize",smalltalk.method({selector:"initialize",category:"initialization",fn:function(){smalltalk.send(this,"_initialize",[],smalltalk.ClassCommentReader.superclass||nil);this["@chunkParser"]=smalltalk.send(smalltalk.ChunkParser||ChunkParser,"_new",[]);return this},args:[],source:"initialize\n\tsuper initialize.\n\tchunkParser := ChunkParser new.",messageSends:["initialize","new"],referencedClasses:["ChunkParser"]}),smalltalk.ClassCommentReader);
smalltalk.addMethod("_scanFrom_",smalltalk.method({selector:"scanFrom:",category:"fileIn",fn:function(a){var b=this,c=nil,c=smalltalk.send(a,"_nextChunk",[]);($receiver=smalltalk.send(c,"_isEmpty",[])).klass===smalltalk.Boolean?!$receiver&&smalltalk.send(b,"_setComment_",[c]):smalltalk.send($receiver,"_ifFalse_",[function(){return smalltalk.send(b,"_setComment_",[c])}]);return b},args:["aChunkParser"],source:"scanFrom: aChunkParser\n\t| chunk |\n\tchunk := aChunkParser nextChunk.\n\tchunk isEmpty ifFalse: [\n\t    self setComment: chunk].",
messageSends:["nextChunk","ifFalse:","isEmpty","setComment:"],referencedClasses:[]}),smalltalk.ClassCommentReader);smalltalk.addMethod("_setComment_",smalltalk.method({selector:"setComment:",category:"private",fn:function(a){smalltalk.send(this["@class"],"_comment_",[a]);return this},args:["aString"],source:"setComment: aString\n    class comment: aString",messageSends:["comment:"],referencedClasses:[]}),smalltalk.ClassCommentReader);
smalltalk.addClass("ClassSorterNode",smalltalk.Object,["theClass","level","nodes"],"Kernel-Classes");
smalltalk.addMethod("_getNodesFrom_",smalltalk.method({selector:"getNodesFrom:",category:"accessing",fn:function(a){var b=this,c=nil,d=nil,c=[],d=[];smalltalk.send(a,"_do_",[function(a){return($receiver=smalltalk.send(smalltalk.send(a,"_superclass",[]),"__eq",[smalltalk.send(b,"_theClass",[])])).klass===smalltalk.Boolean?$receiver?smalltalk.send(c,"_add_",[a]):smalltalk.send(d,"_add_",[a]):smalltalk.send($receiver,"_ifTrue_ifFalse_",[function(){return smalltalk.send(c,"_add_",[a])},function(){return smalltalk.send(d,
"_add_",[a])}])}]);b["@nodes"]=smalltalk.send(c,"_collect_",[function(a){return smalltalk.send(smalltalk.ClassSorterNode||ClassSorterNode,"_on_classes_level_",[a,d,($receiver=smalltalk.send(b,"_level",[])).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,"__plus",[1])])}]);return b},args:["aCollection"],source:"getNodesFrom: aCollection\n\t| children others |\n\tchildren := #().\n\tothers := #().\n\taCollection do: [:each |\n\t\t(each superclass = self theClass)\n\t\t\tifTrue: [children add: each]\n\t\t\tifFalse: [others add: each]].\n\tnodes:= children collect: [:each |\n\t\tClassSorterNode on: each classes: others level: self level + 1]",
messageSends:"do:,ifTrue:ifFalse:,=,superclass,theClass,add:,collect:,on:classes:level:,+,level".split(","),referencedClasses:["ClassSorterNode"]}),smalltalk.ClassSorterNode);smalltalk.addMethod("_level",smalltalk.method({selector:"level",category:"accessing",fn:function(){return this["@level"]},args:[],source:"level\n\t^level",messageSends:[],referencedClasses:[]}),smalltalk.ClassSorterNode);
smalltalk.addMethod("_level_",smalltalk.method({selector:"level:",category:"accessing",fn:function(a){this["@level"]=a;return this},args:["anInteger"],source:"level: anInteger\n\tlevel := anInteger",messageSends:[],referencedClasses:[]}),smalltalk.ClassSorterNode);smalltalk.addMethod("_nodes",smalltalk.method({selector:"nodes",category:"accessing",fn:function(){return this["@nodes"]},args:[],source:"nodes\n\t^nodes",messageSends:[],referencedClasses:[]}),smalltalk.ClassSorterNode);
smalltalk.addMethod("_theClass",smalltalk.method({selector:"theClass",category:"accessing",fn:function(){return this["@theClass"]},args:[],source:"theClass\n\t^theClass",messageSends:[],referencedClasses:[]}),smalltalk.ClassSorterNode);smalltalk.addMethod("_theClass_",smalltalk.method({selector:"theClass:",category:"accessing",fn:function(a){this["@theClass"]=a;return this},args:["aClass"],source:"theClass: aClass\n\ttheClass := aClass",messageSends:[],referencedClasses:[]}),smalltalk.ClassSorterNode);
smalltalk.addMethod("_traverseClassesWith_",smalltalk.method({selector:"traverseClassesWith:",category:"visiting",fn:function(a){smalltalk.send(a,"_add_",[smalltalk.send(this,"_theClass",[])]);smalltalk.send(smalltalk.send(smalltalk.send(this,"_nodes",[]),"_sorted_",[function(a,c){return($receiver=smalltalk.send(smalltalk.send(a,"_theClass",[]),"_name",[])).klass===smalltalk.Number?$receiver<=smalltalk.send(smalltalk.send(c,"_theClass",[]),"_name",[]):smalltalk.send($receiver,"__lt_eq",[smalltalk.send(smalltalk.send(c,
"_theClass",[]),"_name",[])])}]),"_do_",[function(b){return smalltalk.send(b,"_traverseClassesWith_",[a])}]);return this},args:["aCollection"],source:'traverseClassesWith: aCollection\n\t"sort classes alphabetically Issue #143"\n\n\taCollection add: self theClass.\n\t(self nodes sorted: [:a :b | a theClass name <= b theClass name ]) do: [:aNode |\n\t\taNode traverseClassesWith: aCollection ].',messageSends:"add:,theClass,do:,sorted:,nodes,<=,name,traverseClassesWith:".split(","),referencedClasses:[]}),
smalltalk.ClassSorterNode);
smalltalk.addMethod("_on_classes_level_",smalltalk.method({selector:"on:classes:level:",category:"instance creation",fn:function(a,b,c){var d=smalltalk.send(this,"_new",[]);smalltalk.send(d,"_theClass_",[a]);smalltalk.send(d,"_level_",[c]);smalltalk.send(d,"_getNodesFrom_",[b]);return smalltalk.send(d,"_yourself",[])},args:["aClass","aCollection","anInteger"],source:"on: aClass classes: aCollection level: anInteger\n\t^self new\n\t\ttheClass: aClass;\n\t\tlevel: anInteger;\n\t\tgetNodesFrom: aCollection;\n\t\tyourself",messageSends:["theClass:",
"level:","getNodesFrom:","yourself","new"],referencedClasses:[]}),smalltalk.ClassSorterNode.klass);smalltalk.addPackage("Kernel-Methods",{});smalltalk.addClass("BlockClosure",smalltalk.Object,[],"Kernel-Methods");smalltalk.BlockClosure.comment="A BlockClosure is a lexical closure.\nThe JavaScript representation is a function.\n\nA BlockClosure is evaluated with the `#value*` methods in the 'evaluating' protocol.";
smalltalk.addMethod("_applyTo_arguments_",smalltalk.method({selector:"applyTo:arguments:",category:"evaluating",fn:function(a,b){return this.apply(a,b)},args:["anObject","aCollection"],source:"applyTo: anObject arguments: aCollection\n\t<return self.apply(anObject, aCollection)>",messageSends:[],referencedClasses:[]}),smalltalk.BlockClosure);
smalltalk.addMethod("_compiledSource",smalltalk.method({selector:"compiledSource",category:"accessing",fn:function(){return this.toString()},args:[],source:"compiledSource\n\t<return self.toString()>",messageSends:[],referencedClasses:[]}),smalltalk.BlockClosure);
smalltalk.addMethod("_ensure_",smalltalk.method({selector:"ensure:",category:"evaluating",fn:function(a){var b=this,c=nil,c=false;return smalltalk.send(function(){smalltalk.send(b,"_value",[]);c=true;return smalltalk.send(a,"_value",[])},"_on_do_",[smalltalk.Error||Error,function(b){($receiver=c).klass===smalltalk.Boolean?!$receiver&&smalltalk.send(a,"_value",[]):smalltalk.send($receiver,"_ifFalse_",[function(){return smalltalk.send(a,"_value",[])}]);return smalltalk.send(b,"_signal",[])}])},args:["aBlock"],
source:"ensure: aBlock\n\t| success |\n\tsuccess := false.\n\t^[self value. success := true. aBlock value]\n\t\ton: Error\n\t\tdo: [:ex |\n\t\t\tsuccess ifFalse: [aBlock value].\n\t\t\tex signal]",messageSends:["on:do:","value","ifFalse:","signal"],referencedClasses:["Error"]}),smalltalk.BlockClosure);
smalltalk.addMethod("_new",smalltalk.method({selector:"new",category:"evaluating",fn:function(){return new this},args:[],source:'new\n\t"Use the receiver as a JS constructor. \n\t*Do not* use this method to instanciate Smalltalk objects!"\n\t<return new self()>',messageSends:[],referencedClasses:[]}),smalltalk.BlockClosure);
smalltalk.addMethod("_newValue_",smalltalk.method({selector:"newValue:",category:"evaluating",fn:function(a){return new this(a)},args:["anObject"],source:'newValue: anObject\n\t"Use the receiver as a JS constructor. \n\t*Do not* use this method to instanciate Smalltalk objects!"\n\t<return new self(anObject)>',messageSends:[],referencedClasses:[]}),smalltalk.BlockClosure);
smalltalk.addMethod("_newValue_value_",smalltalk.method({selector:"newValue:value:",category:"evaluating",fn:function(a,b){return new this(a,b)},args:["anObject","anObject2"],source:'newValue:  anObject value: anObject2\n\t"Use the receiver as a JS constructor. \n\t*Do not* use this method to instanciate Smalltalk objects!"\n\t<return new self(anObject, anObject2)>',messageSends:[],referencedClasses:[]}),smalltalk.BlockClosure);
smalltalk.addMethod("_newValue_value_value_",smalltalk.method({selector:"newValue:value:value:",category:"evaluating",fn:function(a,b){return new this(a,b)},args:["anObject","anObject2","anObject3"],source:'newValue:  anObject value: anObject2 value: anObject3\n\t"Use the receiver as a JS constructor. \n\t*Do not* use this method to instanciate Smalltalk objects!"\n\t<return new self(anObject, anObject2)>',messageSends:[],referencedClasses:[]}),smalltalk.BlockClosure);
smalltalk.addMethod("_numArgs",smalltalk.method({selector:"numArgs",category:"accessing",fn:function(){return this.length},args:[],source:"numArgs\n\t<return self.length>",messageSends:[],referencedClasses:[]}),smalltalk.BlockClosure);
smalltalk.addMethod("_on_do_",smalltalk.method({selector:"on:do:",category:"error handling",fn:function(a,b){return smalltalk.send(this,"_try_catch_",[this,function(c){return($receiver=smalltalk.send(c,"_isKindOf_",[a])).klass===smalltalk.Boolean?$receiver?smalltalk.send(b,"_value_",[c]):smalltalk.send(c,"_signal",[]):smalltalk.send($receiver,"_ifTrue_ifFalse_",[function(){return smalltalk.send(b,"_value_",[c])},function(){return smalltalk.send(c,"_signal",[])}])}])},args:["anErrorClass","aBlock"],
source:"on: anErrorClass do: aBlock\n\t^self try: self catch: [:error |\n\t    (error isKindOf: anErrorClass) \n\t     ifTrue: [aBlock value: error]\n\t     ifFalse: [error signal]]",messageSends:["try:catch:","ifTrue:ifFalse:","isKindOf:","value:","signal"],referencedClasses:[]}),smalltalk.BlockClosure);
smalltalk.addMethod("_timeToRun",smalltalk.method({selector:"timeToRun",category:"evaluating",fn:function(){return smalltalk.send(smalltalk.Date||Date,"_millisecondsToRun_",[this])},args:[],source:'timeToRun\n\t"Answer the number of milliseconds taken to execute this block."\n\n\t^ Date millisecondsToRun: self',messageSends:["millisecondsToRun:"],referencedClasses:["Date"]}),smalltalk.BlockClosure);
smalltalk.addMethod("_value",smalltalk.method({selector:"value",category:"evaluating",fn:function(){return this()},args:[],source:'value\n\t"inlined in the Compiler"\n\t<return self();>',messageSends:[],referencedClasses:[]}),smalltalk.BlockClosure);smalltalk.addMethod("_value_",smalltalk.method({selector:"value:",category:"evaluating",fn:function(a){return this(a)},args:["anArg"],source:'value: anArg\n\t"inlined in the Compiler"\n\t<return self(anArg);>',messageSends:[],referencedClasses:[]}),smalltalk.BlockClosure);
smalltalk.addMethod("_value_value_",smalltalk.method({selector:"value:value:",category:"evaluating",fn:function(a,b){return this(a,b)},args:["firstArg","secondArg"],source:'value: firstArg value: secondArg\n\t"inlined in the Compiler"\n\t<return self(firstArg, secondArg);>',messageSends:[],referencedClasses:[]}),smalltalk.BlockClosure);
smalltalk.addMethod("_value_value_value_",smalltalk.method({selector:"value:value:value:",category:"evaluating",fn:function(a,b,c){return this(a,b,c)},args:["firstArg","secondArg","thirdArg"],source:'value: firstArg value: secondArg value: thirdArg\n\t"inlined in the Compiler"\n\t<return self(firstArg, secondArg, thirdArg);>',messageSends:[],referencedClasses:[]}),smalltalk.BlockClosure);
smalltalk.addMethod("_valueWithInterval_",smalltalk.method({selector:"valueWithInterval:",category:"timeout/interval",fn:function(a){return setInterval(this,a)},args:["aNumber"],source:"valueWithInterval: aNumber\n\t<return setInterval(self, aNumber)>",messageSends:[],referencedClasses:[]}),smalltalk.BlockClosure);
smalltalk.addMethod("_valueWithPossibleArguments_",smalltalk.method({selector:"valueWithPossibleArguments:",category:"evaluating",fn:function(a){return this.apply(null,a)},args:["aCollection"],source:"valueWithPossibleArguments: aCollection\n\t<return self.apply(null, aCollection);>",messageSends:[],referencedClasses:[]}),smalltalk.BlockClosure);
smalltalk.addMethod("_valueWithTimeout_",smalltalk.method({selector:"valueWithTimeout:",category:"timeout/interval",fn:function(a){return setTimeout(this,a)},args:["aNumber"],source:"valueWithTimeout: aNumber\n\t<return setTimeout(self, aNumber)>",messageSends:[],referencedClasses:[]}),smalltalk.BlockClosure);
smalltalk.addMethod("_whileFalse",smalltalk.method({selector:"whileFalse",category:"controlling",fn:function(){smalltalk.send(this,"_whileFalse_",[function(){return nil}]);return this},args:[],source:'whileFalse\n\t"inlined in the Compiler"\n\tself whileFalse: []',messageSends:["whileFalse:"],referencedClasses:[]}),smalltalk.BlockClosure);
smalltalk.addMethod("_whileFalse_",smalltalk.method({selector:"whileFalse:",category:"controlling",fn:function(a){for(;!this();)a();return this},args:["aBlock"],source:'whileFalse: aBlock\n\t"inlined in the Compiler"\n\t<while(!self()) {aBlock()}>',messageSends:[],referencedClasses:[]}),smalltalk.BlockClosure);
smalltalk.addMethod("_whileTrue",smalltalk.method({selector:"whileTrue",category:"controlling",fn:function(){smalltalk.send(this,"_whileTrue_",[function(){return nil}]);return this},args:[],source:'whileTrue\n\t"inlined in the Compiler"\n\tself whileTrue: []',messageSends:["whileTrue:"],referencedClasses:[]}),smalltalk.BlockClosure);
smalltalk.addMethod("_whileTrue_",smalltalk.method({selector:"whileTrue:",category:"controlling",fn:function(a){for(;this();)a();return this},args:["aBlock"],source:'whileTrue: aBlock\n\t"inlined in the Compiler"\n\t<while(self()) {aBlock()}>',messageSends:[],referencedClasses:[]}),smalltalk.BlockClosure);smalltalk.addClass("CompiledMethod",smalltalk.Object,[],"Kernel-Methods");smalltalk.CompiledMethod.comment="CompiledMethod hold the source and compiled code of a class method.\n\nYou can get a CompiledMethod using `Behavior>>methodAt:`\n\n\tString methodAt: 'lines'\n\nand read the source code\n\n\t(String methodAt: 'lines') source\n\nSee referenced classes:\n\n\t(String methodAt: 'lines') referencedClasses\n\nor messages sent from this method:\n\t\n\t(String methodAt: 'lines')  messageSends";
smalltalk.addMethod("_arguments",smalltalk.method({selector:"arguments",category:"accessing",fn:function(){return this.args||[]},args:[],source:"arguments\n\t<return self.args || []>",messageSends:[],referencedClasses:[]}),smalltalk.CompiledMethod);
smalltalk.addMethod("_category",smalltalk.method({selector:"category",category:"accessing",fn:function(){return($receiver=smalltalk.send(this,"_basicAt_",["category"]))==nil||$receiver==void 0?"":$receiver},args:[],source:"category\n\t^(self basicAt: 'category') ifNil: ['']",messageSends:["ifNil:","basicAt:"],referencedClasses:[]}),smalltalk.CompiledMethod);
smalltalk.addMethod("_category_",smalltalk.method({selector:"category:",category:"accessing",fn:function(a){smalltalk.send(this,"_basicAt_put_",["category",a]);return this},args:["aString"],source:"category: aString\n\tself basicAt: 'category' put: aString",messageSends:["basicAt:put:"],referencedClasses:[]}),smalltalk.CompiledMethod);
smalltalk.addMethod("_fn",smalltalk.method({selector:"fn",category:"accessing",fn:function(){return smalltalk.send(this,"_basicAt_",["fn"])},args:[],source:"fn\n\t^self basicAt: 'fn'",messageSends:["basicAt:"],referencedClasses:[]}),smalltalk.CompiledMethod);
smalltalk.addMethod("_fn_",smalltalk.method({selector:"fn:",category:"accessing",fn:function(a){smalltalk.send(this,"_basicAt_put_",["fn",a]);return this},args:["aBlock"],source:"fn: aBlock\n\tself basicAt: 'fn' put: aBlock",messageSends:["basicAt:put:"],referencedClasses:[]}),smalltalk.CompiledMethod);
smalltalk.addMethod("_messageSends",smalltalk.method({selector:"messageSends",category:"accessing",fn:function(){return smalltalk.send(this,"_basicAt_",["messageSends"])},args:[],source:"messageSends\n\t^self basicAt: 'messageSends'",messageSends:["basicAt:"],referencedClasses:[]}),smalltalk.CompiledMethod);
smalltalk.addMethod("_methodClass",smalltalk.method({selector:"methodClass",category:"accessing",fn:function(){return smalltalk.send(this,"_basicAt_",["methodClass"])},args:[],source:"methodClass\n\t^self basicAt: 'methodClass'",messageSends:["basicAt:"],referencedClasses:[]}),smalltalk.CompiledMethod);
smalltalk.addMethod("_referencedClasses",smalltalk.method({selector:"referencedClasses",category:"accessing",fn:function(){return smalltalk.send(this,"_basicAt_",["referencedClasses"])},args:[],source:"referencedClasses\n\t^self basicAt: 'referencedClasses'",messageSends:["basicAt:"],referencedClasses:[]}),smalltalk.CompiledMethod);
smalltalk.addMethod("_selector",smalltalk.method({selector:"selector",category:"accessing",fn:function(){return smalltalk.send(this,"_basicAt_",["selector"])},args:[],source:"selector\n\t^self basicAt: 'selector'",messageSends:["basicAt:"],referencedClasses:[]}),smalltalk.CompiledMethod);
smalltalk.addMethod("_selector_",smalltalk.method({selector:"selector:",category:"accessing",fn:function(a){smalltalk.send(this,"_basicAt_put_",["selector",a]);return this},args:["aString"],source:"selector: aString\n\tself basicAt: 'selector' put: aString",messageSends:["basicAt:put:"],referencedClasses:[]}),smalltalk.CompiledMethod);
smalltalk.addMethod("_source",smalltalk.method({selector:"source",category:"accessing",fn:function(){return($receiver=smalltalk.send(this,"_basicAt_",["source"]))==nil||$receiver==void 0?"":$receiver},args:[],source:"source\n\t^(self basicAt: 'source') ifNil: ['']",messageSends:["ifNil:","basicAt:"],referencedClasses:[]}),smalltalk.CompiledMethod);
smalltalk.addMethod("_source_",smalltalk.method({selector:"source:",category:"accessing",fn:function(a){smalltalk.send(this,"_basicAt_put_",["source",a]);return this},args:["aString"],source:"source: aString\n\tself basicAt: 'source' put: aString",messageSends:["basicAt:put:"],referencedClasses:[]}),smalltalk.CompiledMethod);smalltalk.addClass("Message",smalltalk.Object,["selector","arguments"],"Kernel-Methods");smalltalk.Message.comment="Generally, the system does not use instances of Message for efficiency reasons.\nHowever, when a message is not understood by its receiver, the interpreter will make up an instance of it in order to capture the information involved in an actual message transmission. \nThis instance is sent it as an argument with the message `doesNotUnderstand:` to the receiver.\n\nSee boot.js, `messageNotUnderstood`  and its counterpart `Object>>doesNotUnderstand:`";
smalltalk.addMethod("_arguments",smalltalk.method({selector:"arguments",category:"accessing",fn:function(){return this["@arguments"]},args:[],source:"arguments\n\t^arguments",messageSends:[],referencedClasses:[]}),smalltalk.Message);smalltalk.addMethod("_arguments_",smalltalk.method({selector:"arguments:",category:"accessing",fn:function(a){this["@arguments"]=a;return this},args:["anArray"],source:"arguments: anArray\n\targuments := anArray",messageSends:[],referencedClasses:[]}),smalltalk.Message);
smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"printing",fn:function(){var a=this;return smalltalk.send(smalltalk.String||String,"_streamContents_",[function(b){smalltalk.send(b,"_nextPutAll_",[smalltalk.send(a,"_printString",[],smalltalk.Message.superclass||nil)]);smalltalk.send(b,"_nextPutAll_",["("]);smalltalk.send(b,"_nextPutAll_",[a["@selector"]]);return smalltalk.send(b,"_nextPutAll_",[")"])}])},args:[],source:"printString\n\t^ String streamContents: [:aStream|  \n                                  \t\t\t\taStream \n                                  \t\t\t\t\tnextPutAll: super printString;\n                                  \t\t\t\t\tnextPutAll: '(';\n                                  \t\t\t\t\tnextPutAll: selector;\n                                  \t\t\t\t\tnextPutAll: ')' \t\t\t\t]",
messageSends:["streamContents:","nextPutAll:","printString"],referencedClasses:["String"]}),smalltalk.Message);smalltalk.addMethod("_selector",smalltalk.method({selector:"selector",category:"accessing",fn:function(){return this["@selector"]},args:[],source:"selector\n\t^selector",messageSends:[],referencedClasses:[]}),smalltalk.Message);
smalltalk.addMethod("_selector_",smalltalk.method({selector:"selector:",category:"accessing",fn:function(a){this["@selector"]=a;return this},args:["aString"],source:"selector: aString\n\tselector := aString",messageSends:[],referencedClasses:[]}),smalltalk.Message);
smalltalk.addMethod("_sendTo_",smalltalk.method({selector:"sendTo:",category:"printing",fn:function(a){smalltalk.send(smalltalk.send(smalltalk.Smalltalk||Smalltalk,"_current",[]),"_send_to_arguments_",[smalltalk.send(this,"_selector",[]),a,smalltalk.send(this,"_arguments",[])]);return this},args:["anObject"],source:"sendTo: anObject\n\tSmalltalk current send: self selector to: anObject arguments: self arguments",messageSends:["send:to:arguments:","current","selector","arguments"],referencedClasses:["Smalltalk"]}),
smalltalk.Message);
smalltalk.addMethod("_selector_arguments_",smalltalk.method({selector:"selector:arguments:",category:"instance creation",fn:function(a,b){var c=smalltalk.send(this,"_new",[]);smalltalk.send(c,"_selector_",[a]);smalltalk.send(c,"_arguments_",[b]);return smalltalk.send(c,"_yourself",[])},args:["aString","anArray"],source:"selector: aString arguments: anArray\n\t^self new\n\t\tselector: aString;\n\t\targuments: anArray;\n\t\tyourself",messageSends:["selector:","arguments:","yourself","new"],referencedClasses:[]}),
smalltalk.Message.klass);smalltalk.addClass("MethodContext",smalltalk.Object,[],"Kernel-Methods");smalltalk.MethodContext.comment="MethodContext holds all the dynamic state associated with the execution of either a method activation resulting from a message send. That is used to build the call stack while debugging.\n  \nMethodContext instances are JavaScript `SmalltalkMethodContext` objects defined in boot.js \n\nCurrent limitation: MethodContext instances are not created on Block evaluation. That means it's actually impossible to debug inside a Block.";
smalltalk.addMethod("_asString",smalltalk.method({selector:"asString",category:"accessing",fn:function(){return smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.send(this,"_receiver",[]),"_class",[]),"_printString",[]),"__comma",[" >> "]),"__comma",[smalltalk.send(this,"_selector",[])])},args:[],source:"asString\n\t^self receiver class printString, ' >> ', self selector",messageSends:[",","printString","class","receiver","selector"],referencedClasses:[]}),smalltalk.MethodContext);
smalltalk.addMethod("_home",smalltalk.method({selector:"home",category:"accessing",fn:function(){return this.homeContext},args:[],source:"home\n\t<return self.homeContext>",messageSends:[],referencedClasses:[]}),smalltalk.MethodContext);
smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"accessing",fn:function(){return smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.send(this,"_printString",[],smalltalk.MethodContext.superclass||nil),"__comma",["("]),"__comma",[smalltalk.send(this,"_asString",[])]),"__comma",[")"])},args:[],source:"printString\n\t^super printString, '(', self asString, ')'",messageSends:[",","printString","asString"],referencedClasses:[]}),smalltalk.MethodContext);
smalltalk.addMethod("_receiver",smalltalk.method({selector:"receiver",category:"accessing",fn:function(){return this.receiver},args:[],source:"receiver\n\t<return self.receiver>",messageSends:[],referencedClasses:[]}),smalltalk.MethodContext);
smalltalk.addMethod("_selector",smalltalk.method({selector:"selector",category:"accessing",fn:function(){return smalltalk.convertSelector(this.selector)},args:[],source:"selector\n\t<return smalltalk.convertSelector(self.selector)>",messageSends:[],referencedClasses:[]}),smalltalk.MethodContext);smalltalk.addMethod("_temps",smalltalk.method({selector:"temps",category:"accessing",fn:function(){return this.temps},args:[],source:"temps\n\t<return self.temps>",messageSends:[],referencedClasses:[]}),smalltalk.MethodContext);
smalltalk.addPackage("Kernel-Collections",{});smalltalk.addClass("Association",smalltalk.Object,["key","value"],"Kernel-Collections");
smalltalk.addMethod("__eq",smalltalk.method({selector:"=",category:"comparing",fn:function(a){var b=this;return smalltalk.send(smalltalk.send(smalltalk.send(b,"_class",[]),"__eq",[smalltalk.send(a,"_class",[])]),"_and_",[function(){return smalltalk.send(smalltalk.send(smalltalk.send(b,"_key",[]),"__eq",[smalltalk.send(a,"_key",[])]),"_and_",[function(){return smalltalk.send(smalltalk.send(b,"_value",[]),"__eq",[smalltalk.send(a,"_value",[])])}])}])},args:["anAssociation"],source:"= anAssociation\n\t^self class = anAssociation class and: [\n\t    self key = anAssociation key and: [\n\t\tself value = anAssociation value]]",
messageSends:["and:","=","class","key","value"],referencedClasses:[]}),smalltalk.Association);smalltalk.addMethod("_key",smalltalk.method({selector:"key",category:"accessing",fn:function(){return this["@key"]},args:[],source:"key\n\t^key",messageSends:[],referencedClasses:[]}),smalltalk.Association);
smalltalk.addMethod("_key_",smalltalk.method({selector:"key:",category:"accessing",fn:function(a){this["@key"]=a;return this},args:["aKey"],source:"key: aKey\n\tkey := aKey",messageSends:[],referencedClasses:[]}),smalltalk.Association);
smalltalk.addMethod("_storeOn_",smalltalk.method({selector:"storeOn:",category:"comparing",fn:function(a){smalltalk.send(this["@key"],"_storeOn_",[a]);smalltalk.send(a,"_nextPutAll_",["->"]);smalltalk.send(this["@value"],"_storeOn_",[a]);return this},args:["aStream"],source:"storeOn: aStream\n\t\"Store in the format (key->value)\"\n\n\t\"aStream nextPutAll: '('.\"\n\tkey storeOn: aStream.\n\taStream nextPutAll: '->'.\n\tvalue storeOn: aStream.\n\t\"aStream nextPutAll: ')'\"",messageSends:["storeOn:",
"nextPutAll:"],referencedClasses:[]}),smalltalk.Association);smalltalk.addMethod("_value",smalltalk.method({selector:"value",category:"accessing",fn:function(){return this["@value"]},args:[],source:"value\n\t^value",messageSends:[],referencedClasses:[]}),smalltalk.Association);
smalltalk.addMethod("_value_",smalltalk.method({selector:"value:",category:"accessing",fn:function(a){this["@value"]=a;return this},args:["aValue"],source:"value: aValue\n\tvalue := aValue",messageSends:[],referencedClasses:[]}),smalltalk.Association);
smalltalk.addMethod("_key_value_",smalltalk.method({selector:"key:value:",category:"instance creation",fn:function(a,b){var c=smalltalk.send(this,"_new",[]);smalltalk.send(c,"_key_",[a]);smalltalk.send(c,"_value_",[b]);return smalltalk.send(c,"_yourself",[])},args:["aKey","aValue"],source:"key: aKey value: aValue\n\t    ^self new\n\t\tkey: aKey;\n\t\tvalue: aValue;\n\t\tyourself",messageSends:["key:","value:","yourself","new"],referencedClasses:[]}),smalltalk.Association.klass);
smalltalk.addClass("Collection",smalltalk.Object,[],"Kernel-Collections");smalltalk.addMethod("__comma",smalltalk.method({selector:",",category:"copying",fn:function(a){var b=smalltalk.send(this,"_copy",[]);smalltalk.send(b,"_addAll_",[a]);return smalltalk.send(b,"_yourself",[])},args:["aCollection"],source:", aCollection\n\t^self copy \n\t    addAll: aCollection; \n\t    yourself",messageSends:["addAll:","yourself","copy"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_add_",smalltalk.method({selector:"add:",category:"adding/removing",fn:function(){smalltalk.send(this,"_subclassResponsibility",[]);return this},args:["anObject"],source:"add: anObject\n\tself subclassResponsibility",messageSends:["subclassResponsibility"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_addAll_",smalltalk.method({selector:"addAll:",category:"adding/removing",fn:function(a){var b=this;smalltalk.send(a,"_do_",[function(a){return smalltalk.send(b,"_add_",[a])}]);return a},args:["aCollection"],source:"addAll: aCollection\n\taCollection do: [:each |\n\t    self add: each].\n\t^aCollection",messageSends:["do:","add:"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_asArray",smalltalk.method({selector:"asArray",category:"converting",fn:function(){return smalltalk.send(smalltalk.Array||Array,"_withAll_",[this])},args:[],source:"asArray\n\t^Array withAll: self",messageSends:["withAll:"],referencedClasses:["Array"]}),smalltalk.Collection);
smalltalk.addMethod("_asJSON",smalltalk.method({selector:"asJSON",category:"converting",fn:function(){return smalltalk.send(smalltalk.send(this,"_asArray",[]),"_collect_",[function(a){return smalltalk.send(a,"_asJSON",[])}])},args:[],source:"asJSON\n\t^self asArray collect: [:each | each asJSON]",messageSends:["collect:","asArray","asJSON"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_asOrderedCollection",smalltalk.method({selector:"asOrderedCollection",category:"converting",fn:function(){return smalltalk.send(this,"_asArray",[])},args:[],source:"asOrderedCollection\n\t^self asArray",messageSends:["asArray"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_asSet",smalltalk.method({selector:"asSet",category:"converting",fn:function(){return smalltalk.send(smalltalk.Set||Set,"_withAll_",[this])},args:[],source:"asSet\n\t^Set withAll: self",messageSends:["withAll:"],referencedClasses:["Set"]}),smalltalk.Collection);
smalltalk.addMethod("_collect_",smalltalk.method({selector:"collect:",category:"enumerating",fn:function(a){var b=nil,b=smalltalk.send(smalltalk.send(this,"_class",[]),"_new",[]);smalltalk.send(this,"_do_",[function(c){return smalltalk.send(b,"_add_",[smalltalk.send(a,"_value_",[c])])}]);return b},args:["aBlock"],source:"collect: aBlock\n\t| newCollection |\n\tnewCollection := self class new.\n\tself do: [:each |\n\t    newCollection add: (aBlock value: each)].\n\t^newCollection",messageSends:["new",
"class","do:","add:","value:"],referencedClasses:[]}),smalltalk.Collection);smalltalk.addMethod("_copyWith_",smalltalk.method({selector:"copyWith:",category:"copying",fn:function(a){var b=smalltalk.send(this,"_copy",[]);smalltalk.send(b,"_add_",[a]);return smalltalk.send(b,"_yourself",[])},args:["anObject"],source:"copyWith: anObject\n\t^self copy add: anObject; yourself",messageSends:["add:","yourself","copy"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_copyWithAll_",smalltalk.method({selector:"copyWithAll:",category:"copying",fn:function(a){var b=smalltalk.send(this,"_copy",[]);smalltalk.send(b,"_addAll_",[a]);return smalltalk.send(b,"_yourself",[])},args:["aCollection"],source:"copyWithAll: aCollection\n\t^self copy addAll: aCollection; yourself",messageSends:["addAll:","yourself","copy"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_copyWithoutAll_",smalltalk.method({selector:"copyWithoutAll:",category:"copying",fn:function(a){return smalltalk.send(this,"_reject_",[function(b){return smalltalk.send(a,"_includes_",[b])}])},args:["aCollection"],source:'copyWithoutAll: aCollection\n\t"Answer a copy of the receiver that does not contain any elements \n\tequal to those in aCollection."\n\n\t^ self reject: [:each | aCollection includes: each]',messageSends:["reject:","includes:"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_detect_",smalltalk.method({selector:"detect:",category:"enumerating",fn:function(a){var b=this;return smalltalk.send(b,"_detect_ifNone_",[a,function(){return smalltalk.send(b,"_errorNotFound",[])}])},args:["aBlock"],source:"detect: aBlock\n\t^self detect: aBlock ifNone: [self errorNotFound]",messageSends:["detect:ifNone:","errorNotFound"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_detect_ifNone_",smalltalk.method({selector:"detect:ifNone:",category:"enumerating",fn:function(a,b){for(var c=0;c<this.length;c++)if(a(this[c]))return this[c];return b()},args:["aBlock","anotherBlock"],source:"detect: aBlock ifNone: anotherBlock\n\t<\n\t\tfor(var i = 0; i < self.length; i++)\n\t\t\tif(aBlock(self[i]))\n\t\t\t\treturn self[i];\n\t\treturn anotherBlock();\n\t>",messageSends:[],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_do_",smalltalk.method({selector:"do:",category:"enumerating",fn:function(a){for(var b=0;b<this.length;b++)a(this[b]);return this},args:["aBlock"],source:"do: aBlock\n\t<for(var i=0;i<self.length;i++){aBlock(self[i]);}>",messageSends:[],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_do_separatedBy_",smalltalk.method({selector:"do:separatedBy:",category:"enumerating",fn:function(a,b){var c=nil,c=true;smalltalk.send(this,"_do_",[function(d){($receiver=c).klass===smalltalk.Boolean?$receiver?c=false:smalltalk.send(b,"_value",[]):smalltalk.send($receiver,"_ifTrue_ifFalse_",[function(){return c=false},function(){return smalltalk.send(b,"_value",[])}]);return smalltalk.send(a,"_value_",[d])}]);return this},args:["aBlock","anotherBlock"],source:"do: aBlock separatedBy: anotherBlock\n\t| first |\n\tfirst := true.\n\tself do: [:each |\n\t    first\n\t\tifTrue: [first := false]\n\t\tifFalse: [anotherBlock value].\n\t    aBlock value: each]",
messageSends:["do:","ifTrue:ifFalse:","value","value:"],referencedClasses:[]}),smalltalk.Collection);smalltalk.addMethod("_errorNotFound",smalltalk.method({selector:"errorNotFound",category:"error handling",fn:function(){smalltalk.send(this,"_error_",["Object is not in the collection"]);return this},args:[],source:"errorNotFound\n\tself error: 'Object is not in the collection'",messageSends:["error:"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_ifEmpty_",smalltalk.method({selector:"ifEmpty:",category:"testing",fn:function(a){var b=this;return($receiver=smalltalk.send(b,"_isEmpty",[])).klass===smalltalk.Boolean?$receiver?smalltalk.send(a,"_value",[]):b:smalltalk.send($receiver,"_ifTrue_ifFalse_",[function(){return smalltalk.send(a,"_value",[])},function(){return b}])},args:["aBlock"],source:"ifEmpty: aBlock\n\t\"Evaluate the given block with the receiver as argument, answering its value if the receiver is empty, otherwise answer the receiver. Note that the fact that this method returns its argument in case the receiver is not empty allows one to write expressions like the following ones: self classifyMethodAs: \n\t\t(myProtocol ifEmpty: ['As yet unclassified'])\"\n\t^ self isEmpty \n\t\tifTrue: [ aBlock value ]\n\t\tifFalse: [ self ]",
messageSends:["ifTrue:ifFalse:","isEmpty","value"],referencedClasses:[]}),smalltalk.Collection);smalltalk.addMethod("_ifNotEmpty_",smalltalk.method({selector:"ifNotEmpty:",category:"testing",fn:function(a){smalltalk.send(smalltalk.send(this,"_notEmpty",[]),"_ifTrue_",[a]);return this},args:["aBlock"],source:"ifNotEmpty: aBlock\n\tself notEmpty ifTrue: aBlock.",messageSends:["ifTrue:","notEmpty"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_includes_",smalltalk.method({selector:"includes:",category:"testing",fn:function(a){for(var b=this.length;b--;)if(smalltalk.send(this[b],"__eq",[a]))return true;return false},args:["anObject"],source:'includes: anObject\n\t<\n\t\tvar i = self.length;\n\t\twhile (i--) {\n\t\t\tif (smalltalk.send(self[i], "__eq", [anObject])) {return true;}\t\n\t\t}\n\t\treturn false\n\t>',messageSends:[],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_inject_into_",smalltalk.method({selector:"inject:into:",category:"enumerating",fn:function(a,b){var c=nil,c=a;smalltalk.send(this,"_do_",[function(a){return c=smalltalk.send(b,"_value_value_",[c,a])}]);return c},args:["anObject","aBlock"],source:"inject: anObject into: aBlock\n\t| result |\n\tresult := anObject.\n\tself do: [:each | \n\t    result := aBlock value: result value: each].\n\t^result",messageSends:["do:","value:value:"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_isEmpty",smalltalk.method({selector:"isEmpty",category:"testing",fn:function(){return smalltalk.send(smalltalk.send(this,"_size",[]),"__eq",[0])},args:[],source:"isEmpty\n\t^self size = 0",messageSends:["=","size"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_notEmpty",smalltalk.method({selector:"notEmpty",category:"testing",fn:function(){return smalltalk.send(smalltalk.send(this,"_isEmpty",[]),"_not",[])},args:[],source:"notEmpty\n\t^self isEmpty not",messageSends:["not","isEmpty"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_readStream",smalltalk.method({selector:"readStream",category:"accessing",fn:function(){return smalltalk.send(this,"_stream",[])},args:[],source:"readStream\n\t^self stream",messageSends:["stream"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_reject_",smalltalk.method({selector:"reject:",category:"enumerating",fn:function(a){return smalltalk.send(this,"_select_",[function(b){return smalltalk.send(smalltalk.send(a,"_value_",[b]),"__eq",[false])}])},args:["aBlock"],source:"reject: aBlock\n\t^self select: [:each | (aBlock value: each) = false]",messageSends:["select:","=","value:"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_remove_",smalltalk.method({selector:"remove:",category:"adding/removing",fn:function(a){var b=this;return smalltalk.send(b,"_remove_ifAbsent_",[a,function(){return smalltalk.send(b,"_errorNotFound",[])}])},args:["anObject"],source:"remove: anObject\n    ^self remove: anObject ifAbsent: [self errorNotFound]",messageSends:["remove:ifAbsent:","errorNotFound"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_remove_ifAbsent_",smalltalk.method({selector:"remove:ifAbsent:",category:"adding/removing",fn:function(){smalltalk.send(this,"_subclassResponsibility",[]);return this},args:["anObject","aBlock"],source:"remove: anObject ifAbsent: aBlock\n    self subclassResponsibility",messageSends:["subclassResponsibility"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_select_",smalltalk.method({selector:"select:",category:"enumerating",fn:function(a){var b=nil,b=smalltalk.send(smalltalk.send(smalltalk.send(this,"_class",[]),"_new",[]),"_writeStream",[]);smalltalk.send(this,"_do_",[function(c){return($receiver=smalltalk.send(a,"_value_",[c])).klass===smalltalk.Boolean?$receiver?smalltalk.send(b,"_nextPut_",[c]):nil:smalltalk.send($receiver,"_ifTrue_",[function(){return smalltalk.send(b,"_nextPut_",[c])}])}]);return smalltalk.send(b,"_contents",
[])},args:["aBlock"],source:"select: aBlock\n\t| stream |\n\tstream := self class new writeStream.\n\tself do: [:each |\n\t    (aBlock value: each) ifTrue: [\n\t\tstream nextPut: each]].\n\t^stream contents",messageSends:"writeStream,new,class,do:,ifTrue:,value:,nextPut:,contents".split(","),referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_size",smalltalk.method({selector:"size",category:"accessing",fn:function(){smalltalk.send(this,"_subclassResponsibility",[]);return this},args:[],source:"size\n\tself subclassResponsibility",messageSends:["subclassResponsibility"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_stream",smalltalk.method({selector:"stream",category:"accessing",fn:function(){return smalltalk.send(smalltalk.send(this,"_streamClass",[]),"_on_",[this])},args:[],source:"stream\n\t^self streamClass on: self",messageSends:["on:","streamClass"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_streamClass",smalltalk.method({selector:"streamClass",category:"accessing",fn:function(){return smalltalk.send(smalltalk.send(this,"_class",[]),"_streamClass",[])},args:[],source:"streamClass\n\t^self class streamClass",messageSends:["streamClass","class"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_writeStream",smalltalk.method({selector:"writeStream",category:"accessing",fn:function(){return smalltalk.send(this,"_stream",[])},args:[],source:"writeStream\n\t^self stream",messageSends:["stream"],referencedClasses:[]}),smalltalk.Collection);
smalltalk.addMethod("_new_",smalltalk.method({selector:"new:",category:"instance creation",fn:function(){return smalltalk.send(this,"_new",[])},args:["anInteger"],source:"new: anInteger\n\t^self new",messageSends:["new"],referencedClasses:[]}),smalltalk.Collection.klass);
smalltalk.addMethod("_streamClass",smalltalk.method({selector:"streamClass",category:"accessing",fn:function(){return smalltalk.Stream||Stream},args:[],source:"streamClass\n\t    ^Stream",messageSends:[],referencedClasses:["Stream"]}),smalltalk.Collection.klass);
smalltalk.addMethod("_with_",smalltalk.method({selector:"with:",category:"instance creation",fn:function(a){var b=smalltalk.send(this,"_new",[]);smalltalk.send(b,"_add_",[a]);return smalltalk.send(b,"_yourself",[])},args:["anObject"],source:"with: anObject\n\t    ^self new\n\t\tadd: anObject;\n\t\tyourself",messageSends:["add:","yourself","new"],referencedClasses:[]}),smalltalk.Collection.klass);
smalltalk.addMethod("_with_with_",smalltalk.method({selector:"with:with:",category:"instance creation",fn:function(a,b){var c=smalltalk.send(this,"_new",[]);smalltalk.send(c,"_add_",[a]);smalltalk.send(c,"_add_",[b]);return smalltalk.send(c,"_yourself",[])},args:["anObject","anotherObject"],source:"with: anObject with: anotherObject\n\t    ^self new\n\t\tadd: anObject;\n\t\tadd: anotherObject;\n\t\tyourself",messageSends:["add:","yourself","new"],referencedClasses:[]}),smalltalk.Collection.klass);
smalltalk.addMethod("_with_with_with_",smalltalk.method({selector:"with:with:with:",category:"instance creation",fn:function(a,b,c){var d=smalltalk.send(this,"_new",[]);smalltalk.send(d,"_add_",[a]);smalltalk.send(d,"_add_",[b]);smalltalk.send(d,"_add_",[c]);return smalltalk.send(d,"_yourself",[])},args:["firstObject","secondObject","thirdObject"],source:"with: firstObject with: secondObject with: thirdObject\n\t    ^self new\n\t\tadd: firstObject;\n\t\tadd: secondObject;\n\t\tadd: thirdObject;\n\t\tyourself",
messageSends:["add:","yourself","new"],referencedClasses:[]}),smalltalk.Collection.klass);smalltalk.addMethod("_withAll_",smalltalk.method({selector:"withAll:",category:"instance creation",fn:function(a){var b=smalltalk.send(this,"_new",[]);smalltalk.send(b,"_addAll_",[a]);return smalltalk.send(b,"_yourself",[])},args:["aCollection"],source:"withAll: aCollection\n\t    ^self new\n\t\taddAll: aCollection;\n\t\tyourself",messageSends:["addAll:","yourself","new"],referencedClasses:[]}),smalltalk.Collection.klass);
smalltalk.addClass("HashedCollection",smalltalk.Collection,[],"Kernel-Collections");smalltalk.HashedCollection.comment="A HashedCollection is a traditional JavaScript object, or a Smalltalk Dictionary.\n\nUnlike a Dictionary, it can only have strings as keys.";
smalltalk.addMethod("__comma",smalltalk.method({selector:",",category:"copying",fn:function(){smalltalk.send(this,"_shouldNotImplement",[]);return this},args:["aCollection"],source:", aCollection\n\tself shouldNotImplement",messageSends:["shouldNotImplement"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("__eq",smalltalk.method({selector:"=",category:"comparing",fn:function(a){var b={};try{if(($receiver=smalltalk.send(smalltalk.send(this,"_class",[]),"__eq",[smalltalk.send(a,"_class",[])])).klass===smalltalk.Boolean){if(!$receiver)throw b=[false];}else smalltalk.send($receiver,"_ifFalse_",[function(){throw b=[false];}]);if(($receiver=smalltalk.send(smalltalk.send(this,"_size",[]),"__eq",[smalltalk.send(a,"_size",[])])).klass===smalltalk.Boolean){if(!$receiver)throw b=[false];}else smalltalk.send($receiver,
"_ifFalse_",[function(){throw b=[false];}]);return smalltalk.send(smalltalk.send(this,"_associations",[]),"__eq",[smalltalk.send(a,"_associations",[])])}catch(c){if(c===b)return c[0];throw c;}},args:["aHashedCollection"],source:"= aHashedCollection\n\tself class = aHashedCollection class ifFalse: [^false].\n\tself size = aHashedCollection size ifFalse: [^false].\n\t^self associations = aHashedCollection associations",messageSends:["ifFalse:","=","class","size","associations"],referencedClasses:[]}),
smalltalk.HashedCollection);smalltalk.addMethod("_add_",smalltalk.method({selector:"add:",category:"adding/removing",fn:function(a){smalltalk.send(this,"_at_put_",[smalltalk.send(a,"_key",[]),smalltalk.send(a,"_value",[])]);return this},args:["anAssociation"],source:"add: anAssociation\n\tself at: anAssociation key put: anAssociation value",messageSends:["at:put:","key","value"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_addAll_",smalltalk.method({selector:"addAll:",category:"adding/removing",fn:function(a){smalltalk.send(this,"_addAll_",[smalltalk.send(a,"_associations",[])],smalltalk.HashedCollection.superclass||nil);return a},args:["aHashedCollection"],source:"addAll: aHashedCollection\n\tsuper addAll: aHashedCollection associations.\n\t^aHashedCollection",messageSends:["addAll:","associations"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_asDictionary",smalltalk.method({selector:"asDictionary",category:"converting",fn:function(){return smalltalk.send(smalltalk.Dictionary||Dictionary,"_fromPairs_",[smalltalk.send(this,"_associations",[])])},args:[],source:"asDictionary\n\t^Dictionary fromPairs: self associations",messageSends:["fromPairs:","associations"],referencedClasses:["Dictionary"]}),smalltalk.HashedCollection);
smalltalk.addMethod("_asJSON",smalltalk.method({selector:"asJSON",category:"converting",fn:function(){var a=nil,a=smalltalk.send(smalltalk.send(this,"_class",[]),"_new",[]);smalltalk.send(this,"_keysAndValuesDo_",[function(b,c){return smalltalk.send(a,"_at_put_",[b,smalltalk.send(c,"_asJSON",[])])}]);return a},args:[],source:"asJSON\n\t| c |\n\tc := self class new.\n\tself keysAndValuesDo: [:key :value |\n\t\tc at: key put: value asJSON].\n\t^c",messageSends:["new","class","keysAndValuesDo:","at:put:",
"asJSON"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_associations",smalltalk.method({selector:"associations",category:"accessing",fn:function(){var a=this,b=nil,b=[];smalltalk.send(smalltalk.send(a,"_keys",[]),"_do_",[function(c){return smalltalk.send(b,"_add_",[smalltalk.send(smalltalk.Association||Association,"_key_value_",[c,smalltalk.send(a,"_at_",[c])])])}]);return b},args:[],source:"associations\n\t| associations |\n\tassociations := #().\n\tself keys do: [:each |\n\t    associations add: (Association key: each value: (self at: each))].\n\t^associations",messageSends:["do:",
"keys","add:","key:value:","at:"],referencedClasses:["Association"]}),smalltalk.HashedCollection);smalltalk.addMethod("_associationsDo_",smalltalk.method({selector:"associationsDo:",category:"enumerating",fn:function(a){smalltalk.send(smalltalk.send(this,"_associations",[]),"_do_",[a]);return this},args:["aBlock"],source:"associationsDo: aBlock\n\tself associations do: aBlock",messageSends:["do:","associations"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_at_",smalltalk.method({selector:"at:",category:"accessing",fn:function(a){var b=this;return smalltalk.send(b,"_at_ifAbsent_",[a,function(){return smalltalk.send(b,"_errorNotFound",[])}])},args:["aKey"],source:"at: aKey\n\t^self at: aKey ifAbsent: [self errorNotFound]",messageSends:["at:ifAbsent:","errorNotFound"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_at_ifAbsent_",smalltalk.method({selector:"at:ifAbsent:",category:"accessing",fn:function(a,b){var c=this;return smalltalk.send(smalltalk.send(c,"_includesKey_",[a]),"_ifTrue_ifFalse_",[function(){return smalltalk.send(c,"_basicAt_",[a])},b])},args:["aKey","aBlock"],source:"at: aKey ifAbsent: aBlock\n\t^(self includesKey: aKey)\n\t\tifTrue: [self basicAt: aKey]\n\t\tifFalse: aBlock",messageSends:["ifTrue:ifFalse:","includesKey:","basicAt:"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_at_ifAbsentPut_",smalltalk.method({selector:"at:ifAbsentPut:",category:"accessing",fn:function(a,b){var c=this;return smalltalk.send(c,"_at_ifAbsent_",[a,function(){return smalltalk.send(c,"_at_put_",[a,smalltalk.send(b,"_value",[])])}])},args:["aKey","aBlock"],source:"at: aKey ifAbsentPut: aBlock\n\t^self at: aKey ifAbsent: [\n\t    self at: aKey put: aBlock value]",messageSends:["at:ifAbsent:","at:put:","value"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_at_ifPresent_",smalltalk.method({selector:"at:ifPresent:",category:"accessing",fn:function(a,b){var c=this;return($receiver=smalltalk.send(c,"_includesKey_",[a])).klass===smalltalk.Boolean?$receiver?smalltalk.send(b,"_value_",[smalltalk.send(c,"_at_",[a])]):nil:smalltalk.send($receiver,"_ifTrue_ifFalse_",[function(){return smalltalk.send(b,"_value_",[smalltalk.send(c,"_at_",[a])])},function(){return nil}])},args:["aKey","aBlock"],source:'at: aKey ifPresent: aBlock\n\t"Lookup the given key in the receiver. \n\tIf it is present, answer the value of evaluating the given block with the value associated with the key. \n\tOtherwise, answer nil."\n\t^(self includesKey: aKey)\n\t\tifTrue: [ aBlock value: (self at: aKey) ]\n\t\tifFalse: [ nil ]',
messageSends:["ifTrue:ifFalse:","includesKey:","value:","at:"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_at_ifPresent_ifAbsent_",smalltalk.method({selector:"at:ifPresent:ifAbsent:",category:"accessing",fn:function(a,b,c){var d=this;return smalltalk.send(smalltalk.send(d,"_includesKey_",[a]),"_ifTrue_ifFalse_",[function(){return smalltalk.send(b,"_value_",[smalltalk.send(d,"_at_",[a])])},c])},args:["aKey","aBlock","anotherBlock"],source:'at: aKey ifPresent: aBlock ifAbsent: anotherBlock\n\t"Lookup the given key in the receiver. \n\tIf it is present, answer the value of evaluating the oneArgBlock with the value associated with the key, \n\totherwise answer the value of absentBlock."\n\t^(self includesKey: aKey)\n\t\tifTrue: [ aBlock value: (self at: aKey) ]\n\t\tifFalse: anotherBlock',messageSends:["ifTrue:ifFalse:",
"includesKey:","value:","at:"],referencedClasses:[]}),smalltalk.HashedCollection);smalltalk.addMethod("_at_put_",smalltalk.method({selector:"at:put:",category:"accessing",fn:function(a,b){return smalltalk.send(this,"_basicAt_put_",[a,b])},args:["aKey","aValue"],source:"at: aKey put: aValue\n\t^self basicAt: aKey put: aValue",messageSends:["basicAt:put:"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_collect_",smalltalk.method({selector:"collect:",category:"enumerating",fn:function(a){var b=nil,b=smalltalk.send(smalltalk.send(this,"_class",[]),"_new",[]);smalltalk.send(this,"_keysAndValuesDo_",[function(c,d){return smalltalk.send(b,"_at_put_",[c,smalltalk.send(a,"_value_",[d])])}]);return b},args:["aBlock"],source:"collect: aBlock\n\t| newDict |\n\tnewDict := self class new.\n\tself keysAndValuesDo: [:key :value |\n\t    newDict at: key put: (aBlock value: value)].\n\t^newDict",
messageSends:["new","class","keysAndValuesDo:","at:put:","value:"],referencedClasses:[]}),smalltalk.HashedCollection);smalltalk.addMethod("_copyFrom_to_",smalltalk.method({selector:"copyFrom:to:",category:"copying",fn:function(){smalltalk.send(this,"_shouldNotImplement",[]);return this},args:["anIndex","anotherIndex"],source:"copyFrom: anIndex to: anotherIndex\n\tself shouldNotImplement",messageSends:["shouldNotImplement"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_deepCopy",smalltalk.method({selector:"deepCopy",category:"copying",fn:function(){var a=nil,a=smalltalk.send(smalltalk.send(this,"_class",[]),"_new",[]);smalltalk.send(this,"_associationsDo_",[function(b){return smalltalk.send(a,"_at_put_",[smalltalk.send(b,"_key",[]),smalltalk.send(smalltalk.send(b,"_value",[]),"_deepCopy",[])])}]);return a},args:[],source:"deepCopy\n\t| copy |\n\tcopy := self class new.\n\tself associationsDo: [:each |\n\t    copy at: each key  put: each value deepCopy].\n\t^copy",
messageSends:"new,class,associationsDo:,at:put:,key,deepCopy,value".split(","),referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_detect_ifNone_",smalltalk.method({selector:"detect:ifNone:",category:"enumerating",fn:function(a,b){return smalltalk.send(smalltalk.send(this,"_values",[]),"_detect_ifNone_",[a,b])},args:["aBlock","anotherBlock"],source:"detect: aBlock ifNone: anotherBlock\n\t^self values detect: aBlock ifNone: anotherBlock",messageSends:["detect:ifNone:","values"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_do_",smalltalk.method({selector:"do:",category:"enumerating",fn:function(a){smalltalk.send(smalltalk.send(this,"_values",[]),"_do_",[a]);return this},args:["aBlock"],source:"do: aBlock\n\tself values do: aBlock",messageSends:["do:","values"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_includes_",smalltalk.method({selector:"includes:",category:"enumerating",fn:function(a){return smalltalk.send(smalltalk.send(this,"_values",[]),"_includes_",[a])},args:["anObject"],source:"includes: anObject\n\t^self values includes: anObject",messageSends:["includes:","values"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_includesKey_",smalltalk.method({selector:"includesKey:",category:"testing",fn:function(a){return this.hasOwnProperty(a)},args:["aKey"],source:"includesKey: aKey\n\t<return self.hasOwnProperty(aKey)>",messageSends:[],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_keys",smalltalk.method({selector:"keys",category:"accessing",fn:function(){if("function"===typeof Object.keys)return Object.keys(this);var a=[],b;for(b in this)this.hasOwnProperty(b)&&a.push(b);return a},args:[],source:"keys\n\t<\n\t\tif ('function'===typeof Object.keys) return Object.keys(self);\n\t\tvar keys = [];\n\t\tfor(var i in self) {\n\t\t\tif(self.hasOwnProperty(i)) {\n\t\t\t\tkeys.push(i);\n\t\t\t}\n\t\t};\n\t\treturn keys;\n\t>",messageSends:[],referencedClasses:[]}),
smalltalk.HashedCollection);
smalltalk.addMethod("_keysAndValuesDo_",smalltalk.method({selector:"keysAndValuesDo:",category:"enumerating",fn:function(a){smalltalk.send(this,"_associationsDo_",[function(b){return smalltalk.send(a,"_value_value_",[smalltalk.send(b,"_key",[]),smalltalk.send(b,"_value",[])])}]);return this},args:["aBlock"],source:"keysAndValuesDo: aBlock\n\tself associationsDo: [:each |\n\t    aBlock value: each key value: each value]",messageSends:["associationsDo:","value:value:","key","value"],referencedClasses:[]}),
smalltalk.HashedCollection);
smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"printing",fn:function(){var a=this;return smalltalk.send(smalltalk.String||String,"_streamContents_",[function(b){(function(b){smalltalk.send(b,"_nextPutAll_",[smalltalk.send(a,"_printString",[],smalltalk.HashedCollection.superclass||nil)]);return smalltalk.send(b,"_nextPutAll_",["("])})(b);smalltalk.send(smalltalk.send(a,"_associations",[]),"_do_separatedBy_",[function(a){smalltalk.send(b,"_nextPutAll_",[smalltalk.send(smalltalk.send(a,
"_key",[]),"_printString",[])]);smalltalk.send(b,"_nextPutAll_",[" -> "]);return smalltalk.send(b,"_nextPutAll_",[smalltalk.send(smalltalk.send(a,"_value",[]),"_printString",[])])},function(){return smalltalk.send(b,"_nextPutAll_",[" , "])}]);return smalltalk.send(b,"_nextPutAll_",[")"])}])},args:[],source:"printString\n\t\"print the contents of the HashedCollection into a string and return the string\"\n\t^String streamContents: [:aStream|  \n\t\taStream \n\t\t\tnextPutAll: super printString;\n\t\t\tnextPutAll: '('.\n\t\tself associations\n\t\t\tdo: [:anAssociation|\n\t\t\t\taStream\n\t\t\t\t\tnextPutAll: anAssociation key printString;\n\t\t\t\t\tnextPutAll: ' -> ';\n\t\t\t\t\tnextPutAll: anAssociation value printString]\n\t\t\tseparatedBy: [aStream nextPutAll: ' , '].\n\t\taStream nextPutAll: ')']",
messageSends:"streamContents:,nextPutAll:,printString,do:separatedBy:,associations,key,value".split(","),referencedClasses:["String"]}),smalltalk.HashedCollection);
smalltalk.addMethod("_remove_ifAbsent_",smalltalk.method({selector:"remove:ifAbsent:",category:"adding/removing",fn:function(a,b){return smalltalk.send(this,"_removeKey_ifAbsent_",[a,b])},args:["aKey","aBlock"],source:"remove: aKey ifAbsent: aBlock\n    ^self removeKey: aKey ifAbsent: aBlock",messageSends:["removeKey:ifAbsent:"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_removeKey_",smalltalk.method({selector:"removeKey:",category:"adding/removing",fn:function(a){return smalltalk.send(this,"_remove_",[a])},args:["aKey"],source:"removeKey: aKey\n    ^self remove: aKey",messageSends:["remove:"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_removeKey_ifAbsent_",smalltalk.method({selector:"removeKey:ifAbsent:",category:"adding/removing",fn:function(a,b){var c=this;return($receiver=smalltalk.send(c,"_includesKey_",[a])).klass===smalltalk.Boolean?!$receiver?smalltalk.send(b,"_value",[]):smalltalk.send(c,"_basicDelete_",[a]):smalltalk.send($receiver,"_ifFalse_ifTrue_",[function(){return smalltalk.send(b,"_value",[])},function(){return smalltalk.send(c,"_basicDelete_",[a])}])},args:["aKey","aBlock"],source:"removeKey: aKey ifAbsent: aBlock\n\t^(self includesKey: aKey) \n\t\tifFalse: [aBlock value]\n\t\tifTrue: [self basicDelete: aKey]",
messageSends:["ifFalse:ifTrue:","includesKey:","value","basicDelete:"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_select_",smalltalk.method({selector:"select:",category:"enumerating",fn:function(a){var b=nil,b=smalltalk.send(smalltalk.send(this,"_class",[]),"_new",[]);smalltalk.send(this,"_keysAndValuesDo_",[function(c,d){return($receiver=smalltalk.send(a,"_value_",[d])).klass===smalltalk.Boolean?$receiver?smalltalk.send(b,"_at_put_",[c,d]):nil:smalltalk.send($receiver,"_ifTrue_",[function(){return smalltalk.send(b,"_at_put_",[c,d])}])}]);return b},args:["aBlock"],source:"select: aBlock\n\t| newDict |\n\tnewDict := self class new.\n\tself keysAndValuesDo: [:key :value |\n\t    (aBlock value: value) ifTrue: [newDict at: key put: value]].\n\t^newDict",
messageSends:"new,class,keysAndValuesDo:,ifTrue:,value:,at:put:".split(","),referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_shallowCopy",smalltalk.method({selector:"shallowCopy",category:"copying",fn:function(){var a=nil,a=smalltalk.send(smalltalk.send(this,"_class",[]),"_new",[]);smalltalk.send(this,"_associationsDo_",[function(b){return smalltalk.send(a,"_at_put_",[smalltalk.send(b,"_key",[]),smalltalk.send(b,"_value",[])])}]);return a},args:[],source:"shallowCopy\n\t| copy |\n\tcopy := self class new.\n\tself associationsDo: [:each |\n\t    copy at: each key  put: each value].\n\t^copy",messageSends:"new,class,associationsDo:,at:put:,key,value".split(","),
referencedClasses:[]}),smalltalk.HashedCollection);smalltalk.addMethod("_size",smalltalk.method({selector:"size",category:"accessing",fn:function(){return smalltalk.send(smalltalk.send(this,"_keys",[]),"_size",[])},args:[],source:"size\n\t^self keys size",messageSends:["size","keys"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_storeOn_",smalltalk.method({selector:"storeOn:",category:"printing",fn:function(a){smalltalk.send(a,"_nextPutAll_",["#{"]);smalltalk.send(smalltalk.send(this,"_associations",[]),"_do_separatedBy_",[function(b){return smalltalk.send(b,"_storeOn_",[a])},function(){return smalltalk.send(a,"_nextPutAll_",[". "])}]);smalltalk.send(a,"_nextPutAll_",["}"]);return this},args:["aStream"],source:"storeOn: aStream\n\taStream nextPutAll: '#{'.\n\tself associations\n\t\tdo: [:each | each storeOn: aStream]\n\t\tseparatedBy: [ aStream nextPutAll: '. '].\n\taStream nextPutAll: '}'",
messageSends:["nextPutAll:","do:separatedBy:","associations","storeOn:"],referencedClasses:[]}),smalltalk.HashedCollection);smalltalk.addMethod("_values",smalltalk.method({selector:"values",category:"accessing",fn:function(){var a=this;return smalltalk.send(smalltalk.send(a,"_keys",[]),"_collect_",[function(b){return smalltalk.send(a,"_at_",[b])}])},args:[],source:"values\n\t^self keys collect: [:each | self at: each]",messageSends:["collect:","keys","at:"],referencedClasses:[]}),smalltalk.HashedCollection);
smalltalk.addMethod("_fromPairs_",smalltalk.method({selector:"fromPairs:",category:"instance creation",fn:function(a){var b=nil,b=smalltalk.send(this,"_new",[]);smalltalk.send(a,"_do_",[function(a){return smalltalk.send(b,"_add_",[a])}]);return b},args:["aCollection"],source:"fromPairs: aCollection\n\t| dict |\n\tdict := self new.\n\taCollection do: [:each | dict add: each].\n\t^dict",messageSends:["new","do:","add:"],referencedClasses:[]}),smalltalk.HashedCollection.klass);
smalltalk.addClass("Dictionary",smalltalk.HashedCollection,["keys","values"],"Kernel-Collections");
smalltalk.addMethod("_asHashedCollection",smalltalk.method({selector:"asHashedCollection",category:"converting",fn:function(){return smalltalk.send(smalltalk.HashedCollection||HashedCollection,"_fromPairs_",[smalltalk.send(this,"_associations",[])])},args:[],source:"asHashedCollection\n\t^HashedCollection fromPairs: self associations",messageSends:["fromPairs:","associations"],referencedClasses:["HashedCollection"]}),smalltalk.Dictionary);
smalltalk.addMethod("_asJSON",smalltalk.method({selector:"asJSON",category:"converting",fn:function(){return smalltalk.send(smalltalk.send(this,"_asHashedCollection",[]),"_asJSON",[])},args:[],source:"asJSON\n\t^self asHashedCollection asJSON",messageSends:["asJSON","asHashedCollection"],referencedClasses:[]}),smalltalk.Dictionary);
smalltalk.addMethod("_at_ifAbsent_",smalltalk.method({selector:"at:ifAbsent:",category:"accessing",fn:function(a,b){for(var c,d=0;d<this["@keys"].length;d++)this["@keys"][d].__eq(a)&&(c=d);return typeof c==="undefined"?b():this["@values"][c]},args:["aKey","aBlock"],source:"at: aKey ifAbsent: aBlock\n\t<\n\t\tvar index;\n\t\tfor(var i=0;i<self['@keys'].length;i++){\n\t\t\tif(self['@keys'][i].__eq(aKey)) {index = i;}\n\t\t};\n\t\tif(typeof index === 'undefined') {\n\t\t\treturn aBlock();\n\t\t} else {\n\t\t\treturn self['@values'][index];\n\t\t}\n\t>",
messageSends:[],referencedClasses:[]}),smalltalk.Dictionary);
smalltalk.addMethod("_at_put_",smalltalk.method({selector:"at:put:",category:"accessing",fn:function(a,b){var c=this["@keys"].indexOf(a);if(c===-1){this["@values"].push(b);this["@keys"].push(a)}else this["@values"][c]=b;return b},args:["aKey","aValue"],source:"at: aKey put: aValue\n\t<\n\t\tvar index = self['@keys'].indexOf(aKey);\n\t\tif(index === -1) {\n\t\t\tself['@values'].push(aValue);\n\t\t\tself['@keys'].push(aKey);\n\t\t} else {\n\t\t\tself['@values'][index] = aValue;\n\t\t};\n\n\t\treturn aValue;\n\t>",messageSends:[],
referencedClasses:[]}),smalltalk.Dictionary);smalltalk.addMethod("_includesKey_",smalltalk.method({selector:"includesKey:",category:"testing",fn:function(a){return smalltalk.send(this["@keys"],"_includes_",[a])},args:["aKey"],source:"includesKey: aKey\n\t^keys includes: aKey",messageSends:["includes:"],referencedClasses:[]}),smalltalk.Dictionary);
smalltalk.addMethod("_initialize",smalltalk.method({selector:"initialize",category:"initialization",fn:function(){smalltalk.send(this,"_initialize",[],smalltalk.Dictionary.superclass||nil);this["@keys"]=[];this["@values"]=[];return this},args:[],source:"initialize\n\tsuper initialize.\n\tkeys := #().\n\tvalues := #()",messageSends:["initialize"],referencedClasses:[]}),smalltalk.Dictionary);
smalltalk.addMethod("_keys",smalltalk.method({selector:"keys",category:"accessing",fn:function(){return smalltalk.send(this["@keys"],"_copy",[])},args:[],source:"keys\n\t^keys copy",messageSends:["copy"],referencedClasses:[]}),smalltalk.Dictionary);
smalltalk.addMethod("_removeKey_ifAbsent_",smalltalk.method({selector:"removeKey:ifAbsent:",category:"adding/removing",fn:function(a,b){var c=this["@keys"].indexOf(a);if(c===-1)return b();this["@keys"].splice(c,1);return this["@values"].splice(c,1)[0]},args:["aKey","aBlock"],source:"removeKey: aKey ifAbsent: aBlock\n    <\n            var index = self['@keys'].indexOf(aKey);\n            if(index === -1) {\n                return aBlock()\n            } else {\n                var value;\n                self['@keys'].splice(index, 1);\n                value = self['@values'].splice(index, 1);\n                return value[0];\n            };\n    >",
messageSends:[],referencedClasses:[]}),smalltalk.Dictionary);smalltalk.addMethod("_values",smalltalk.method({selector:"values",category:"accessing",fn:function(){return smalltalk.send(this["@values"],"_copy",[])},args:[],source:"values\n\t^values copy",messageSends:["copy"],referencedClasses:[]}),smalltalk.Dictionary);smalltalk.addClass("SequenceableCollection",smalltalk.Collection,[],"Kernel-Collections");
smalltalk.addMethod("__eq",smalltalk.method({selector:"=",category:"comparing",fn:function(a){var b=this,c={};try{if(($receiver=smalltalk.send(smalltalk.send(smalltalk.send(b,"_class",[]),"__eq",[smalltalk.send(a,"_class",[])]),"_and_",[function(){return smalltalk.send(smalltalk.send(b,"_size",[]),"__eq",[smalltalk.send(a,"_size",[])])}])).klass===smalltalk.Boolean){if(!$receiver)throw c=[false];}else smalltalk.send($receiver,"_ifFalse_",[function(){throw c=[false];}]);smalltalk.send(b,"_withIndexDo_",
[function(b,d){var i;if(($receiver=smalltalk.send(smalltalk.send(a,"_at_",[d]),"__eq",[b])).klass===smalltalk.Boolean)if($receiver)i=nil;else throw c=[false];else i=smalltalk.send($receiver,"_ifFalse_",[function(){throw c=[false];}]);return i}]);return true}catch(d){if(d===c)return d[0];throw d;}},args:["aCollection"],source:"= aCollection\n\t(self class = aCollection class and: [\n\t\tself size = aCollection size]) ifFalse: [^false].\n\tself withIndexDo: [:each :i |\n                 (aCollection at: i) = each ifFalse: [^false]].\n\t^true",
messageSends:"ifFalse:,and:,=,class,size,withIndexDo:,at:".split(","),referencedClasses:[]}),smalltalk.SequenceableCollection);smalltalk.addMethod("_addLast_",smalltalk.method({selector:"addLast:",category:"adding",fn:function(a){smalltalk.send(this,"_add_",[a]);return this},args:["anObject"],source:"addLast: anObject\n\tself add: anObject",messageSends:["add:"],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_allButFirst",smalltalk.method({selector:"allButFirst",category:"accessing",fn:function(){return smalltalk.send(this,"_copyFrom_to_",[2,smalltalk.send(this,"_size",[])])},args:[],source:"allButFirst\n\t^self copyFrom: 2 to: self size",messageSends:["copyFrom:to:","size"],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_allButLast",smalltalk.method({selector:"allButLast",category:"accessing",fn:function(){return smalltalk.send(this,"_copyFrom_to_",[1,($receiver=smalltalk.send(this,"_size",[])).klass===smalltalk.Number?$receiver-1:smalltalk.send($receiver,"__minus",[1])])},args:[],source:"allButLast\n\t^self copyFrom: 1 to: self size - 1",messageSends:["copyFrom:to:","-","size"],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_at_",smalltalk.method({selector:"at:",category:"accessing",fn:function(a){var b=this;return smalltalk.send(b,"_at_ifAbsent_",[a,function(){return smalltalk.send(b,"_errorNotFound",[])}])},args:["anIndex"],source:"at: anIndex\n\t^self at: anIndex ifAbsent: [\n\t    self errorNotFound]",messageSends:["at:ifAbsent:","errorNotFound"],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_at_ifAbsent_",smalltalk.method({selector:"at:ifAbsent:",category:"accessing",fn:function(){smalltalk.send(this,"_subclassResponsibility",[]);return this},args:["anIndex","aBlock"],source:"at: anIndex ifAbsent: aBlock\n\tself subclassResponsibility",messageSends:["subclassResponsibility"],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_at_put_",smalltalk.method({selector:"at:put:",category:"accessing",fn:function(){smalltalk.send(this,"_subclassResponsibility",[]);return this},args:["anIndex","anObject"],source:"at: anIndex put: anObject\n\tself subclassResponsibility",messageSends:["subclassResponsibility"],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_atRandom",smalltalk.method({selector:"atRandom",category:"accessing",fn:function(){return smalltalk.send(this,"_at_",[smalltalk.send(smalltalk.send(this,"_size",[]),"_atRandom",[])])},args:[],source:"atRandom\n\t^ self at: self size atRandom",messageSends:["at:","atRandom","size"],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_copyFrom_to_",smalltalk.method({selector:"copyFrom:to:",category:"copying",fn:function(a,b){var c=this,d=nil,e=nil,d=smalltalk.send(a,"_to_",[b]),e=smalltalk.send(smalltalk.send(c,"_class",[]),"_new_",[smalltalk.send(d,"_size",[])]);smalltalk.send(d,"_withIndexDo_",[function(a,b){return smalltalk.send(e,"_at_put_",[b,smalltalk.send(c,"_at_",[a])])}]);return e},args:["anIndex","anotherIndex"],source:"copyFrom: anIndex to: anotherIndex\n\t| range newCollection |\n\trange := anIndex to: anotherIndex.\n\tnewCollection := self class new: range size.\n\trange withIndexDo: [:each :i |\n\t    newCollection at: i put: (self at: each)].\n\t^newCollection",
messageSends:"to:,new:,class,size,withIndexDo:,at:put:,at:".split(","),referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_deepCopy",smalltalk.method({selector:"deepCopy",category:"copying",fn:function(){var a=nil,a=smalltalk.send(smalltalk.send(this,"_class",[]),"_new_",[smalltalk.send(this,"_size",[])]);smalltalk.send(this,"_withIndexDo_",[function(b,c){return smalltalk.send(a,"_at_put_",[c,smalltalk.send(b,"_deepCopy",[])])}]);return a},args:[],source:"deepCopy\n\t| newCollection |\n\tnewCollection := self class new: self size.\n\tself withIndexDo: [:each :index | \n\t\tnewCollection at: index put: each deepCopy].\n\t^newCollection",messageSends:"new:,class,size,withIndexDo:,at:put:,deepCopy".split(","),
referencedClasses:[]}),smalltalk.SequenceableCollection);smalltalk.addMethod("_first",smalltalk.method({selector:"first",category:"accessing",fn:function(){return smalltalk.send(this,"_at_",[1])},args:[],source:"first\n\t^self at: 1",messageSends:["at:"],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_first_",smalltalk.method({selector:"first:",category:"accessing",fn:function(a){return smalltalk.send(this,"_copyFrom_to_",[1,a])},args:["n"],source:'first: n\n\t"Answer the first n elements of the receiver.\n\tRaise an error if there are not enough elements."\n\n\t^ self copyFrom: 1 to: n',messageSends:["copyFrom:to:"],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_fourth",smalltalk.method({selector:"fourth",category:"accessing",fn:function(){return smalltalk.send(this,"_at_",[4])},args:[],source:"fourth\n\t^self at: 4",messageSends:["at:"],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_indexOf_",smalltalk.method({selector:"indexOf:",category:"accessing",fn:function(a){var b=this;return smalltalk.send(b,"_indexOf_ifAbsent_",[a,function(){return smalltalk.send(b,"_errorNotFound",[])}])},args:["anObject"],source:"indexOf: anObject\n\t^self indexOf: anObject ifAbsent: [self errorNotFound]",messageSends:["indexOf:ifAbsent:","errorNotFound"],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_indexOf_ifAbsent_",smalltalk.method({selector:"indexOf:ifAbsent:",category:"accessing",fn:function(a,b){for(var c=0;c<this.length;c++)if(this[c].__eq(a))return c+1;return b()},args:["anObject","aBlock"],source:"indexOf: anObject ifAbsent: aBlock\n\t<\n\t\tfor(var i=0;i<self.length;i++){\n\t\t\tif(self[i].__eq(anObject)) {return i+1}\n\t\t}\n\t\treturn aBlock();\n\t>",messageSends:[],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_indexOf_startingAt_",smalltalk.method({selector:"indexOf:startingAt:",category:"accessing",fn:function(a,b){return smalltalk.send(this,"_indexOf_startingAt_ifAbsent_",[a,b,function(){return 0}])},args:["anObject","start"],source:'indexOf: anObject startingAt: start\n\t"Answer the index of the first occurence of anElement after start\n\twithin the receiver. If the receiver does not contain anElement, \n\tanswer 0."\n\t^self indexOf: anObject startingAt: start ifAbsent: [0]',messageSends:["indexOf:startingAt:ifAbsent:"],
referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_indexOf_startingAt_ifAbsent_",smalltalk.method({selector:"indexOf:startingAt:ifAbsent:",category:"accessing",fn:function(a,b,c){for(b=b-1;b<this.length;b++)if(this[b].__eq(a))return b+1;return c()},args:["anObject","start","aBlock"],source:"indexOf: anObject startingAt: start ifAbsent: aBlock\n\t<\n\t\tfor(var i=start-1;i<self.length;i++){\n\t\t\tif(self[i].__eq(anObject)) {return i+1}\n\t\t}\n\t\treturn aBlock();\n\t>",messageSends:[],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_last",smalltalk.method({selector:"last",category:"accessing",fn:function(){return smalltalk.send(this,"_at_",[smalltalk.send(this,"_size",[])])},args:[],source:"last\n\t^self at: self size",messageSends:["at:","size"],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"printing",fn:function(){var a=this;return smalltalk.send(smalltalk.String||String,"_streamContents_",[function(b){smalltalk.send(b,"_nextPutAll_",[smalltalk.send(smalltalk.send(a,"_printString",[],smalltalk.SequenceableCollection.superclass||nil),"__comma",[" ("])]);smalltalk.send(a,"_do_separatedBy_",[function(a){return smalltalk.send(b,"_nextPutAll_",[smalltalk.send(a,"_printString",[])])},function(){return smalltalk.send(b,
"_nextPutAll_",[" "])}]);return smalltalk.send(b,"_nextPutAll_",[")"])}])},args:[],source:"printString\n\t\"print the contents of the SequenceableCollection into a string and return it\"\n\t^String streamContents: [:aStream |\n\t\taStream\n\t\t\tnextPutAll: super printString, ' ('.\n\t\tself do: [:each | aStream nextPutAll: each printString]\n\t\t\tseparatedBy: [aStream nextPutAll: ' '].\n\t\taStream nextPutAll: ')'.]",messageSends:["streamContents:","nextPutAll:",",","printString","do:separatedBy:"],
referencedClasses:["String"]}),smalltalk.SequenceableCollection);smalltalk.addMethod("_removeLast",smalltalk.method({selector:"removeLast",category:"adding",fn:function(){smalltalk.send(this,"_remove_",[smalltalk.send(this,"_last",[])]);return this},args:[],source:"removeLast\n\tself remove: self last",messageSends:["remove:","last"],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_reversed",smalltalk.method({selector:"reversed",category:"converting",fn:function(){smalltalk.send(this,"_subclassResponsibility",[]);return this},args:[],source:"reversed\n\tself subclassResponsibility",messageSends:["subclassResponsibility"],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_second",smalltalk.method({selector:"second",category:"accessing",fn:function(){return smalltalk.send(this,"_at_",[2])},args:[],source:"second\n\t^self at: 2",messageSends:["at:"],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_shallowCopy",smalltalk.method({selector:"shallowCopy",category:"copying",fn:function(){var a=nil,a=smalltalk.send(smalltalk.send(this,"_class",[]),"_new_",[smalltalk.send(this,"_size",[])]);smalltalk.send(this,"_withIndexDo_",[function(b,c){return smalltalk.send(a,"_at_put_",[c,b])}]);return a},args:[],source:"shallowCopy\n\t| newCollection |\n\tnewCollection := self class new: self size.\n\tself withIndexDo: [ :each :index | \n\t\tnewCollection at: index put: each].\n\t^newCollection",
messageSends:["new:","class","size","withIndexDo:","at:put:"],referencedClasses:[]}),smalltalk.SequenceableCollection);smalltalk.addMethod("_third",smalltalk.method({selector:"third",category:"accessing",fn:function(){return smalltalk.send(this,"_at_",[3])},args:[],source:"third\n\t^self at: 3",messageSends:["at:"],referencedClasses:[]}),smalltalk.SequenceableCollection);
smalltalk.addMethod("_withIndexDo_",smalltalk.method({selector:"withIndexDo:",category:"enumerating",fn:function(a){for(var b=0;b<this.length;b++)a(this[b],b+1);return this},args:["aBlock"],source:"withIndexDo: aBlock\n\t<for(var i=0;i<self.length;i++){aBlock(self[i], i+1);}>",messageSends:[],referencedClasses:[]}),smalltalk.SequenceableCollection);smalltalk.addClass("Array",smalltalk.SequenceableCollection,[],"Kernel-Collections");
smalltalk.addMethod("_add_",smalltalk.method({selector:"add:",category:"adding/removing",fn:function(a){this.push(a);return a},args:["anObject"],source:"add: anObject\n\t<self.push(anObject); return anObject;>",messageSends:[],referencedClasses:[]}),smalltalk.Array);
smalltalk.addMethod("_asJavascript",smalltalk.method({selector:"asJavascript",category:"converting",fn:function(){return smalltalk.send(smalltalk.send("[","__comma",[smalltalk.send(smalltalk.send(this,"_collect_",[function(a){return smalltalk.send(a,"_asJavascript",[])}]),"_join_",[", "])]),"__comma",["]"])},args:[],source:"asJavascript\n\t^'[', ((self collect: [:each | each asJavascript]) join: ', '),  ']'",messageSends:[",","join:","collect:","asJavascript"],referencedClasses:[]}),smalltalk.Array);
smalltalk.addMethod("_at_ifAbsent_",smalltalk.method({selector:"at:ifAbsent:",category:"accessing",fn:function(a,b){return a<1||this.length<a?b():this[a-1]},args:["anIndex","aBlock"],source:"at: anIndex ifAbsent: aBlock\n\t<\n\t\tif((anIndex < 1) || (self.length < anIndex)) {return aBlock()};\n\t\treturn self[anIndex - 1];\n\t>",messageSends:[],referencedClasses:[]}),smalltalk.Array);
smalltalk.addMethod("_at_put_",smalltalk.method({selector:"at:put:",category:"accessing",fn:function(a,b){return this[a-1]=b},args:["anIndex","anObject"],source:"at: anIndex put: anObject\n\t<return self[anIndex - 1] = anObject>",messageSends:[],referencedClasses:[]}),smalltalk.Array);
smalltalk.addMethod("_join_",smalltalk.method({selector:"join:",category:"enumerating",fn:function(a){return this.join(a)},args:["aString"],source:"join: aString\n\t<return self.join(aString)>",messageSends:[],referencedClasses:[]}),smalltalk.Array);
smalltalk.addMethod("_remove_",smalltalk.method({selector:"remove:",category:"adding/removing",fn:function(a){for(var b=0;b<this.length;b++)if(this[b]==a){this.splice(b,1);break}return this},args:["anObject"],source:"remove: anObject\n\t<\n\t\tfor(var i=0;i<self.length;i++) {\n\t\t\tif(self[i] == anObject) {\n\t\t\t\tself.splice(i,1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t>",messageSends:[],referencedClasses:[]}),smalltalk.Array);
smalltalk.addMethod("_removeFrom_to_",smalltalk.method({selector:"removeFrom:to:",category:"adding/removing",fn:function(a,b){this.splice(a-1,b-1);return this},args:["aNumber","anotherNumber"],source:"removeFrom: aNumber to: anotherNumber\n\t<self.splice(aNumber - 1,anotherNumber - 1)>",messageSends:[],referencedClasses:[]}),smalltalk.Array);
smalltalk.addMethod("_reversed",smalltalk.method({selector:"reversed",category:"converting",fn:function(){return this._copy().reverse()},args:[],source:"reversed\n\t<return self._copy().reverse()>",messageSends:[],referencedClasses:[]}),smalltalk.Array);smalltalk.addMethod("_size",smalltalk.method({selector:"size",category:"accessing",fn:function(){return this.length},args:[],source:"size\n\t<return self.length>",messageSends:[],referencedClasses:[]}),smalltalk.Array);
smalltalk.addMethod("_sort",smalltalk.method({selector:"sort",category:"enumerating",fn:function(){return smalltalk.send(this,"_basicPerform_",["sort"])},args:[],source:"sort\n    ^self basicPerform: 'sort'",messageSends:["basicPerform:"],referencedClasses:[]}),smalltalk.Array);
smalltalk.addMethod("_sort_",smalltalk.method({selector:"sort:",category:"enumerating",fn:function(a){return this.sort(function(b,c){return a(b,c)?-1:1})},args:["aBlock"],source:"sort: aBlock\n\t<\n\t\treturn self.sort(function(a, b) {\n\t\t\tif(aBlock(a,b)) {return -1} else {return 1}\n\t\t})\n\t>",messageSends:[],referencedClasses:[]}),smalltalk.Array);
smalltalk.addMethod("_sorted",smalltalk.method({selector:"sorted",category:"enumerating",fn:function(){return smalltalk.send(smalltalk.send(this,"_copy",[]),"_sort",[])},args:[],source:"sorted\n\t^self copy sort",messageSends:["sort","copy"],referencedClasses:[]}),smalltalk.Array);
smalltalk.addMethod("_sorted_",smalltalk.method({selector:"sorted:",category:"enumerating",fn:function(a){return smalltalk.send(smalltalk.send(this,"_copy",[]),"_sort_",[a])},args:["aBlock"],source:"sorted: aBlock\n\t^self copy sort: aBlock",messageSends:["sort:","copy"],referencedClasses:[]}),smalltalk.Array);
smalltalk.addMethod("_new_",smalltalk.method({selector:"new:",category:"instance creation",fn:function(a){return Array(a)},args:["anInteger"],source:"new: anInteger\n\t<return new Array(anInteger)>",messageSends:[],referencedClasses:[]}),smalltalk.Array.klass);
smalltalk.addMethod("_with_",smalltalk.method({selector:"with:",category:"instance creation",fn:function(a){var b=smalltalk.send(this,"_new_",[1]);smalltalk.send(b,"_at_put_",[1,a]);return smalltalk.send(b,"_yourself",[])},args:["anObject"],source:"with: anObject\n\t    ^(self new: 1)\n\t\tat: 1 put: anObject;\n\t\tyourself",messageSends:["at:put:","yourself","new:"],referencedClasses:[]}),smalltalk.Array.klass);
smalltalk.addMethod("_with_with_",smalltalk.method({selector:"with:with:",category:"instance creation",fn:function(a,b){var c=smalltalk.send(this,"_new_",[2]);smalltalk.send(c,"_at_put_",[1,a]);smalltalk.send(c,"_at_put_",[2,b]);return smalltalk.send(c,"_yourself",[])},args:["anObject","anObject2"],source:"with: anObject with: anObject2\n\t    ^(self new: 2)\n\t\tat: 1 put: anObject;\n\t\tat: 2 put: anObject2;\n\t\tyourself",messageSends:["at:put:","yourself","new:"],referencedClasses:[]}),smalltalk.Array.klass);
smalltalk.addMethod("_with_with_with_",smalltalk.method({selector:"with:with:with:",category:"instance creation",fn:function(a,b,c){var d=smalltalk.send(this,"_new_",[3]);smalltalk.send(d,"_at_put_",[1,a]);smalltalk.send(d,"_at_put_",[2,b]);smalltalk.send(d,"_at_put_",[3,c]);return smalltalk.send(d,"_yourself",[])},args:["anObject","anObject2","anObject3"],source:"with: anObject with: anObject2 with: anObject3\n\t    ^(self new: 3)\n\t\tat: 1 put: anObject;\n\t\tat: 2 put: anObject2;\n\t\tat: 3 put: anObject3;\n\t\tyourself",
messageSends:["at:put:","yourself","new:"],referencedClasses:[]}),smalltalk.Array.klass);
smalltalk.addMethod("_withAll_",smalltalk.method({selector:"withAll:",category:"instance creation",fn:function(a){var b=nil,b=smalltalk.send(this,"_new_",[smalltalk.send(a,"_size",[])]);smalltalk.send(a,"_withIndexDo_",[function(a,d){return smalltalk.send(b,"_at_put_",[d,a])}]);return b},args:["aCollection"],source:"withAll: aCollection\n\t| instance |\n\tinstance := self new: aCollection size.\n\taCollection withIndexDo: [:each :index  |\n\t\tinstance at: index put: each].\n\t^instance",messageSends:["new:",
"size","withIndexDo:","at:put:"],referencedClasses:[]}),smalltalk.Array.klass);smalltalk.addClass("CharacterArray",smalltalk.SequenceableCollection,[],"Kernel-Collections");smalltalk.addMethod("__comma",smalltalk.method({selector:",",category:"copying",fn:function(a){return smalltalk.send(smalltalk.send(this,"_asString",[]),"__comma",[smalltalk.send(a,"_asString",[])])},args:["aString"],source:", aString\n\t^self asString, aString asString",messageSends:[",","asString"],referencedClasses:[]}),smalltalk.CharacterArray);
smalltalk.addMethod("_add_",smalltalk.method({selector:"add:",category:"adding",fn:function(){smalltalk.send(this,"_errorReadOnly",[]);return this},args:["anObject"],source:"add: anObject\n\tself errorReadOnly",messageSends:["errorReadOnly"],referencedClasses:[]}),smalltalk.CharacterArray);
smalltalk.addMethod("_asLowercase",smalltalk.method({selector:"asLowercase",category:"converting",fn:function(){return smalltalk.send(smalltalk.send(this,"_class",[]),"_fromString_",[smalltalk.send(smalltalk.send(this,"_asString",[]),"_asLowercase",[])])},args:[],source:"asLowercase\n\t^self class fromString: self asString asLowercase",messageSends:["fromString:","class","asLowercase","asString"],referencedClasses:[]}),smalltalk.CharacterArray);
smalltalk.addMethod("_asNumber",smalltalk.method({selector:"asNumber",category:"converting",fn:function(){return smalltalk.send(smalltalk.send(this,"_asString",[]),"_asNumber",[])},args:[],source:"asNumber\n\t^self asString asNumber",messageSends:["asNumber","asString"],referencedClasses:[]}),smalltalk.CharacterArray);
smalltalk.addMethod("_asString",smalltalk.method({selector:"asString",category:"converting",fn:function(){return smalltalk.send(this,"_subclassResponsibility",[])},args:[],source:"asString\n\t^self subclassResponsibility",messageSends:["subclassResponsibility"],referencedClasses:[]}),smalltalk.CharacterArray);
smalltalk.addMethod("_asSymbol",smalltalk.method({selector:"asSymbol",category:"converting",fn:function(){return smalltalk.send(this,"_subclassResponsibility",[])},args:[],source:"asSymbol\n\t^self subclassResponsibility",messageSends:["subclassResponsibility"],referencedClasses:[]}),smalltalk.CharacterArray);
smalltalk.addMethod("_asUppercase",smalltalk.method({selector:"asUppercase",category:"converting",fn:function(){return smalltalk.send(smalltalk.send(this,"_class",[]),"_fromString_",[smalltalk.send(smalltalk.send(this,"_asString",[]),"_asUppercase",[])])},args:[],source:"asUppercase\n\t^self class fromString: self asString asUppercase",messageSends:["fromString:","class","asUppercase","asString"],referencedClasses:[]}),smalltalk.CharacterArray);
smalltalk.addMethod("_at_put_",smalltalk.method({selector:"at:put:",category:"accessing",fn:function(){smalltalk.send(this,"_errorReadOnly",[]);return this},args:["anIndex","anObject"],source:"at: anIndex put: anObject\n\tself errorReadOnly",messageSends:["errorReadOnly"],referencedClasses:[]}),smalltalk.CharacterArray);
smalltalk.addMethod("_errorReadOnly",smalltalk.method({selector:"errorReadOnly",category:"error handling",fn:function(){smalltalk.send(this,"_error_",["Object is read-only"]);return this},args:[],source:"errorReadOnly\n\tself error: 'Object is read-only'",messageSends:["error:"],referencedClasses:[]}),smalltalk.CharacterArray);
smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"printing",fn:function(){return smalltalk.send(smalltalk.send(this,"_asString",[]),"_printString",[])},args:[],source:"printString\n\t^self asString printString",messageSends:["printString","asString"],referencedClasses:[]}),smalltalk.CharacterArray);
smalltalk.addMethod("_remove_",smalltalk.method({selector:"remove:",category:"adding",fn:function(){smalltalk.send(this,"_errorReadOnly",[]);return this},args:["anObject"],source:"remove: anObject\n\tself errorReadOnly",messageSends:["errorReadOnly"],referencedClasses:[]}),smalltalk.CharacterArray);
smalltalk.addMethod("_fromString_",smalltalk.method({selector:"fromString:",category:"instance creation",fn:function(){smalltalk.send(this,"_subclassResponsibility",[]);return this},args:["aString"],source:"fromString: aString\n\tself subclassResponsibility",messageSends:["subclassResponsibility"],referencedClasses:[]}),smalltalk.CharacterArray.klass);smalltalk.addClass("String",smalltalk.CharacterArray,[],"Kernel-Collections");
smalltalk.addMethod("__comma",smalltalk.method({selector:",",category:"copying",fn:function(a){return this+a},args:["aString"],source:", aString\n\t<return self + aString>",messageSends:[],referencedClasses:[]}),smalltalk.String);smalltalk.addMethod("__lt",smalltalk.method({selector:"<",category:"comparing",fn:function(a){return""+this<a._asString()},args:["aString"],source:"< aString\n\t<return String(self) < aString._asString()>",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("__lt_eq",smalltalk.method({selector:"<=",category:"comparing",fn:function(a){return""+this<=a._asString()},args:["aString"],source:"<= aString\n\t<return String(self) <= aString._asString()>",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("__eq",smalltalk.method({selector:"=",category:"comparing",fn:function(a){var b={};try{if(($receiver=smalltalk.send(smalltalk.send(a,"_class",[]),"__eq",[smalltalk.send(this,"_class",[])])).klass===smalltalk.Boolean){if(!$receiver)throw b=[false];}else smalltalk.send($receiver,"_ifFalse_",[function(){throw b=[false];}]);return""+this===""+a}catch(c){if(c===b)return c[0];throw c;}},args:["aString"],source:"= aString\n\taString class = self class ifFalse: [^false].\n\t<return String(self) === String(aString)>",
messageSends:["ifFalse:","=","class"],referencedClasses:[]}),smalltalk.String);smalltalk.addMethod("__eq_eq",smalltalk.method({selector:"==",category:"comparing",fn:function(a){return smalltalk.send(this,"__eq",[a])},args:["aString"],source:"== aString\n\t^self = aString",messageSends:["="],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("__gt",smalltalk.method({selector:">",category:"comparing",fn:function(a){return""+this>a._asString()},args:["aString"],source:"> aString\n\t<return String(self) >> aString._asString()>",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("__gt_eq",smalltalk.method({selector:">=",category:"comparing",fn:function(a){return""+this>=a._asString()},args:["aString"],source:">= aString\n\t<return String(self) >>= aString._asString()>",messageSends:[],referencedClasses:[]}),smalltalk.String);smalltalk.addMethod("_asJSON",smalltalk.method({selector:"asJSON",category:"converting",fn:function(){return this},args:[],source:"asJSON\n\t^self",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_asJavaScriptSelector",smalltalk.method({selector:"asJavaScriptSelector",category:"converting",fn:function(){return smalltalk.send(smalltalk.send(smalltalk.send(this,"_asSelector",[]),"_replace_with_",["^_",""]),"_replace_with_",["_.*",""])},args:[],source:"asJavaScriptSelector\n\t^(self asSelector replace: '^_' with: '') replace: '_.*' with: ''.",messageSends:["replace:with:","asSelector"],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_asJavascript",smalltalk.method({selector:"asJavascript",category:"converting",fn:function(){return this.search(/^[a-zA-Z0-9_:.$ ]*$/)==-1?'"'+this.replace(/[\x00-\x1f"\\\x7f-\x9f]/g,function(a){return"\\x"+("0"+a.charCodeAt(0).toString(16)).slice(-2)})+'"':'"'+this+'"'},args:[],source:'asJavascript\n\t<\n\t\tif(self.search(/^[a-zA-Z0-9_:.$ ]*$/) == -1)\n\t\t\treturn "\\"" + self.replace(/[\\x00-\\x1f"\\\\\\x7f-\\x9f]/g, function(ch){var c=ch.charCodeAt(0);return "\\\\x"+("0"+c.toString(16)).slice(-2)}) + "\\"";\n\t\telse\n\t\t\treturn "\\"" + self + "\\"";\n\t>',
messageSends:[],referencedClasses:[]}),smalltalk.String);smalltalk.addMethod("_asLowercase",smalltalk.method({selector:"asLowercase",category:"converting",fn:function(){return this.toLowerCase()},args:[],source:"asLowercase\n\t<return self.toLowerCase()>",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_asNumber",smalltalk.method({selector:"asNumber",category:"converting",fn:function(){return Number(this)},args:[],source:"asNumber\n\t<return Number(self)>",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_asSelector",smalltalk.method({selector:"asSelector",category:"converting",fn:function(){var a=nil,a=smalltalk.send("_","__comma",[this]),a=smalltalk.send(a,"_replace_with_",[":","_"]),a=smalltalk.send(a,"_replace_with_",["[+]","_plus"]),a=smalltalk.send(a,"_replace_with_",["-","_minus"]),a=smalltalk.send(a,"_replace_with_",["[*]","_star"]),a=smalltalk.send(a,"_replace_with_",["[/]","_slash"]),a=smalltalk.send(a,"_replace_with_",[">","_gt"]),a=smalltalk.send(a,"_replace_with_",
["<","_lt"]),a=smalltalk.send(a,"_replace_with_",["=","_eq"]),a=smalltalk.send(a,"_replace_with_",[",","_comma"]);return a=smalltalk.send(a,"_replace_with_",["[@]","_at"])},args:[],source:"asSelector\n\t\"If you change this method, change smalltalk.convertSelector too (see js/boot.js file)\"\n\n\t| selector |\n\tselector := '_', self.\n\tselector := selector replace: ':' with: '_'.\n\tselector := selector replace: '[+]' with: '_plus'.\n\tselector := selector replace: '-' with: '_minus'.\n\tselector := selector replace: '[*]' with: '_star'.\n\tselector := selector replace: '[/]' with: '_slash'.\n\tselector := selector replace: '>' with: '_gt'.\n\tselector := selector replace: '<' with: '_lt'.\n\tselector := selector replace: '=' with: '_eq'.\n\tselector := selector replace: ',' with: '_comma'.\n\tselector := selector replace: '[@]' with: '_at'.\n\t^selector",
messageSends:[",","replace:with:"],referencedClasses:[]}),smalltalk.String);smalltalk.addMethod("_asString",smalltalk.method({selector:"asString",category:"converting",fn:function(){return this},args:[],source:"asString\n\t^self",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_asSymbol",smalltalk.method({selector:"asSymbol",category:"converting",fn:function(){return smalltalk.send(smalltalk.Symbol||Symbol,"_lookup_",[this])},args:[],source:"asSymbol\n\t^Symbol lookup: self",messageSends:["lookup:"],referencedClasses:["Symbol"]}),smalltalk.String);
smalltalk.addMethod("_asUppercase",smalltalk.method({selector:"asUppercase",category:"converting",fn:function(){return this.toUpperCase()},args:[],source:"asUppercase\n\t<return self.toUpperCase()>",messageSends:[],referencedClasses:[]}),smalltalk.String);smalltalk.addMethod("_asciiValue",smalltalk.method({selector:"asciiValue",category:"accessing",fn:function(){return this.charCodeAt(0)},args:[],source:"asciiValue\n\t<return self.charCodeAt(0);>",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_at_ifAbsent_",smalltalk.method({selector:"at:ifAbsent:",category:"accessing",fn:function(a,b){return(""+this).charAt(a-1)||b()},args:["anIndex","aBlock"],source:"at: anIndex ifAbsent: aBlock\n\t<return String(self).charAt(anIndex - 1) || aBlock()>",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_copyFrom_to_",smalltalk.method({selector:"copyFrom:to:",category:"copying",fn:function(a,b){return this.substring(a-1,b)},args:["anIndex","anotherIndex"],source:"copyFrom: anIndex to: anotherIndex\n\t<return self.substring(anIndex - 1, anotherIndex)>",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_deepCopy",smalltalk.method({selector:"deepCopy",category:"copying",fn:function(){return smalltalk.send(this,"_shallowCopy",[])},args:[],source:"deepCopy\n\t^self shallowCopy",messageSends:["shallowCopy"],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_do_",smalltalk.method({selector:"do:",category:"enumerating",fn:function(a){for(var b=0;b<this.length;b++)a(this.charAt(b));return this},args:["aBlock"],source:"do: aBlock\n\t<for(var i=0;i<self.length;i++){aBlock(self.charAt(i));}>",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_escaped",smalltalk.method({selector:"escaped",category:"accessing",fn:function(){return escape(this)},args:[],source:"escaped\n\t<return escape(self)>",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_includesSubString_",smalltalk.method({selector:"includesSubString:",category:"testing",fn:function(a){return this.indexOf(a)!=-1},args:["subString"],source:"includesSubString: subString\n\t< return self.indexOf(subString) != -1 >",messageSends:[],referencedClasses:[]}),smalltalk.String);smalltalk.addMethod("_isString",smalltalk.method({selector:"isString",category:"testing",fn:function(){return true},args:[],source:"isString\n\t^true",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_join_",smalltalk.method({selector:"join:",category:"split join",fn:function(a){var b=this;return smalltalk.send(smalltalk.String||String,"_streamContents_",[function(c){return smalltalk.send(a,"_do_separatedBy_",[function(a){return smalltalk.send(c,"_nextPutAll_",[smalltalk.send(a,"_asString",[])])},function(){return smalltalk.send(c,"_nextPutAll_",[b])}])}])},args:["aCollection"],source:"join: aCollection \n\t^ String\n\t\tstreamContents: [:stream | aCollection\n\t\t\t\tdo: [:each | stream nextPutAll: each asString] \n\t\t\t\tseparatedBy: [stream nextPutAll: self]]",
messageSends:["streamContents:","do:separatedBy:","nextPutAll:","asString"],referencedClasses:["String"]}),smalltalk.String);
smalltalk.addMethod("_lineIndicesDo_",smalltalk.method({selector:"lineIndicesDo:",category:"split join",fn:function(a){var b=this,c={};try{var d=nil,e=nil,h=nil,i=nil,g=nil,f=nil,h=1,i=smalltalk.send(b,"_size",[]),d=smalltalk.send(smalltalk.String||String,"_cr",[]),f=smalltalk.send(b,"_indexOf_startingAt_",[d,1]),e=smalltalk.send(smalltalk.String||String,"_lf",[]),g=smalltalk.send(b,"_indexOf_startingAt_",[e,1]);(function(){for(;($receiver=h).klass===smalltalk.Number?$receiver<=i:smalltalk.send($receiver,
"__lt_eq",[i]);)(function(){if(($receiver=smalltalk.send(smalltalk.send(g,"__eq",[0]),"_and_",[function(){return smalltalk.send(f,"__eq",[0])}])).klass===smalltalk.Boolean){if($receiver){smalltalk.send(a,"_value_value_value_",[h,i,i]);throw c=[b];}}else smalltalk.send($receiver,"_ifTrue_",[function(){smalltalk.send(a,"_value_value_value_",[h,i,i]);throw c=[b];}]);var j;if(($receiver=smalltalk.send(smalltalk.send(f,"__eq",[0]),"_or_",[function(){return smalltalk.send(0<g,"_and_",[function(){return($receiver=
g).klass===smalltalk.Number?$receiver<f:smalltalk.send($receiver,"__lt",[f])}])}])).klass===smalltalk.Boolean)if($receiver){smalltalk.send(a,"_value_value_value_",[h,($receiver=g).klass===smalltalk.Number?$receiver-1:smalltalk.send($receiver,"__minus",[1]),g]);h=1+g;j=g=smalltalk.send(b,"_indexOf_startingAt_",[e,h])}else j=function(){var c;if(($receiver=smalltalk.send(1+f,"__eq",[g])).klass===smalltalk.Boolean)if($receiver){smalltalk.send(a,"_value_value_value_",[h,($receiver=f).klass===smalltalk.Number?
$receiver-1:smalltalk.send($receiver,"__minus",[1]),g]);h=1+g;f=smalltalk.send(b,"_indexOf_startingAt_",[d,h]);c=g=smalltalk.send(b,"_indexOf_startingAt_",[e,h])}else{smalltalk.send(a,"_value_value_value_",[h,($receiver=f).klass===smalltalk.Number?$receiver-1:smalltalk.send($receiver,"__minus",[1]),f]);h=1+f;c=f=smalltalk.send(b,"_indexOf_startingAt_",[d,h])}else c=smalltalk.send($receiver,"_ifTrue_ifFalse_",[function(){smalltalk.send(a,"_value_value_value_",[h,($receiver=f).klass===smalltalk.Number?
$receiver-1:smalltalk.send($receiver,"__minus",[1]),g]);h=1+g;f=smalltalk.send(b,"_indexOf_startingAt_",[d,h]);return g=smalltalk.send(b,"_indexOf_startingAt_",[e,h])},function(){smalltalk.send(a,"_value_value_value_",[h,($receiver=f).klass===smalltalk.Number?$receiver-1:smalltalk.send($receiver,"__minus",[1]),f]);h=1+f;return f=smalltalk.send(b,"_indexOf_startingAt_",[d,h])}]);return c}();else j=smalltalk.send($receiver,"_ifTrue_ifFalse_",[function(){smalltalk.send(a,"_value_value_value_",[h,($receiver=
g).klass===smalltalk.Number?$receiver-1:smalltalk.send($receiver,"__minus",[1]),g]);h=1+g;return g=smalltalk.send(b,"_indexOf_startingAt_",[e,h])},function(){var c;if(($receiver=smalltalk.send(1+f,"__eq",[g])).klass===smalltalk.Boolean)if($receiver){smalltalk.send(a,"_value_value_value_",[h,($receiver=f).klass===smalltalk.Number?$receiver-1:smalltalk.send($receiver,"__minus",[1]),g]);h=1+g;f=smalltalk.send(b,"_indexOf_startingAt_",[d,h]);c=g=smalltalk.send(b,"_indexOf_startingAt_",[e,h])}else{smalltalk.send(a,
"_value_value_value_",[h,($receiver=f).klass===smalltalk.Number?$receiver-1:smalltalk.send($receiver,"__minus",[1]),f]);h=1+f;c=f=smalltalk.send(b,"_indexOf_startingAt_",[d,h])}else c=smalltalk.send($receiver,"_ifTrue_ifFalse_",[function(){smalltalk.send(a,"_value_value_value_",[h,($receiver=f).klass===smalltalk.Number?$receiver-1:smalltalk.send($receiver,"__minus",[1]),g]);h=1+g;f=smalltalk.send(b,"_indexOf_startingAt_",[d,h]);return g=smalltalk.send(b,"_indexOf_startingAt_",[e,h])},function(){smalltalk.send(a,
"_value_value_value_",[h,($receiver=f).klass===smalltalk.Number?$receiver-1:smalltalk.send($receiver,"__minus",[1]),f]);h=1+f;return f=smalltalk.send(b,"_indexOf_startingAt_",[d,h])}]);return c}]);return j})()})();return b}catch(j){if(j===c)return j[0];throw j;}},args:["aBlock"],source:'lineIndicesDo: aBlock\n\t"execute aBlock with 3 arguments for each line:\n\t- start index of line\n\t- end index of line without line delimiter\n\t- end index of line including line delimiter(s) CR, LF or CRLF"\n\t\n\t| cr lf start sz nextLF nextCR |\n\tstart := 1.\n\tsz := self size.\n\tcr := String cr.\n\tnextCR := self indexOf: cr startingAt: 1.\n\tlf := String lf.\n\tnextLF := self indexOf: lf startingAt: 1.\n\t[ start <= sz ] whileTrue: [\n\t\t(nextLF = 0 and: [ nextCR = 0 ])\n\t\t\tifTrue: [ "No more CR, nor LF, the string is over"\n\t\t\t\t\taBlock value: start value: sz value: sz.\n\t\t\t\t\t^self ].\n\t\t(nextCR = 0 or: [ 0 < nextLF and: [ nextLF < nextCR ] ])\n\t\t\tifTrue: [ "Found a LF"\n\t\t\t\t\taBlock value: start value: nextLF - 1 value: nextLF.\n\t\t\t\t\tstart := 1 + nextLF.\n\t\t\t\t\tnextLF := self indexOf: lf startingAt: start ]\n\t\t\tifFalse: [ 1 + nextCR = nextLF\n\t\t\t\tifTrue: [ "Found a CR-LF pair"\n\t\t\t\t\taBlock value: start value: nextCR - 1 value: nextLF.\n\t\t\t\t\tstart := 1 + nextLF.\n\t\t\t\t\tnextCR := self indexOf: cr startingAt: start.\n\t\t\t\t\tnextLF := self indexOf: lf startingAt: start ]\n\t\t\t\tifFalse: [ "Found a CR"\n\t\t\t\t\taBlock value: start value: nextCR - 1 value: nextCR.\n\t\t\t\t\tstart := 1 + nextCR.\n\t\t\t\t\tnextCR := self indexOf: cr startingAt: start ]]]',
messageSends:"size,cr,indexOf:startingAt:,lf,whileTrue:,<=,ifTrue:,and:,=,value:value:value:,ifTrue:ifFalse:,or:,<,-,+".split(","),referencedClasses:["String"]}),smalltalk.String);
smalltalk.addMethod("_lineNumber_",smalltalk.method({selector:"lineNumber:",category:"split join",fn:function(a){var b=this,c={};try{var d=nil,d=0;smalltalk.send(b,"_lineIndicesDo_",[function(e,i){var g;if(($receiver=smalltalk.send(d=($receiver=d).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,"__plus",[1]),"__eq",[a])).klass===smalltalk.Boolean){if($receiver)throw c=[smalltalk.send(b,"_copyFrom_to_",[e,i])];g=nil}else g=smalltalk.send($receiver,"_ifTrue_",[function(){throw c=[smalltalk.send(b,
"_copyFrom_to_",[e,i])];}]);return g}]);return nil}catch(e){if(e===c)return e[0];throw e;}},args:["anIndex"],source:'lineNumber: anIndex\n\t"Answer a string containing the characters in the given line number."\n\n\t| lineCount |\n\tlineCount := 0.\n\tself lineIndicesDo: [:start :endWithoutDelimiters :end |\n\t\t(lineCount := lineCount + 1) = anIndex ifTrue: [^self copyFrom: start to: endWithoutDelimiters]].\n\t^nil',messageSends:["lineIndicesDo:","ifTrue:","=","+","copyFrom:to:"],referencedClasses:[]}),
smalltalk.String);
smalltalk.addMethod("_lines",smalltalk.method({selector:"lines",category:"split join",fn:function(){var a=nil,a=smalltalk.send(smalltalk.Array||Array,"_new",[]);smalltalk.send(this,"_linesDo_",[function(b){return smalltalk.send(a,"_add_",[b])}]);return a},args:[],source:'lines\n\t"Answer an array of lines composing this receiver without the line ending delimiters."\n\n\t| lines |\n\tlines := Array new.\n\tself linesDo: [:aLine | lines add: aLine].\n\t^lines',messageSends:["new","linesDo:","add:"],
referencedClasses:["Array"]}),smalltalk.String);
smalltalk.addMethod("_linesDo_",smalltalk.method({selector:"linesDo:",category:"split join",fn:function(a){var b=this;smalltalk.send(b,"_lineIndicesDo_",[function(c,d){return smalltalk.send(a,"_value_",[smalltalk.send(b,"_copyFrom_to_",[c,d])])}]);return b},args:["aBlock"],source:'linesDo: aBlock\n\t"Execute aBlock with each line in this string. The terminating line\n\tdelimiters CR, LF or CRLF pairs are not included in what is passed to aBlock"\n\n\tself lineIndicesDo: [:start :endWithoutDelimiters :end |\n\t\taBlock value: (self copyFrom: start to: endWithoutDelimiters)]',messageSends:["lineIndicesDo:",
"value:","copyFrom:to:"],referencedClasses:[]}),smalltalk.String);smalltalk.addMethod("_match_",smalltalk.method({selector:"match:",category:"regular expressions",fn:function(a){return this.search(a)!=-1},args:["aRegexp"],source:"match: aRegexp\n\t<return self.search(aRegexp) != -1>",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_matchesOf_",smalltalk.method({selector:"matchesOf:",category:"regular expressions",fn:function(a){return this.match(a)},args:["aRegularExpression"],source:"matchesOf: aRegularExpression\n      <return self.match(aRegularExpression)>",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_printNl",smalltalk.method({selector:"printNl",category:"printing",fn:function(){console.log(this);return this},args:[],source:"printNl\n\t<console.log(self)>",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"printing",fn:function(){return smalltalk.send(smalltalk.send("'","__comma",[this]),"__comma",["'"])},args:[],source:"printString\n\t^'''', self, ''''",messageSends:[","],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_replace_with_",smalltalk.method({selector:"replace:with:",category:"regular expressions",fn:function(a,b){return smalltalk.send(this,"_replaceRegexp_with_",[smalltalk.send(smalltalk.RegularExpression||RegularExpression,"_fromString_flag_",[a,"g"]),b])},args:["aString","anotherString"],source:"replace: aString with: anotherString\n\t^self replaceRegexp: (RegularExpression fromString: aString flag: 'g') with: anotherString",messageSends:["replaceRegexp:with:","fromString:flag:"],
referencedClasses:["RegularExpression"]}),smalltalk.String);smalltalk.addMethod("_replaceRegexp_with_",smalltalk.method({selector:"replaceRegexp:with:",category:"regular expressions",fn:function(a,b){return this.replace(a,b)},args:["aRegexp","aString"],source:"replaceRegexp: aRegexp with: aString\n\t<return self.replace(aRegexp, aString)>",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_reversed",smalltalk.method({selector:"reversed",category:"converting",fn:function(){return this.split("").reverse().join("")},args:[],source:'reversed\n\t<return self.split("").reverse().join("")>',messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_shallowCopy",smalltalk.method({selector:"shallowCopy",category:"copying",fn:function(){return smalltalk.send(smalltalk.send(this,"_class",[]),"_fromString_",[this])},args:[],source:"shallowCopy\n\t^self class fromString: self",messageSends:["fromString:","class"],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_size",smalltalk.method({selector:"size",category:"accessing",fn:function(){return this.length},args:[],source:"size\n\t<return self.length>",messageSends:[],referencedClasses:[]}),smalltalk.String);smalltalk.addMethod("_tokenize_",smalltalk.method({selector:"tokenize:",category:"converting",fn:function(a){return this.split(a)},args:["aString"],source:"tokenize: aString\n\t<return self.split(aString)>",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_trimBoth",smalltalk.method({selector:"trimBoth",category:"regular expressions",fn:function(){return smalltalk.send(this,"_trimBoth_",["\\s"])},args:[],source:"trimBoth\n\t^self trimBoth: '\\s'",messageSends:["trimBoth:"],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_trimBoth_",smalltalk.method({selector:"trimBoth:",category:"regular expressions",fn:function(a){return smalltalk.send(smalltalk.send(this,"_trimLeft_",[a]),"_trimRight_",[a])},args:["separators"],source:"trimBoth: separators\n\n\t^(self trimLeft: separators) trimRight: separators",messageSends:["trimRight:","trimLeft:"],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_trimLeft",smalltalk.method({selector:"trimLeft",category:"regular expressions",fn:function(){return smalltalk.send(this,"_trimLeft_",["\\s"])},args:[],source:"trimLeft\n\t^self trimLeft: '\\s'",messageSends:["trimLeft:"],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_trimLeft_",smalltalk.method({selector:"trimLeft:",category:"regular expressions",fn:function(a){return smalltalk.send(this,"_replaceRegexp_with_",[smalltalk.send(smalltalk.RegularExpression||RegularExpression,"_fromString_flag_",[smalltalk.send(smalltalk.send("^[","__comma",[a]),"__comma",["]+"]),"g"]),""])},args:["separators"],source:"trimLeft: separators\n\n\t^self replaceRegexp: (RegularExpression fromString: '^[', separators, ']+' flag: 'g') with: ''",messageSends:["replaceRegexp:with:",
"fromString:flag:",","],referencedClasses:["RegularExpression"]}),smalltalk.String);smalltalk.addMethod("_trimRight",smalltalk.method({selector:"trimRight",category:"regular expressions",fn:function(){return smalltalk.send(this,"_trimRight_",["\\s"])},args:[],source:"trimRight\n\t^self trimRight: '\\s'",messageSends:["trimRight:"],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_trimRight_",smalltalk.method({selector:"trimRight:",category:"regular expressions",fn:function(a){return smalltalk.send(this,"_replaceRegexp_with_",[smalltalk.send(smalltalk.RegularExpression||RegularExpression,"_fromString_flag_",[smalltalk.send(smalltalk.send("[","__comma",[a]),"__comma",["]+$"]),"g"]),""])},args:["separators"],source:"trimRight: separators\n\n\t^self replaceRegexp: (RegularExpression fromString: '[', separators, ']+$' flag: 'g') with: ''",messageSends:["replaceRegexp:with:",
"fromString:flag:",","],referencedClasses:["RegularExpression"]}),smalltalk.String);smalltalk.addMethod("_unescaped",smalltalk.method({selector:"unescaped",category:"accessing",fn:function(){return unescape(this)},args:[],source:"unescaped\n\t<return unescape(self)>",messageSends:[],referencedClasses:[]}),smalltalk.String);
smalltalk.addMethod("_cr",smalltalk.method({selector:"cr",category:"accessing",fn:function(){return"\r"},args:[],source:"cr\n\t<return '\\r'>",messageSends:[],referencedClasses:[]}),smalltalk.String.klass);smalltalk.addMethod("_crlf",smalltalk.method({selector:"crlf",category:"accessing",fn:function(){return"\r\n"},args:[],source:"crlf\n\t<return '\\r\\n'>",messageSends:[],referencedClasses:[]}),smalltalk.String.klass);
smalltalk.addMethod("_fromString_",smalltalk.method({selector:"fromString:",category:"instance creation",fn:function(a){return new this.fn(a)},args:["aString"],source:"fromString: aString\n\t    <return new self.fn(aString)>",messageSends:[],referencedClasses:[]}),smalltalk.String.klass);smalltalk.addMethod("_lf",smalltalk.method({selector:"lf",category:"accessing",fn:function(){return"\n"},args:[],source:"lf\n\t<return '\\n'>",messageSends:[],referencedClasses:[]}),smalltalk.String.klass);
smalltalk.addMethod("_space",smalltalk.method({selector:"space",category:"accessing",fn:function(){return" "},args:[],source:"space\n\t<return ' '>",messageSends:[],referencedClasses:[]}),smalltalk.String.klass);smalltalk.addMethod("_streamClass",smalltalk.method({selector:"streamClass",category:"accessing",fn:function(){return smalltalk.StringStream||StringStream},args:[],source:"streamClass\n\t    ^StringStream",messageSends:[],referencedClasses:["StringStream"]}),smalltalk.String.klass);
smalltalk.addMethod("_streamContents_",smalltalk.method({selector:"streamContents:",category:"instance creation",fn:function(a){var b=nil,b=smalltalk.send(smalltalk.send(this,"_streamClass",[]),"_on_",[smalltalk.send(smalltalk.String||String,"_new",[])]);smalltalk.send(a,"_value_",[b]);return smalltalk.send(b,"_contents",[])},args:["blockWithArg"],source:"streamContents: blockWithArg\n\t|stream|\n\tstream := (self streamClass on: String new).\n\tblockWithArg value: stream.\n\t^ stream contents",messageSends:["on:",
"streamClass","new","value:","contents"],referencedClasses:["String"]}),smalltalk.String.klass);smalltalk.addMethod("_tab",smalltalk.method({selector:"tab",category:"accessing",fn:function(){return"\t"},args:[],source:"tab\n\t<return '\\t'>",messageSends:[],referencedClasses:[]}),smalltalk.String.klass);
smalltalk.addMethod("_value_",smalltalk.method({selector:"value:",category:"instance creation",fn:function(a){return String.fromCharCode(a)},args:["aUTFCharCode"],source:"value: aUTFCharCode\n\n\t<return String.fromCharCode(aUTFCharCode);>",messageSends:[],referencedClasses:[]}),smalltalk.String.klass);smalltalk.addClass("Symbol",smalltalk.CharacterArray,[],"Kernel-Collections");
smalltalk.addMethod("__lt",smalltalk.method({selector:"<",category:"comparing",fn:function(a){return($receiver=smalltalk.send(this,"_asString",[])).klass===smalltalk.Number?$receiver<smalltalk.send(a,"_asString",[]):smalltalk.send($receiver,"__lt",[smalltalk.send(a,"_asString",[])])},args:["aSymbol"],source:"< aSymbol\n\t^self asString < aSymbol asString",messageSends:["<","asString"],referencedClasses:[]}),smalltalk.Symbol);
smalltalk.addMethod("__lt_eq",smalltalk.method({selector:"<=",category:"comparing",fn:function(a){return($receiver=smalltalk.send(this,"_asString",[])).klass===smalltalk.Number?$receiver<=smalltalk.send(a,"_asString",[]):smalltalk.send($receiver,"__lt_eq",[smalltalk.send(a,"_asString",[])])},args:["aSymbol"],source:"<= aSymbol\n\t^self asString <= aSymbol asString",messageSends:["<=","asString"],referencedClasses:[]}),smalltalk.Symbol);
smalltalk.addMethod("__eq",smalltalk.method({selector:"=",category:"comparing",fn:function(a){var b={};try{if(($receiver=smalltalk.send(smalltalk.send(a,"_class",[]),"__eq",[smalltalk.send(this,"_class",[])])).klass===smalltalk.Boolean){if(!$receiver)throw b=[false];}else smalltalk.send($receiver,"_ifFalse_",[function(){throw b=[false];}]);return smalltalk.send(smalltalk.send(this,"_asString",[]),"__eq",[smalltalk.send(a,"_asString",[])])}catch(c){if(c===b)return c[0];throw c;}},args:["aSymbol"],
source:"= aSymbol\n\taSymbol class = self class ifFalse: [^false].\n\t^self asString = aSymbol asString",messageSends:["ifFalse:","=","class","asString"],referencedClasses:[]}),smalltalk.Symbol);
smalltalk.addMethod("__gt",smalltalk.method({selector:">",category:"comparing",fn:function(a){return($receiver=smalltalk.send(this,"_asString",[])).klass===smalltalk.Number?$receiver>smalltalk.send(a,"_asString",[]):smalltalk.send($receiver,"__gt",[smalltalk.send(a,"_asString",[])])},args:["aSymbol"],source:"> aSymbol\n\t^self asString > aSymbol asString",messageSends:[">","asString"],referencedClasses:[]}),smalltalk.Symbol);
smalltalk.addMethod("__gt_eq",smalltalk.method({selector:">=",category:"comparing",fn:function(a){return($receiver=smalltalk.send(this,"_asString",[])).klass===smalltalk.Number?$receiver>=smalltalk.send(a,"_asString",[]):smalltalk.send($receiver,"__gt_eq",[smalltalk.send(a,"_asString",[])])},args:["aSymbol"],source:">= aSymbol\n\t^self asString >= aSymbol asString",messageSends:[">=","asString"],referencedClasses:[]}),smalltalk.Symbol);
smalltalk.addMethod("_asJSON",smalltalk.method({selector:"asJSON",category:"converting",fn:function(){return smalltalk.send(smalltalk.send(this,"_asString",[]),"_asJSON",[])},args:[],source:"asJSON\n\t^self asString asJSON",messageSends:["asJSON","asString"],referencedClasses:[]}),smalltalk.Symbol);
smalltalk.addMethod("_asJavascript",smalltalk.method({selector:"asJavascript",category:"converting",fn:function(){return smalltalk.send(smalltalk.send('smalltalk.symbolFor("',"__comma",[smalltalk.send(this,"_asString",[])]),"__comma",['")'])},args:[],source:"asJavascript\n\t^'smalltalk.symbolFor(\"', self asString, '\")'",messageSends:[",","asString"],referencedClasses:[]}),smalltalk.Symbol);
smalltalk.addMethod("_asSelector",smalltalk.method({selector:"asSelector",category:"converting",fn:function(){return smalltalk.send(smalltalk.send(this,"_asString",[]),"_asSelector",[])},args:[],source:"asSelector\n\t^self asString asSelector",messageSends:["asSelector","asString"],referencedClasses:[]}),smalltalk.Symbol);
smalltalk.addMethod("_asString",smalltalk.method({selector:"asString",category:"converting",fn:function(){return this.value},args:[],source:"asString\n\t<return self.value>",messageSends:[],referencedClasses:[]}),smalltalk.Symbol);smalltalk.addMethod("_asSymbol",smalltalk.method({selector:"asSymbol",category:"converting",fn:function(){return this},args:[],source:"asSymbol\n\t^self",messageSends:[],referencedClasses:[]}),smalltalk.Symbol);
smalltalk.addMethod("_at_ifAbsent_",smalltalk.method({selector:"at:ifAbsent:",category:"accessing",fn:function(a,b){return smalltalk.send(smalltalk.send(this,"_asString",[]),"_at_ifAbsent_",[a,b])},args:["anIndex","aBlock"],source:"at: anIndex ifAbsent: aBlock\n\t^self asString at: anIndex ifAbsent: aBlock",messageSends:["at:ifAbsent:","asString"],referencedClasses:[]}),smalltalk.Symbol);
smalltalk.addMethod("_copyFrom_to_",smalltalk.method({selector:"copyFrom:to:",category:"copying",fn:function(a,b){return smalltalk.send(smalltalk.send(this,"_class",[]),"_fromString_",[smalltalk.send(smalltalk.send(this,"_asString",[]),"_copyFrom_to_",[a,b])])},args:["anIndex","anotherIndex"],source:"copyFrom: anIndex to: anotherIndex\n\t^self class fromString: (self asString copyFrom: anIndex to: anotherIndex)",messageSends:["fromString:","class","copyFrom:to:","asString"],referencedClasses:[]}),
smalltalk.Symbol);smalltalk.addMethod("_deepCopy",smalltalk.method({selector:"deepCopy",category:"copying",fn:function(){return this},args:[],source:"deepCopy\n\t^self",messageSends:[],referencedClasses:[]}),smalltalk.Symbol);smalltalk.addMethod("_isSymbol",smalltalk.method({selector:"isSymbol",category:"printing",fn:function(){return true},args:[],source:"isSymbol\n\t^true",messageSends:[],referencedClasses:[]}),smalltalk.Symbol);
smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"printing",fn:function(){return smalltalk.send("#","__comma",[smalltalk.send(this,"_asString",[])])},args:[],source:"printString\n\t^'#', self asString",messageSends:[",","asString"],referencedClasses:[]}),smalltalk.Symbol);
smalltalk.addMethod("_shallowCopy",smalltalk.method({selector:"shallowCopy",category:"copying",fn:function(){return this},args:[],source:"shallowCopy\n\t^self",messageSends:[],referencedClasses:[]}),smalltalk.Symbol);smalltalk.addMethod("_size",smalltalk.method({selector:"size",category:"accessing",fn:function(){return smalltalk.send(smalltalk.send(this,"_asString",[]),"_size",[])},args:[],source:"size\n\t^self asString size",messageSends:["size","asString"],referencedClasses:[]}),smalltalk.Symbol);
smalltalk.addMethod("_basicNew",smalltalk.method({selector:"basicNew",category:"instance creation",fn:function(){smalltalk.send(this,"_shouldNotImplement",[]);return this},args:[],source:"basicNew\n\tself shouldNotImplement",messageSends:["shouldNotImplement"],referencedClasses:[]}),smalltalk.Symbol.klass);
smalltalk.addMethod("_fromString_",smalltalk.method({selector:"fromString:",category:"instance creation",fn:function(a){return smalltalk.send(this,"_lookup_",[a])},args:["aString"],source:"fromString: aString\n\t^self lookup: aString",messageSends:["lookup:"],referencedClasses:[]}),smalltalk.Symbol.klass);
smalltalk.addMethod("_lookup_",smalltalk.method({selector:"lookup:",category:"instance creation",fn:function(a){return smalltalk.symbolFor(a)},args:["aString"],source:"lookup: aString\n\t<return smalltalk.symbolFor(aString);>",messageSends:[],referencedClasses:[]}),smalltalk.Symbol.klass);smalltalk.addClass("Set",smalltalk.Collection,["elements"],"Kernel-Collections");
smalltalk.addMethod("__eq",smalltalk.method({selector:"=",category:"comparing",fn:function(a){var b=this;return smalltalk.send(smalltalk.send(smalltalk.send(b,"_class",[]),"__eq",[smalltalk.send(a,"_class",[])]),"_and_",[function(){return smalltalk.send(b["@elements"],"__eq",[smalltalk.send(a,"_asArray",[])])}])},args:["aCollection"],source:"= aCollection\n\t^self class = aCollection class and: [\n\t\telements = aCollection asArray]",messageSends:["and:","=","class","asArray"],referencedClasses:[]}),
smalltalk.Set);
smalltalk.addMethod("_add_",smalltalk.method({selector:"add:",category:"adding/removing",fn:function(a){for(var b,c=0;c<this["@elements"].length;c++)if(a==this["@elements"][c]){b=true;break}b||this["@elements"].push(a);return this},args:["anObject"],source:"add: anObject\n\t<\n\t\tvar found;\n\t\tfor(var i=0; i < self['@elements'].length; i++) {\n\t\t\tif(anObject == self['@elements'][i]) {\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!found) {self['@elements'].push(anObject)}\n\t>",messageSends:[],
referencedClasses:[]}),smalltalk.Set);smalltalk.addMethod("_asArray",smalltalk.method({selector:"asArray",category:"converting",fn:function(){return smalltalk.send(this["@elements"],"_copy",[])},args:[],source:"asArray\n\t^elements copy",messageSends:["copy"],referencedClasses:[]}),smalltalk.Set);
smalltalk.addMethod("_detect_ifNone_",smalltalk.method({selector:"detect:ifNone:",category:"enumerating",fn:function(a,b){return smalltalk.send(this["@elements"],"_detect_ifNone_",[a,b])},args:["aBlock","anotherBlock"],source:"detect: aBlock ifNone: anotherBlock\n\t^elements detect: aBlock ifNone: anotherBlock",messageSends:["detect:ifNone:"],referencedClasses:[]}),smalltalk.Set);
smalltalk.addMethod("_do_",smalltalk.method({selector:"do:",category:"enumerating",fn:function(a){smalltalk.send(this["@elements"],"_do_",[a]);return this},args:["aBlock"],source:"do: aBlock\n\telements do: aBlock",messageSends:["do:"],referencedClasses:[]}),smalltalk.Set);
smalltalk.addMethod("_includes_",smalltalk.method({selector:"includes:",category:"testing",fn:function(a){return smalltalk.send(this["@elements"],"_includes_",[a])},args:["anObject"],source:"includes: anObject\n\t^elements includes: anObject",messageSends:["includes:"],referencedClasses:[]}),smalltalk.Set);
smalltalk.addMethod("_initialize",smalltalk.method({selector:"initialize",category:"initialization",fn:function(){smalltalk.send(this,"_initialize",[],smalltalk.Set.superclass||nil);this["@elements"]=[];return this},args:[],source:"initialize\n\tsuper initialize.\n\telements := #()",messageSends:["initialize"],referencedClasses:[]}),smalltalk.Set);
smalltalk.addMethod("_printString",smalltalk.method({selector:"printString",category:"printing",fn:function(){var a=this;return smalltalk.send(smalltalk.String||String,"_streamContents_",[function(b){smalltalk.send(b,"_nextPutAll_",[smalltalk.send(smalltalk.send(a,"_printString",[],smalltalk.Set.superclass||nil),"__comma",[" ("])]);smalltalk.send(a,"_do_separatedBy_",[function(a){return smalltalk.send(b,"_nextPutAll_",[smalltalk.send(a,"_printString",[])])},function(){return smalltalk.send(b,"_nextPutAll_",
[" "])}]);return smalltalk.send(b,"_nextPutAll_",[")"])}])},args:[],source:"printString\n\t\"print the contents of the Set into a string and return it\"\n\t^String streamContents: [:aStream |\n\t\taStream\n\t\t\tnextPutAll: super printString, ' ('.\n\t\tself do: [:each | aStream nextPutAll: each printString]\n\t\t\tseparatedBy: [aStream nextPutAll: ' '].\n\t\taStream nextPutAll: ')'.]",messageSends:["streamContents:","nextPutAll:",",","printString","do:separatedBy:"],referencedClasses:["String"]}),
smalltalk.Set);smalltalk.addMethod("_remove_",smalltalk.method({selector:"remove:",category:"adding/removing",fn:function(a){smalltalk.send(this["@elements"],"_remove_",[a]);return this},args:["anObject"],source:"remove: anObject\n\telements remove: anObject",messageSends:["remove:"],referencedClasses:[]}),smalltalk.Set);
smalltalk.addMethod("_select_",smalltalk.method({selector:"select:",category:"enumerating",fn:function(a){var b=nil,b=smalltalk.send(smalltalk.send(this,"_class",[]),"_new",[]);smalltalk.send(this,"_do_",[function(c){return($receiver=smalltalk.send(a,"_value_",[c])).klass===smalltalk.Boolean?$receiver?smalltalk.send(b,"_add_",[c]):nil:smalltalk.send($receiver,"_ifTrue_",[function(){return smalltalk.send(b,"_add_",[c])}])}]);return b},args:["aBlock"],source:"select: aBlock\n\t| collection |\n\tcollection := self class new. \n\tself do: [:each |\n\t\t(aBlock value: each) ifTrue: [\n\t\t\tcollection add: each]].\n\t^collection",
messageSends:"new,class,do:,ifTrue:,value:,add:".split(","),referencedClasses:[]}),smalltalk.Set);smalltalk.addMethod("_size",smalltalk.method({selector:"size",category:"accessing",fn:function(){return smalltalk.send(this["@elements"],"_size",[])},args:[],source:"size\n\t^elements size",messageSends:["size"],referencedClasses:[]}),smalltalk.Set);smalltalk.addClass("RegularExpression",smalltalk.Object,[],"Kernel-Collections");
smalltalk.addMethod("_compile_",smalltalk.method({selector:"compile:",category:"evaluating",fn:function(a){return this.compile(a)},args:["aString"],source:"compile: aString\n\t<return self.compile(aString)>",messageSends:[],referencedClasses:[]}),smalltalk.RegularExpression);
smalltalk.addMethod("_exec_",smalltalk.method({selector:"exec:",category:"evaluating",fn:function(a){return this.exec(a)||nil},args:["aString"],source:"exec: aString\n\t<return self.exec(aString) || nil>",messageSends:[],referencedClasses:[]}),smalltalk.RegularExpression);
smalltalk.addMethod("_test_",smalltalk.method({selector:"test:",category:"evaluating",fn:function(a){return this.test(a)},args:["aString"],source:"test: aString\n\t<return self.test(aString)>",messageSends:[],referencedClasses:[]}),smalltalk.RegularExpression);
smalltalk.addMethod("_fromString_",smalltalk.method({selector:"fromString:",category:"instance creation",fn:function(a){return smalltalk.send(this,"_fromString_flag_",[a,""])},args:["aString"],source:"fromString: aString\n\t    ^self fromString: aString flag: ''",messageSends:["fromString:flag:"],referencedClasses:[]}),smalltalk.RegularExpression.klass);
smalltalk.addMethod("_fromString_flag_",smalltalk.method({selector:"fromString:flag:",category:"instance creation",fn:function(a,b){return RegExp(a,b)},args:["aString","anotherString"],source:"fromString: aString flag: anotherString\n\t<return new RegExp(aString, anotherString)>",messageSends:[],referencedClasses:[]}),smalltalk.RegularExpression.klass);smalltalk.addClass("Stream",smalltalk.Object,["collection","position","streamSize"],"Kernel-Collections");
smalltalk.addMethod("_atEnd",smalltalk.method({selector:"atEnd",category:"testing",fn:function(){return smalltalk.send(smalltalk.send(this,"_position",[]),"__eq",[smalltalk.send(this,"_size",[])])},args:[],source:"atEnd\n\t^self position = self size",messageSends:["=","position","size"],referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_atStart",smalltalk.method({selector:"atStart",category:"testing",fn:function(){return smalltalk.send(smalltalk.send(this,"_position",[]),"__eq",[0])},args:[],source:"atStart\n\t^self position = 0",messageSends:["=","position"],referencedClasses:[]}),smalltalk.Stream);smalltalk.addMethod("_close",smalltalk.method({selector:"close",category:"actions",fn:function(){return this},args:[],source:"close",messageSends:[],referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_collection",smalltalk.method({selector:"collection",category:"accessing",fn:function(){return this["@collection"]},args:[],source:"collection\n\t^collection",messageSends:[],referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_contents",smalltalk.method({selector:"contents",category:"accessing",fn:function(){return smalltalk.send(smalltalk.send(this,"_collection",[]),"_copyFrom_to_",[1,smalltalk.send(this,"_streamSize",[])])},args:[],source:"contents\n\t^self collection\n\t    copyFrom: 1 \n\t    to: self streamSize",messageSends:["copyFrom:to:","collection","streamSize"],referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_do_",smalltalk.method({selector:"do:",category:"enumerating",fn:function(a){for(;!smalltalk.send(this,"_atEnd",[]);)smalltalk.send(a,"_value_",[smalltalk.send(this,"_next",[])]);return this},args:["aBlock"],source:"do: aBlock\n\t[self atEnd] whileFalse: [aBlock value: self next]",messageSends:["whileFalse:","atEnd","value:","next"],referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_flush",smalltalk.method({selector:"flush",category:"actions",fn:function(){return this},args:[],source:"flush",messageSends:[],referencedClasses:[]}),smalltalk.Stream);smalltalk.addMethod("_isEmpty",smalltalk.method({selector:"isEmpty",category:"testing",fn:function(){return smalltalk.send(smalltalk.send(this,"_size",[]),"__eq",[0])},args:[],source:"isEmpty\n\t^self size = 0",messageSends:["=","size"],referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_next",smalltalk.method({selector:"next",category:"reading",fn:function(){var a=this,b;if(($receiver=smalltalk.send(a,"_atEnd",[])).klass===smalltalk.Boolean)if($receiver)b=nil;else{smalltalk.send(a,"_position_",[($receiver=smalltalk.send(a,"_position",[])).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,"__plus",[1])]);b=smalltalk.send(a["@collection"],"_at_",[smalltalk.send(a,"_position",[])])}else b=smalltalk.send($receiver,"_ifTrue_ifFalse_",[function(){return nil},
function(){smalltalk.send(a,"_position_",[($receiver=smalltalk.send(a,"_position",[])).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,"__plus",[1])]);return smalltalk.send(a["@collection"],"_at_",[smalltalk.send(a,"_position",[])])}]);return b},args:[],source:"next\n\t^self atEnd \n\t\tifTrue: [nil]\n\t\tifFalse: [\n\t\t\tself position: self position + 1. \n\t\t\tcollection at: self position]",messageSends:"ifTrue:ifFalse:,atEnd,position:,+,position,at:".split(","),referencedClasses:[]}),
smalltalk.Stream);
smalltalk.addMethod("_next_",smalltalk.method({selector:"next:",category:"reading",fn:function(a){var b=this,c=nil,c=smalltalk.send(smalltalk.send(smalltalk.send(b,"_collection",[]),"_class",[]),"_new",[]);smalltalk.send(a,"_timesRepeat_",[function(){return($receiver=smalltalk.send(b,"_atEnd",[])).klass===smalltalk.Boolean?!$receiver?smalltalk.send(c,"_add_",[smalltalk.send(b,"_next",[])]):nil:smalltalk.send($receiver,"_ifFalse_",[function(){return smalltalk.send(c,"_add_",[smalltalk.send(b,"_next",
[])])}])}]);return c},args:["anInteger"],source:"next: anInteger\n\t| tempCollection |\n\ttempCollection := self collection class new.\n\tanInteger timesRepeat: [\n\t    self atEnd ifFalse: [\n\t\ttempCollection add: self next]].\n\t^tempCollection",messageSends:"new,class,collection,timesRepeat:,ifFalse:,atEnd,add:,next".split(","),referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_nextPut_",smalltalk.method({selector:"nextPut:",category:"writing",fn:function(a){smalltalk.send(this,"_position_",[($receiver=smalltalk.send(this,"_position",[])).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,"__plus",[1])]);smalltalk.send(smalltalk.send(this,"_collection",[]),"_at_put_",[smalltalk.send(this,"_position",[]),a]);smalltalk.send(this,"_setStreamSize_",[smalltalk.send(smalltalk.send(this,"_streamSize",[]),"_max_",[smalltalk.send(this,"_position",
[])])]);return this},args:["anObject"],source:"nextPut: anObject\n\tself position: self position + 1.\n\tself collection at: self position put: anObject.\n\tself setStreamSize: (self streamSize max: self position)",messageSends:"position:,+,position,at:put:,collection,setStreamSize:,max:,streamSize".split(","),referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_nextPutAll_",smalltalk.method({selector:"nextPutAll:",category:"writing",fn:function(a){var b=this;smalltalk.send(a,"_do_",[function(a){return smalltalk.send(b,"_nextPut_",[a])}]);return b},args:["aCollection"],source:"nextPutAll: aCollection\n\taCollection do: [:each |\n\t    self nextPut: each]",messageSends:["do:","nextPut:"],referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_peek",smalltalk.method({selector:"peek",category:"reading",fn:function(){var a=this;return($receiver=smalltalk.send(a,"_atEnd",[])).klass===smalltalk.Boolean?!$receiver?smalltalk.send(smalltalk.send(a,"_collection",[]),"_at_",[($receiver=smalltalk.send(a,"_position",[])).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,"__plus",[1])]):nil:smalltalk.send($receiver,"_ifFalse_",[function(){return smalltalk.send(smalltalk.send(a,"_collection",[]),"_at_",[($receiver=
smalltalk.send(a,"_position",[])).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,"__plus",[1])])}])},args:[],source:"peek\n\t^self atEnd ifFalse: [\n\t    self collection at: self position + 1]",messageSends:"ifFalse:,atEnd,at:,collection,+,position".split(","),referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_position",smalltalk.method({selector:"position",category:"accessing",fn:function(){return($receiver=this["@position"])==nil||$receiver==void 0?this["@position"]=0:$receiver},args:[],source:"position\n\t^position ifNil: [position := 0]",messageSends:["ifNil:"],referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_position_",smalltalk.method({selector:"position:",category:"accessing",fn:function(a){this["@position"]=a;return this},args:["anInteger"],source:"position: anInteger\n\tposition := anInteger",messageSends:[],referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_reset",smalltalk.method({selector:"reset",category:"actions",fn:function(){smalltalk.send(this,"_position_",[0]);return this},args:[],source:"reset\n\tself position: 0",messageSends:["position:"],referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_resetContents",smalltalk.method({selector:"resetContents",category:"actions",fn:function(){smalltalk.send(this,"_reset",[]);smalltalk.send(this,"_setStreamSize_",[0]);return this},args:[],source:"resetContents\n\tself reset.\n\tself setStreamSize: 0",messageSends:["reset","setStreamSize:"],referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_setCollection_",smalltalk.method({selector:"setCollection:",category:"accessing",fn:function(a){this["@collection"]=a;return this},args:["aCollection"],source:"setCollection: aCollection\n\tcollection := aCollection",messageSends:[],referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_setStreamSize_",smalltalk.method({selector:"setStreamSize:",category:"accessing",fn:function(a){this["@streamSize"]=a;return this},args:["anInteger"],source:"setStreamSize: anInteger\n\tstreamSize := anInteger",messageSends:[],referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_setToEnd",smalltalk.method({selector:"setToEnd",category:"positioning",fn:function(){smalltalk.send(this,"_position_",[smalltalk.send(this,"_size",[])]);return this},args:[],source:"setToEnd\n\tself position: self size",messageSends:["position:","size"],referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_size",smalltalk.method({selector:"size",category:"accessing",fn:function(){return smalltalk.send(this,"_streamSize",[])},args:[],source:"size\n\t^self streamSize",messageSends:["streamSize"],referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_skip_",smalltalk.method({selector:"skip:",category:"positioning",fn:function(a){smalltalk.send(this,"_position_",[smalltalk.send(($receiver=smalltalk.send(this,"_position",[])).klass===smalltalk.Number?$receiver+a:smalltalk.send($receiver,"__plus",[a]),"_min_max_",[smalltalk.send(this,"_size",[]),0])]);return this},args:["anInteger"],source:"skip: anInteger\n\tself position: ((self position + anInteger) min: self size max: 0)",messageSends:["position:","min:max:","+","position",
"size"],referencedClasses:[]}),smalltalk.Stream);smalltalk.addMethod("_streamSize",smalltalk.method({selector:"streamSize",category:"accessing",fn:function(){return this["@streamSize"]},args:[],source:"streamSize\n\t^streamSize",messageSends:[],referencedClasses:[]}),smalltalk.Stream);
smalltalk.addMethod("_on_",smalltalk.method({selector:"on:",category:"instance creation",fn:function(a){var b=smalltalk.send(this,"_new",[]);smalltalk.send(b,"_setCollection_",[a]);smalltalk.send(b,"_setStreamSize_",[smalltalk.send(a,"_size",[])]);return smalltalk.send(b,"_yourself",[])},args:["aCollection"],source:"on: aCollection\n\t    ^self new \n\t\tsetCollection: aCollection;\n\t\tsetStreamSize: aCollection size;\n\t\tyourself",messageSends:["setCollection:","setStreamSize:","size","yourself",
"new"],referencedClasses:[]}),smalltalk.Stream.klass);smalltalk.addClass("StringStream",smalltalk.Stream,[],"Kernel-Collections");smalltalk.addMethod("_cr",smalltalk.method({selector:"cr",category:"writing",fn:function(){return smalltalk.send(this,"_nextPutAll_",[smalltalk.send(smalltalk.String||String,"_cr",[])])},args:[],source:"cr\n\t^self nextPutAll: String cr",messageSends:["nextPutAll:","cr"],referencedClasses:["String"]}),smalltalk.StringStream);
smalltalk.addMethod("_crlf",smalltalk.method({selector:"crlf",category:"writing",fn:function(){return smalltalk.send(this,"_nextPutAll_",[smalltalk.send(smalltalk.String||String,"_crlf",[])])},args:[],source:"crlf\n\t^self nextPutAll: String crlf",messageSends:["nextPutAll:","crlf"],referencedClasses:["String"]}),smalltalk.StringStream);
smalltalk.addMethod("_lf",smalltalk.method({selector:"lf",category:"writing",fn:function(){return smalltalk.send(this,"_nextPutAll_",[smalltalk.send(smalltalk.String||String,"_lf",[])])},args:[],source:"lf\n\t^self nextPutAll: String lf",messageSends:["nextPutAll:","lf"],referencedClasses:["String"]}),smalltalk.StringStream);
smalltalk.addMethod("_next_",smalltalk.method({selector:"next:",category:"reading",fn:function(a){var b=this,c=nil,c=smalltalk.send(smalltalk.send(smalltalk.send(b,"_collection",[]),"_class",[]),"_new",[]);smalltalk.send(a,"_timesRepeat_",[function(){return($receiver=smalltalk.send(b,"_atEnd",[])).klass===smalltalk.Boolean?!$receiver?c=smalltalk.send(c,"__comma",[smalltalk.send(b,"_next",[])]):nil:smalltalk.send($receiver,"_ifFalse_",[function(){return c=smalltalk.send(c,"__comma",[smalltalk.send(b,
"_next",[])])}])}]);return c},args:["anInteger"],source:"next: anInteger\n\t| tempCollection |\n\ttempCollection := self collection class new.\n\tanInteger timesRepeat: [\n\t    self atEnd ifFalse: [\n\t\ttempCollection := tempCollection, self next]].\n\t^tempCollection",messageSends:"new class collection timesRepeat: ifFalse: atEnd , next".split(" "),referencedClasses:[]}),smalltalk.StringStream);
smalltalk.addMethod("_nextPut_",smalltalk.method({selector:"nextPut:",category:"writing",fn:function(a){smalltalk.send(this,"_nextPutAll_",[a]);return this},args:["aString"],source:"nextPut: aString\n\tself nextPutAll: aString",messageSends:["nextPutAll:"],referencedClasses:[]}),smalltalk.StringStream);
smalltalk.addMethod("_nextPutAll_",smalltalk.method({selector:"nextPutAll:",category:"writing",fn:function(a){smalltalk.send(this,"_setCollection_",[smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.send(this,"_collection",[]),"_copyFrom_to_",[1,smalltalk.send(this,"_position",[])]),"__comma",[a]),"__comma",[smalltalk.send(smalltalk.send(this,"_collection",[]),"_copyFrom_to_",[($receiver=($receiver=smalltalk.send(this,"_position",[])).klass===smalltalk.Number?$receiver+1:smalltalk.send($receiver,
"__plus",[1])).klass===smalltalk.Number?$receiver+smalltalk.send(a,"_size",[]):smalltalk.send($receiver,"__plus",[smalltalk.send(a,"_size",[])]),smalltalk.send(smalltalk.send(this,"_collection",[]),"_size",[])])])]);smalltalk.send(this,"_position_",[($receiver=smalltalk.send(this,"_position",[])).klass===smalltalk.Number?$receiver+smalltalk.send(a,"_size",[]):smalltalk.send($receiver,"__plus",[smalltalk.send(a,"_size",[])])]);smalltalk.send(this,"_setStreamSize_",[smalltalk.send(smalltalk.send(this,
"_streamSize",[]),"_max_",[smalltalk.send(this,"_position",[])])]);return this},args:["aString"],source:"nextPutAll: aString\n\tself setCollection: \n\t    (self collection copyFrom: 1 to: self position),\n\t    aString,\n\t    (self collection copyFrom: (self position + 1 + aString size) to: self collection size).\n\tself position: self position + aString size.\n\tself setStreamSize: (self streamSize max: self position)",messageSends:"setCollection: , copyFrom:to: collection position + size position: setStreamSize: max: streamSize".split(" "),
referencedClasses:[]}),smalltalk.StringStream);smalltalk.addMethod("_space",smalltalk.method({selector:"space",category:"writing",fn:function(){smalltalk.send(this,"_nextPut_",[" "]);return this},args:[],source:"space\n\tself nextPut: ' '",messageSends:["nextPut:"],referencedClasses:[]}),smalltalk.StringStream);smalltalk.addPackage("Kernel-Exceptions",{});smalltalk.addClass("Error",smalltalk.Object,["messageText"],"Kernel-Exceptions");
smalltalk.addMethod("_context",smalltalk.method({selector:"context",category:"accessing",fn:function(){return this.context},args:[],source:"context\n\t<return self.context>",messageSends:[],referencedClasses:[]}),smalltalk.Error);smalltalk.addMethod("_isSmalltalkError",smalltalk.method({selector:"isSmalltalkError",category:"testing",fn:function(){return this.smalltalkError===true},args:[],source:"isSmalltalkError\n\t<return self.smalltalkError === true>",messageSends:[],referencedClasses:[]}),smalltalk.Error);
smalltalk.addMethod("_jsStack",smalltalk.method({selector:"jsStack",category:"accessing",fn:function(){return this.stack},args:[],source:"jsStack\n\t<return self.stack>",messageSends:[],referencedClasses:[]}),smalltalk.Error);smalltalk.addMethod("_messageText",smalltalk.method({selector:"messageText",category:"accessing",fn:function(){return this["@messageText"]},args:[],source:"messageText\n\t^messageText",messageSends:[],referencedClasses:[]}),smalltalk.Error);
smalltalk.addMethod("_messageText_",smalltalk.method({selector:"messageText:",category:"accessing",fn:function(a){this["@messageText"]=a;return this},args:["aString"],source:"messageText: aString\n\tmessageText := aString",messageSends:[],referencedClasses:[]}),smalltalk.Error);
smalltalk.addMethod("_signal",smalltalk.method({selector:"signal",category:"signaling",fn:function(){this.context=smalltalk.getThisContext();this.smalltalkError=true;throw this;},args:[],source:"signal\n\t<self.context = smalltalk.getThisContext(); self.smalltalkError = true; throw(self)>",messageSends:[],referencedClasses:[]}),smalltalk.Error);
smalltalk.addMethod("_signal_",smalltalk.method({selector:"signal:",category:"signaling",fn:function(a){smalltalk.send(this,"_messageText_",[a]);smalltalk.send(this,"_signal",[]);return this},args:["aString"],source:"signal: aString\n\tself messageText: aString.\n\tself signal",messageSends:["messageText:","signal"],referencedClasses:[]}),smalltalk.Error);
smalltalk.addMethod("_signal",smalltalk.method({selector:"signal",category:"instance creation",fn:function(){return smalltalk.send(smalltalk.send(this,"_new",[]),"_signal",[])},args:[],source:"signal\n\t^self new signal",messageSends:["signal","new"],referencedClasses:[]}),smalltalk.Error.klass);
smalltalk.addMethod("_signal_",smalltalk.method({selector:"signal:",category:"instance creation",fn:function(a){return smalltalk.send(smalltalk.send(this,"_new",[]),"_signal_",[a])},args:["aString"],source:"signal: aString\n\t    ^self new\n\t\tsignal: aString",messageSends:["signal:","new"],referencedClasses:[]}),smalltalk.Error.klass);smalltalk.addClass("MessageNotUnderstood",smalltalk.Error,["message","receiver"],"Kernel-Exceptions");
smalltalk.addMethod("_message",smalltalk.method({selector:"message",category:"accessing",fn:function(){return this["@message"]},args:[],source:"message\n\t^message",messageSends:[],referencedClasses:[]}),smalltalk.MessageNotUnderstood);smalltalk.addMethod("_message_",smalltalk.method({selector:"message:",category:"accessing",fn:function(a){this["@message"]=a;return this},args:["aMessage"],source:"message: aMessage\n\tmessage := aMessage",messageSends:[],referencedClasses:[]}),smalltalk.MessageNotUnderstood);
smalltalk.addMethod("_messageText",smalltalk.method({selector:"messageText",category:"accessing",fn:function(){return smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.send(this,"_receiver",[]),"_asString",[]),"__comma",[" does not understand #"]),"__comma",[smalltalk.send(smalltalk.send(this,"_message",[]),"_selector",[])])},args:[],source:"messageText\n\t^self receiver asString, ' does not understand #', self message selector",messageSends:[",","asString","receiver","selector","message"],referencedClasses:[]}),
smalltalk.MessageNotUnderstood);smalltalk.addMethod("_receiver",smalltalk.method({selector:"receiver",category:"accessing",fn:function(){return this["@receiver"]},args:[],source:"receiver\n\t^receiver",messageSends:[],referencedClasses:[]}),smalltalk.MessageNotUnderstood);
smalltalk.addMethod("_receiver_",smalltalk.method({selector:"receiver:",category:"accessing",fn:function(a){this["@receiver"]=a;return this},args:["anObject"],source:"receiver: anObject\n\treceiver := anObject",messageSends:[],referencedClasses:[]}),smalltalk.MessageNotUnderstood);smalltalk.addClass("ErrorHandler",smalltalk.Object,[],"Kernel-Exceptions");
smalltalk.addMethod("_handleError_",smalltalk.method({selector:"handleError:",category:"error handling",fn:function(a){($receiver=smalltalk.send(a,"_context",[]))!=nil&&$receiver!=void 0&&smalltalk.send(this,"_logErrorContext_",[smalltalk.send(a,"_context",[])]);smalltalk.send(this,"_logError_",[a]);return this},args:["anError"],source:"handleError: anError\n\tanError context ifNotNil: [self logErrorContext: anError context].\n\tself logError: anError",messageSends:["ifNotNil:","context","logErrorContext:",
"logError:"],referencedClasses:[]}),smalltalk.ErrorHandler);smalltalk.addMethod("_log_",smalltalk.method({selector:"log:",category:"private",fn:function(a){smalltalk.send(typeof console=="undefined"?nil:console,"_log_",[a]);return this},args:["aString"],source:"log: aString\n\tconsole log: aString",messageSends:["log:"],referencedClasses:[]}),smalltalk.ErrorHandler);
smalltalk.addMethod("_logContext_",smalltalk.method({selector:"logContext:",category:"private",fn:function(a){($receiver=smalltalk.send(a,"_home",[]))!=nil&&$receiver!=void 0&&smalltalk.send(this,"_logContext_",[smalltalk.send(a,"_home",[])]);smalltalk.send(this,"_log_",[smalltalk.send(smalltalk.send(smalltalk.send(smalltalk.send(a,"_receiver",[]),"_asString",[]),"__comma",[">>"]),"__comma",[smalltalk.send(a,"_selector",[])])]);return this},args:["aContext"],source:"logContext: aContext\n\taContext home ifNotNil: [\n\t\tself logContext: aContext home].\n\tself log: aContext receiver asString, '>>', aContext selector",
messageSends:"ifNotNil: home logContext: log: , asString receiver selector".split(" "),referencedClasses:[]}),smalltalk.ErrorHandler);smalltalk.addMethod("_logError_",smalltalk.method({selector:"logError:",category:"private",fn:function(a){smalltalk.send(this,"_log_",[smalltalk.send(a,"_messageText",[])]);return this},args:["anError"],source:"logError: anError\n\tself log: anError messageText",messageSends:["log:","messageText"],referencedClasses:[]}),smalltalk.ErrorHandler);
smalltalk.addMethod("_logErrorContext_",smalltalk.method({selector:"logErrorContext:",category:"private",fn:function(a){($receiver=a)!=nil&&$receiver!=void 0&&($receiver=smalltalk.send(a,"_home",[]))!=nil&&$receiver!=void 0&&smalltalk.send(this,"_logContext_",[smalltalk.send(a,"_home",[])]);return this},args:["aContext"],source:"logErrorContext: aContext\n\taContext ifNotNil: [\n\t\taContext home ifNotNil: [\n\t\t\tself logContext: aContext home]]",messageSends:["ifNotNil:","home","logContext:"],
referencedClasses:[]}),smalltalk.ErrorHandler);smalltalk.ErrorHandler.klass.iVarNames=["current"];smalltalk.addMethod("_current",smalltalk.method({selector:"current",category:"accessing",fn:function(){return($receiver=this["@current"])==nil||$receiver==void 0?this["@current"]=smalltalk.send(this,"_new",[]):$receiver},args:[],source:"current\n\t^current ifNil: [current := self new]",messageSends:["ifNil:","new"],referencedClasses:[]}),smalltalk.ErrorHandler.klass);
smalltalk.addMethod("_initialize",smalltalk.method({selector:"initialize",category:"initialization",fn:function(){smalltalk.send(this,"_register",[]);return this},args:[],source:"initialize\n\tself register",messageSends:["register"],referencedClasses:[]}),smalltalk.ErrorHandler.klass);
smalltalk.addMethod("_register",smalltalk.method({selector:"register",category:"initialization",fn:function(){smalltalk.send(smalltalk.ErrorHandler||ErrorHandler,"_setCurrent_",[smalltalk.send(this,"_new",[])]);return this},args:[],source:"register\n\tErrorHandler setCurrent: self new",messageSends:["setCurrent:","new"],referencedClasses:["ErrorHandler"]}),smalltalk.ErrorHandler.klass);
smalltalk.addMethod("_setCurrent_",smalltalk.method({selector:"setCurrent:",category:"accessing",fn:function(a){this["@current"]=a;return this},args:["anHandler"],source:"setCurrent: anHandler\n\tcurrent := anHandler",messageSends:[],referencedClasses:[]}),smalltalk.ErrorHandler.klass);smalltalk.addPackage("Kernel-Transcript",{});smalltalk.addClass("ConsoleTranscript",smalltalk.Object,["textarea"],"Kernel-Transcript");
smalltalk.addMethod("_clear",smalltalk.method({selector:"clear",category:"printing",fn:function(){return this},args:[],source:'clear\n\t"no op"',messageSends:[],referencedClasses:[]}),smalltalk.ConsoleTranscript);smalltalk.addMethod("_cr",smalltalk.method({selector:"cr",category:"printing",fn:function(){return this},args:[],source:'cr\n\t"no op"',messageSends:[],referencedClasses:[]}),smalltalk.ConsoleTranscript);
smalltalk.addMethod("_open",smalltalk.method({selector:"open",category:"actions",fn:function(){return this},args:[],source:"open",messageSends:[],referencedClasses:[]}),smalltalk.ConsoleTranscript);
smalltalk.addMethod("_show_",smalltalk.method({selector:"show:",category:"printing",fn:function(a){var b=nil,b=smalltalk.send(a,"_asString",[]);console.log(""+b);return this},args:["anObject"],source:"show: anObject\n\t| string |\n\tstring := anObject asString.\n\t<console.log(String(string))>",messageSends:["asString"],referencedClasses:[]}),smalltalk.ConsoleTranscript);
smalltalk.addMethod("_initialize",smalltalk.method({selector:"initialize",category:"initialization",fn:function(){smalltalk.send(smalltalk.Transcript||Transcript,"_register_",[smalltalk.send(this,"_new",[])]);return this},args:[],source:"initialize\n\tTranscript register: self new",messageSends:["register:","new"],referencedClasses:["Transcript"]}),smalltalk.ConsoleTranscript.klass);smalltalk.addClass("Transcript",smalltalk.Object,["textarea"],"Kernel-Transcript");
smalltalk.Transcript.klass.iVarNames=["current"];smalltalk.addMethod("_clear",smalltalk.method({selector:"clear",category:"printing",fn:function(){smalltalk.send(smalltalk.send(this,"_current",[]),"_clear",[]);return this},args:[],source:"clear\n    self current clear",messageSends:["clear","current"],referencedClasses:[]}),smalltalk.Transcript.klass);
smalltalk.addMethod("_cr",smalltalk.method({selector:"cr",category:"printing",fn:function(){smalltalk.send(smalltalk.send(this,"_current",[]),"_show_",[smalltalk.send(smalltalk.String||String,"_cr",[])]);return this},args:[],source:"cr\n    self current show: String cr",messageSends:["show:","current","cr"],referencedClasses:["String"]}),smalltalk.Transcript.klass);
smalltalk.addMethod("_current",smalltalk.method({selector:"current",category:"instance creation",fn:function(){return this["@current"]},args:[],source:"current\n    ^current",messageSends:[],referencedClasses:[]}),smalltalk.Transcript.klass);
smalltalk.addMethod("_new",smalltalk.method({selector:"new",category:"instance creation",fn:function(){smalltalk.send(this,"_shouldNotImplement",[]);return this},args:[],source:"new\n    self shouldNotImplement",messageSends:["shouldNotImplement"],referencedClasses:[]}),smalltalk.Transcript.klass);
smalltalk.addMethod("_open",smalltalk.method({selector:"open",category:"instance creation",fn:function(){smalltalk.send(smalltalk.send(this,"_current",[]),"_open",[]);return this},args:[],source:"open\n    self current open",messageSends:["open","current"],referencedClasses:[]}),smalltalk.Transcript.klass);
smalltalk.addMethod("_register_",smalltalk.method({selector:"register:",category:"instance creation",fn:function(a){this["@current"]=a;return this},args:["aTranscript"],source:"register: aTranscript\n\tcurrent := aTranscript",messageSends:[],referencedClasses:[]}),smalltalk.Transcript.klass);
smalltalk.addMethod("_show_",smalltalk.method({selector:"show:",category:"printing",fn:function(a){smalltalk.send(smalltalk.send(this,"_current",[]),"_show_",[a]);return this},args:["anObject"],source:"show: anObject\n    self current show: anObject",messageSends:["show:","current"],referencedClasses:[]}),smalltalk.Transcript.klass);smalltalk.initSubTree(smalltalk.Object);smalltalk.classes()._do_(function(a){a._initialize()});this.smalltalkReady&&this.smalltalkReady();
